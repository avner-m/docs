openapi: 3.1.0
info:
  title: MATTR VII API
  version: v2.3.1
  description: >
    # Introduction

    The MATTR VII API defines a set of capabilities that can be used to manage
    and interact with a MATTR VII tenant. This includes managing a Verifiable
    Credential across its lifecycle (issue-hold-verify) as well as various
    tenant administration and management tasks such as setting up a custom
    domain, creating DIDs and configuring issuance and verification workflows.

    Refer to our [API
    Changelog](https://learn.mattr.global/docs/vii-platform/api-change-log) to
    see changes from previous versions.


    # Getting Started with our APIs

    As a MATTR VII user, you are provided with the following details, required
    for accessing and engaging with your MATTR VII tenant:


    ``` json

    {

    "audience": "YOUR_AUDIENCE_URL",

    "url": "YOUR_AUTH_URL",

    "tenant_subdomain": "YOUR_TENANT_SUBDOMAIN",

    "client_id": "YOUR_CLIENT_ID",

    "client_secret": "YOUR_CLIENT_SECRET"

    }

    ```


    > If you have not received your tenant details or have questions, please
    [contact us](https://mattr.global/contact/) before proceeding.


    Use the `tenant_subdomain` value provided with your tenant details to
    construct a URL of the following structure:


    ``` http

    https://{YOUR_TENANT_SUBDOMAIN}.vii.au01.mattr.global

    ```


    This is the base URL you should use for all requests to your tenant,
    suffixed by the endpoint route detailed for the specific API you are
    calling.


    > MATTR trial tenants are hosted on servers in Australia by default. If you
    are a customer and requested your tenant to be hosted in a different region,
    the `au01` element in your URL should be replaced with a different value to
    correspond with your requested region. Please [contact
    us](https://mattr.global/contact/) if you are unsure what region to use.


    # Pagination

    Most list operations in the API enable cursor pagination using the `cursor`
    and `limit` query parameters:


    **Example on [Retrieve List of Credentials](#operation/retrieveListCreds)**

    ```

    GET https://{tenant-url}/core/v2/credentials

    ?limit=100

    &cursor=Y3JlYXRlZEF0PTIwMjAtMTAtMDhUMjMlM0ExMyUzQTE3Ljg5NtZGUxZWEyNzQ4MWI4

    ```


    * `limit`: determines how many entries are returned in that request, with a
    maximum value of 1000.

    * `cursor`: sets the location in the retrieved list to get the next batch of
    entries from. This is based on the returned `nextCursor`, found at the
    beginning of each returned range and identifies the last object in the list.


    Requesting an entry after the last list value will return an empty `data`
    object:


    ``` json

    {

    "data": []

    }

    ```


    Not providing a query parameter defaults the response to return the first
    range of entries with a `limit` of 100.


    # Authorization

    Access to the API is granted by our authorization provider. Use the
    `client_id` and `client_secret` provided with your tenant details to [make a
    request](#operation/authToken) to receive a bearer token from the auth
    provider. This token must then be used as an `authorization` header for all
    requests to protected endpoints (this is required for the majority of
    operations).


    <SecurityDefinitions />
  contact:
    email: support@mattr.global
tags:
  - name: Analytics
  - name: Messaging
  - name: Security
  - name: Custom Domain
  - name: DIDs
  - name: Inboxes
  - name: Webhooks
  - name: Ecosystems
  - name: Participants
  - name: Credential types
  - name: Policy
  - name: Issuer Policies
  - name: Verifier Policies
  - name: Compact Credentials Issuance
    x-displayName: Compact Credentials
  - name: Compact Semantic Credentials Issuance
    x-displayName: Compact Semantic Credentials
  - name: Web Credentials Issuance
    x-displayName: Web Credentials
  - name: Mobile Credentials Issuance
    x-displayName: Mobile Credentials
  - name: Compact Credentials Management
    x-displayName: Compact Credentials
  - name: Compact Semantic Credentials Management
    x-displayName: Compact Semantic Credentials
  - name: Web Credentials Management
    x-displayName: Web Credentials
  - name: Mobile Credentials Management
    x-displayName: Mobile Credentials
  - name: Compact Credentials Verification
    x-displayName: Compact Credentials
  - name: Compact Semantic Credentials Verification
    x-displayName: Compact Semantic Credentials
  - name: Web Credentials Verification
    x-displayName: Web Credentials
  - name: Mobile Credentials Verification
    x-displayName: Mobile Credentials
  - name: Compact Credentials Configuration
    x-displayName: Compact Credential Configuration
  - name: Compact Credentials PDF templates
  - name: Compact Credentials Apple Pass templates
  - name: Compact Credentials Google Pass templates
  - name: Compact Semantic Credentials Configuration
    x-displayName: Compact Semantic Credential Configuration
  - name: Compact Semantic Credentials PDF templates
  - name: Compact Semantic Credentials Apple Pass templates
  - name: Compact Semantic Credentials Google Pass templates
  - name: Web Credentials Configuration
    x-displayName: Web Credential Configuration
  - name: Mobile Credential Configuration
  - name: IACA
  - name: DSCs
  - name: Authentication Provider
  - name: Interaction Hook
  - name: Claims Source
  - name: Credential Issuance
  - name: Users
  - name: OIDC Verifier Auth
  - name: OIDC Verifiers
  - name: OIDC Verifier Client
x-tagGroups:
  - name: General
    tags:
      - Analytics
      - Messaging
      - Inboxes
  - name: Tenant configuration
    tags:
      - Security
      - Custom Domain
      - DIDs
      - IACA
      - DSCs
      - Webhooks
  - name: Ecosystem operations
    tags:
      - Ecosystems
      - Participants
      - Credential types
      - Policy
      - Issuer Policies
      - Verifier Policies
  - name: Direct Credential Issuance
    tags:
      - Compact Credentials Issuance
      - Compact Semantic Credentials Issuance
      - Web Credentials Issuance
      - Mobile Credentials Issuance
  - name: OpenID Verifiable Credential Issuance
    tags:
      - Authentication Provider
      - Interaction Hook
      - Claims Source
      - Compact Credentials Configuration
      - Compact Semantic Credentials Configuration
      - Web Credentials Configuration
      - Mobile Credential Configuration
      - Credential Issuance
      - Users
  - name: Credential Management
    tags:
      - Compact Credentials Management
      - Compact Semantic Credentials Management
      - Web Credentials Management
      - Mobile Credentials Management
  - name: Credential Verification
    tags:
      - Compact Credentials Verification
      - Compact Semantic Credentials Verification
      - Web Credentials Verification
  - name: Credential Templates
    tags:
      - Compact Credentials PDF templates
      - Compact Credentials Apple Pass templates
      - Compact Credentials Google Pass templates
      - Compact Semantic Credentials PDF templates
      - Compact Semantic Credentials Apple Pass templates
      - Compact Semantic Credentials Google Pass templates
  - name: OIDC Bridge Verification
    tags:
      - OIDC Verifier Auth
      - OIDC Verifiers
      - OIDC Verifier Client
security:
  - bearerAuth: []
paths:
  /core/v1/analytics/events:
    get:
      tags:
        - Analytics
      summary: Retrieve events
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      description: >
        Returns a list of matching events from the tenant's event database. 


        The `categories` and `types` parameters filter based on an **OR** logic,
        whilst all other parameters use an "AND" logic. For example `(categories
        OR types) AND requestIds AND dateFrom`.
      operationId: getEvents
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    minItems: 2
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: Event identifier.
                          example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
                        type:
                          type: string
                          description: Event type.
                          example: DCC_SIGN_START
                        timestamp:
                          type: string
                          description: Timestamp of when the event was generated.
                          example: '2023-06-01T02:45:44.087Z'
                        category:
                          type: string
                          description: Event category.
                          example: dcc
                        requestId:
                          type: string
                          description: Identifier for the request this event is part of.
                          example: c1c354f9-fe2b-47d3-9d23-af6c7514a56a
                        metadata:
                          type: object
                          description: >-
                            Available metadata will vary based on event type and
                            logging level.
                        data:
                          type: object
                          description: >-
                            Available data will vary based on event type and
                            logging level.
                      required:
                        - id
                        - type
                        - timestamp
                        - category
                        - metadata
                        - data
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page.
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '401':
          description: Unauthorized. The client is not authorized to access this resource.
        '403':
          description: >-
            Forbidden. The authorization server refuses to grant the client
            access to the resource.
        '500':
          description: Internal Server Error. An unexpected error occurred.
    parameters:
      - in: query
        name: ids
        schema:
          type: array
          items:
            example: e4c387e7-3e63-40f4-9a38-062aaae9ee50
            items:
              type: string
              minLength: 1
        description: Query by event IDs. These can be retrieved from event details.
      - in: query
        name: requestIds
        schema:
          type: array
          items:
            example: e4c387e7-3e63-40f4-9a38-062aaae9ee50
            items:
              type: string
              minLength: 1
        description: >-
          Query by request IDs. These can be retrieved from event details. The
          response will include all the individual events that are part of the
          queried request.
      - in: query
        name: categories
        schema:
          type: array
          items:
            example: dcc
            items:
              type: string
              minLength: 1
        description: >-
          Query by event categories. Uses an **OR** operation with `types`.
          Every **category** includes several event **types**. Each API endpoint
          details the event types it generates under the **Analytic events**
          heading.
      - in: query
        name: types
        schema:
          type: array
          items:
            example: DCC_SIGN_START
            items:
              type: string
              minLength: 1
        description: >-
          Query by event types. Uses an **OR** operation with `categories`.
          Every **category** includes several event **types**. Each API endpoint
          details the events it generates under the **Analytic events** heading.
      - in: query
        name: dateFrom
        schema:
          type: string
          format: date-time
          example: '2023-06-01T02:45:44.087Z'
        description: Query by event start date and time (inclusive), in ISO-8601 format.
      - in: query
        name: dateTo
        schema:
          type: string
          format: date-time
          example: '2023-06-30T23:59:59.999Z'
        description: Query by event end date and time (inclusive), in ISO-8601 format.
  /core/v1/messaging/sign:
    post:
      tags:
        - Messaging
      summary: Sign a message
      requestBody:
        description: Sign message request
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - didUrl
                - payload
              properties:
                didUrl:
                  type: string
                  description: >-
                    The did key that will be used to sign the message, which
                    must supports signing. You can obtain it from the DID
                    document
                    `DID.localMetadata.initialDidDocument.authentication[0]`
                    path.
                  example: did:example:abcdefghijkl#key1
                payload:
                  type: object
                  description: A JSON Object plaintext message
                  example:
                    msg: this is a message
                  title: JSONObjectMessage
              title: SignMessageRequest
            examples:
              Sign a Message:
                value:
                  didUrl: did:web:organization.com#2vcj3MjR4d
                  payload:
                    msg: this is a message
      responses:
        '200':
          description: Message signed
          content:
            application/json:
              schema:
                title: SignMessageResponse
                type: string
                description: Signed message in a response
                example: >-
                  eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa21mazNtMldIQlVxVm94SlZ3R1NQejVrYmFKNnpBMXRwN1JRWUJiUUdtczNoI3o2TWttZmszbTJXSEJVcVZveEpWd0dTUHo1a2JhSjZ6QTF0cDdSUVlCYlFHbXMzaCJ9.eyJtc2ciOiJUaGlzIGlzIGEgcGF5bG9hZCJ9.5E9qEmmSOMHLABAr4A9VzuNKFaO4EDo2GSCMoxQm9zsE7eCmEEuaAxtNhOUdd-Wvj64vqBBVl84XB1Yg7X9wBg
                required:
                  - ciphertext
        '400':
          description: Error signing message
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      description: >-
        Accepts a message payload and signs it with a JWS (JSON Web Signature)
        using the a specific key from the DID (Decentralized Identifier)
        provided in the request.


        ### **Analytic events**

        * MESSAGING_SIGN_START

        * MESSAGING_SIGN_SUCCESS

        * MESSAGING_SIGN_FAIL
      operationId: signMessage
    parameters: []
  /core/v1/messaging/verify:
    post:
      tags:
        - Messaging
      summary: Verify a message
      requestBody:
        description: Provide the JWS to verify
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jws:
                  type: string
                  description: JWS (JSON Web Siganture) in its compact form.
                  example: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
              title: VerifyRequest
            examples:
              Request:
                value:
                  jws: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        '200':
          description: Verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  didUrl:
                    type: string
                    description: >-
                      The `didUrl` included in the JWS (JSON Web Signature)
                      object.
                    example: did:web:organization.com#2vcj3MjR4d
                  did:
                    type: string
                    description: The DID URI parsed from the `didUrl`.
                    example: did:web:organization.com
                  verified:
                    type: boolean
                    description: Verification result.
                    example: true
                  payload:
                    oneOf:
                      - type: string
                      - type: object
                    description: The payload of the verified message
                title: VerifyMessageResponse
              examples:
                Verification successful:
                  value:
                    payload: payload
                    didUrl: did:web:organization.com#2vcj3MjR4d
                    did: did:web:organization.com
                    verified: true
                    signerPublicJwk:
                      kty: OKP
                      crv: Ed25519
                      x: oQvDM6MvUdcgRCqKGJOgteRC9U06_x7bFtY0T-MJ1rQ
                Verification failed:
                  value:
                    payload: payload
                    didUrl: did:web:organization.com#2vcj3MjR4d
                    did: did:web:organization.com
                    verified: false
        '400':
          description: Invalid JWS
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Verification failed:
                  value:
                    code: BadRequest
                    message: Verification failed
      description: >-
        Verifies the siganture of a provided JWS (JSON Web Signature),
        validating that the payload has not been tampered with and verifying
        that the kid in the JWS header is the same as the `iss` value in the
        Request Object.


        One use case for verifying a JWS with a DID is when the Mobile Wallet
        App sends a Request Object to an OpenID Provider as part of the
        Authorization Code Flow (as per
        https://openid.net/specs/openid-connect-core-1_0-final.html#RequestObject).
        The Request Object is wrapped in a JWS with a signature that is
        generated from the Subject DID on the mobile app. Therefore verifying
        the JWS proves that the mobile app has access to the private key of the
        Subject DID.


        ### **Analytic events**

        * MESSAGING_VERIFY_START

        * MESSAGING_VERIFY_SUCCESS

        * MESSAGING_VERIFY_FAIL
      operationId: verifyJws
    parameters: []
  /core/v1/messaging/encrypt:
    post:
      tags:
        - Messaging
      summary: Encrypt a message
      operationId: encryptMessage
      requestBody:
        description: Encryption parameters
        required: true
        content:
          application/json:
            schema:
              title: EncryptMessageRequest
              type: object
              properties:
                senderDidUrl:
                  type: string
                  description: >-
                    The sender's DID URL, obtained from the `id` field of the
                    first `keyAgreement` entry of its DID document
                    (`DID.localMetadata.initialDidDocument.keyAgreement[0].id`).
                    This must reference a key that supports key agreement.
                recipientDidUrls:
                  type: array
                  description: The intended recepient's Subject DID.
                  items:
                    type: string
                payload:
                  type: object
                  description: The message to be encrypted.
              required:
                - senderDidUrl
                - recipientDidUrls
                - payload
            examples:
              Encrypt credential offer:
                value:
                  senderDidUrl: >-
                    did:web:learn.vii.au01.mattr.global#z6LShWb1DVC2gkxoQ91VwHmNhci2A4NdVH4srFvLiTP6ETBK
                  recipientDidUrls:
                    - did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d
                    - did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN
                  payload:
                    id: 731961f2-bdc3-4f1e-8d59-cc308fd60ec8
                    type: >-
                      https://mattr.global/schemas/verifiable-credential/offer/OidcCredentialProvider
                    from: did:web:learn.vii.au01.mattr.global
                    created_time: 1616466734
                    body:
                      uri: >-
                        openid://discovery?issuer=https://tenant.vii.mattr.global/ext/oidc/v1/issuers/0dceeddd-f717-4bf2-b520-b3ddcd104a60
              Encrypt credential:
                value:
                  senderDidUrl: >-
                    did:web:learn.vii.au01.mattr.global#z6LShWb1DVC2gkxoQ91VwHmNhci2A4NdVH4srFvLiTP6ETBK
                  recipientDidUrls:
                    - did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN
                  payload:
                    id: 731961f2-bdc3-4f1e-8d59-cc308fd60ec8
                    type: >-
                      https://mattr.global/schemas/verifiable-credential/offer/Direct
                    to:
                      - did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN
                    from: did:web:learn.vii.au01.mattr.global
                    created_time: 1616466734
                    body:
                      credentials:
                        - '@context':
                            - https://www.w3.org/2018/credentials/v1
                            - https://schema.org
                          type:
                            - VerifiableCredential
                            - CourseCredential
                          issuer:
                            id: did:web:organization.com
                            name: tenant
                          issuanceDate: '2021-07-26T01:05:05.152Z'
                          credentialSubject:
                            id: >-
                              did:key:z6MkfxQU7dy8eKxyHpG267FV23agZQu9zmokd8BprepfHALi
                            givenName: Chris
                            familyName: Shin
                            educationalCredentialAwarded: Certificate Name
                          proof:
                            type: Ed25519Signature2018
                            created: '2021-07-26T01:05:06Z'
                          jws: >-
                            eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..o6hnrrWpArG8LQz2Ex_u66_BtuPdp3Hkz18nhNdNhJ7J1k_2lmCCwsNdmo-kNFirZdSIMzqO-V3wEjMDphVEAA
                          proofPurpose: assertionMethod
                          verificationMethod: >-
                            did:key:z6MkndAHigYrXNpape7jgaC7jHiWwxzB3chuKUGXJg2b5RSj#z6MkndAHigYrXNpape7jgaC7jHiWwxzB3chuKUGXJg2b5RSj
                      domain: learn.vii.au01.mattr.global
      responses:
        '200':
          description: Message encrypted
          content:
            application/json:
              schema:
                title: EncryptedMessage
                type: object
                properties:
                  jwe:
                    type: object
                    description: The encrypted message in JWM format.
                    properties:
                      protected:
                        type: string
                        minLength: 1
                      recipients:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          required:
                            - encryption_key
                          properties:
                            header:
                              type: object
                              properties:
                                alg:
                                  type: string
                                  minLength: 1
                                kid:
                                  type: string
                                  minLength: 1
                                epk:
                                  type: object
                                  properties:
                                    kty:
                                      type: string
                                      minLength: 1
                                    crv:
                                      type: string
                                      minLength: 1
                                    x:
                                      type: string
                                      minLength: 1
                                  required:
                                    - kty
                                    - crv
                                    - x
                                skid:
                                  type: string
                                  minLength: 1
                              required:
                                - alg
                                - kid
                                - epk
                                - skid
                            encryption_key:
                              type: string
                              minLength: 1
                      ciphertext:
                        type: string
                        minLength: 1
                      iv:
                        type: string
                        minLength: 1
                      tag:
                        type: string
                        minLength: 1
                    required:
                      - protected
                      - recipients
                      - ciphertext
                      - iv
                      - tag
                required:
                  - jwe
              examples:
                Encrypted message:
                  value:
                    jwe:
                      protected: eyJhbGciOiJYQzIwUCJ9
                      recipients:
                        - header:
                            alg: ECDH-1PU+A256KW
                            kid: >-
                              did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d#z6LSsvqSJkBvVEsDC8cxMHuQ3sKoLRMXB1MdtoLrMUq6A8Rg
                            epk:
                              kty: OKP
                              crv: X25519
                              x: JOLnYaD7L-Rszz7fczPhn6MkNre25PUsztzB1RHoz14
                            skid: >-
                              did:key:z6MkreuqFq6WrwozTeGKuUDz8bniTFRNAg8f3ZB862YdLp7v#z6LScyz3YLToyoKwZE6Tfq65hgZUkZdHrC4ZqohcUH9X6Twx
                          encryption_key: >-
                            ag5iKzjJOth9Wa68dCVKJW_vnO_Ga0zSJgQp5rIUg69HCzIjuNYhDg
                        - header:
                            alg: ECDH-1PU+A256KW
                            kid: >-
                              did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN#z6LSgDiT1CkducmcSPaq9E1Uj1qdSXBjsUNqqLQLrUu8EHWd
                            epk:
                              kty: OKP
                              crv: X25519
                              x: gDYW7rhG3cBqFp9trFETtlut6QJxYVVSoVWL7eN1bzE
                            skid: >-
                              did:key:z6MkreuqFq6WrwozTeGKuUDz8bniTFRNAg8f3ZB862YdLp7v#z6LScyz3YLToyoKwZE6Tfq65hgZUkZdHrC4ZqohcUH9X6Twx
                          encryption_key: >-
                            F5R5ZW7Yk7_iWT5kUWqv3w_tLI7V86tLRthjy_SSbGQ2pFyXKni_gA
                      ciphertext: >-
                        xpW-D6sDPpWc_jk87nEyxPX7JQV8_OZpaQft7ySQ5XmNhoj-lQyDkXDncOCyhB7yMSdZrRBNQjKxlEbpY_WLk1hBoWfsTeszVSAuFbX_VKUSJ7GR6rcnWGVNgDfKS8GsyC_owtswXatkF_65_mzFOygctkUmd2eI5bcpQpWjhw2vqnvnWkb7l2J27aWFF_c9cu52dB559j8lwLYyYC9oSMgV5piB6ppfrWBGo_DigjxvJcAYcjFYqFcT6A1nphPhwVTQ2HNfJodbQoseHub8UQdG4qAOcggq5DI84tbqor1SU9rdPH03jPkLgoO_aeXyJg5meITXoFSiu_tRfvf8QQ6vKq6pkTTXs8zKXcBCGhGIyKBNBG4R4RIY1UffTMnJQQQGBble3P06pGOnsnSop0BtygelB9M0ZEwnAUSAQqN1RR4AQwWcn9nH6hHEu1pMhSvhCuFNAPWS-hg24JGGw8Xe3EEZlLH0PM8qpUAfksPq
                      iv: FJq5zKvuPiUQIdRcMtiChHCJByuY8XK9
                      tag: u8kT0VAAtTswjGXxNpuX0g==
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Sender DID not found:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Resource Not Found
                        param: senderDidUrl
                        value: >-
                          did:key:z6MkopLiuMudqeRm1KvQ24jyUfn6pciePNomKqpsiMgeg4nT#z6LSmWEcPwNbxCgbuSMGTz1Gddnf9MsVSMJCfgPtksgThLvi
      description: >
        Encrypts the provided payload using into a JWM (JSON Web Message)
        format.


        ### **Analytic events**

        * MESSAGING_ENCRYPT_START

        * MESSAGING_ENCRYPT_SUCCESS

        * MESSAGING_ENCRYPT_FAIL
    parameters: []
  /core/v1/messaging/decrypt:
    post:
      tags:
        - Messaging
      summary: Decrypt a message
      operationId: decryptMessage
      requestBody:
        description: Decryption parameters
        required: true
        content:
          application/json:
            schema:
              title: DecryptMessageRequest
              type: object
              properties:
                jwe:
                  description: >-
                    The `jwe` object to be decrypted. It can be extracted from
                    the `jwe` attribute of the response body you get when
                    [encrypting a message](#operation/encryptMessage).

                    Alternatively, you can use a `jwe string` using `Base64`
                    encoding method and following the [JWE
                    open-standard](https://datatracker.ietf.org/doc/rfc7516/):

                    `BASE64URL(UTF8(JWE Protected Header)) || '.' ||
                    BASE64URL(JWE Encrypted Key) || '.' || BASE64URL(JWE
                    Initialization Vector) || '.' || BASE64URL(JWE Ciphertext)
                    || '.' || ASE64URL(JWE Authentication Tag)`
                  oneOf:
                    - type: string
                      example: >-
                        eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDp3ZWI6bWF0dHIuZ2xvYmFsI0V5MkN2V2N5MzQifQ.eyJtZXNzYWdlIjoidGVzdCJ9.dMvOGkfbRrjUJL7XYYAp1UxoHlt8J0N5_vRRLpTEHtQ4s8lwnMd0lhg7HiZVfvEyzk54f6J0CgTV5oHzVscdAA
                    - title: EncryptedMessage
                      type: object
                      properties:
                        jwe:
                          type: object
                          description: The encrypted message in JWM format.
                          properties:
                            protected:
                              type: string
                              minLength: 1
                            recipients:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                required:
                                  - encryption_key
                                properties:
                                  header:
                                    type: object
                                    properties:
                                      alg:
                                        type: string
                                        minLength: 1
                                      kid:
                                        type: string
                                        minLength: 1
                                      epk:
                                        type: object
                                        properties:
                                          kty:
                                            type: string
                                            minLength: 1
                                          crv:
                                            type: string
                                            minLength: 1
                                          x:
                                            type: string
                                            minLength: 1
                                        required:
                                          - kty
                                          - crv
                                          - x
                                      skid:
                                        type: string
                                        minLength: 1
                                    required:
                                      - alg
                                      - kid
                                      - epk
                                      - skid
                                  encryption_key:
                                    type: string
                                    minLength: 1
                            ciphertext:
                              type: string
                              minLength: 1
                            iv:
                              type: string
                              minLength: 1
                            tag:
                              type: string
                              minLength: 1
                          required:
                            - protected
                            - recipients
                            - ciphertext
                            - iv
                            - tag
                      required:
                        - jwe
              required:
                - jwe
      responses:
        '200':
          description: Message Decrypted
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    oneOf:
                      - type: string
                      - type: object
                  senderDidUrl:
                    type: string
                    description: Sender DID retrieved from the decrypted message.
                    example: did:web:organization.com#2vcj3MjR4d
                  senderPublicJwk:
                    type: object
                    description: >-
                      The sender public JWK (JSON Web Key) retrieved from the
                      decrypted message.
                  recipientDidUrl:
                    type: string
                    description: >-
                      Intended recipient DID URI retrieved from the decrypted
                      message.
                    example: did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d
                title: DecryptMessageResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      description: >-
        Decrypts a provided message where the tenant manages the keys for the
        defined `recipientDidUrl`.


        ### **Analytic events**

        * MESSAGING_DECRYPT_START

        * MESSAGING_DECRYPT_SUCCESS

        * MESSAGING_DECRYPT_FAIL
    parameters: []
  /core/v1/messaging/send:
    post:
      summary: Send a message
      operationId: sendMessage
      description: >-
        Sends an encrypted JWM (JSON Web Messaging) format message to a service
        endpoint defined in a public DID document.


        ### **Analytic events**

        * MESSAGING_SEND_START

        * MESSAGING_SEND_SUCCESS

        * MESSAGING_SEND_FAIL
      tags:
        - Messaging
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  description: Recipient DID.
                message:
                  oneOf:
                    - type: string
                    - type: object
                  description: >-
                    Message in JWE (JSON Web Encryption) format. This endpoint
                    only accepts Encrypted payloads to ensure that messages are
                    encrypted-at-rest whilst in messaging inboxes. The message
                    should be encrypted for the recipient based on a key
                    available in the DID Document.
              title: SendMessageRequest
            examples:
              Send message:
                value:
                  to: did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d
                  message:
                    protected: eyJhbGciOiJYQzIwUCJ9
                    recipients:
                      - header:
                          alg: ECDH-1PU+A256KW
                          kid: >-
                            did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d#z6LSsvqSJkBvVEsDC8cxMHuQ3sKoLRMXB1MdtoLrMUq6A8Rg
                          epk:
                            kty: OKP
                            crv: X25519
                            x: kYsO02jWHATTJel6OpePqlkdDmKlE5VOr18UblgL8W0
                          skid: >-
                            did:key:z6Mko4PvuwKzmjtaKTEV6ZhMSYqX5myTSe3L3Md4feiwCoua#z6LSkKk8HK73jYfUQRBHX3Qeb1Agv39qVNFn7n2PjRvjpPcy
                        encryption_key: n1VUf5SQdSFNtb8DHzYfJJ_lFhJcGDAPJWG8Y1W3d2qYyPzyxMhyaA
                      - header:
                          alg: ECDH-1PU+A256KW
                          kid: >-
                            did:key:z6MkgxxdrThaRd7HbeAA4pYEwAgKT6ZXy2aNTcPkmeF1yWHN#z6LSgDiT1CkducmcSPaq9E1Uj1qdSXBjsUNqqLQLrUu8EHWd
                          epk:
                            kty: OKP
                            crv: X25519
                            x: P3jcIMPGK8thxyHxUsWB5fEsLnltJqRDWMNywtexk24
                          skid: >-
                            did:key:z6Mko4PvuwKzmjtaKTEV6ZhMSYqX5myTSe3L3Md4feiwCoua#z6LSkKk8HK73jYfUQRBHX3Qeb1Agv39qVNFn7n2PjRvjpPcy
                        encryption_key: 5ZOTqwj8NredkXEOp4ZDLL1ohRQqNTS508BTkLlUVCkDoYvizCIdrg
                    ciphertext: >-
                      Dl4zBqMeEDwcnyyc17nYvSQ048fcsha_Lm0dfer1nqfo5y8oHvD2VGNTp_lawNJMWCzQF3NDZxxKFz__wTUeHCqisCE_DWbjo_W-R3avzW9S-JFajv9NRtjlfd5yp-1TtD2N5d-8oTtMGdAxq3dftN2Od1xRe4stubJBebl3nf8-lG99DIVGdL8Y-D98kFDxnMxgCKn4RXyHnMowFWlhQCooLeYqo8aWjqVFkzuJzn-p47W7rV9BCuoVThhVuNkjQm_dhBrqu0QMpjJucz7OvOHp0mojdYNKwvWT6dfOVNXetMlKjWCGtCTNFaDTGLc4agdcTjAlaF1iedcVXDOLqVvEugXWGlusE3a68y6gmPnqHjXR6CsEfPwkb5hKKtsyrh1eHu_9UUang5o6N76mummVw4UZkDF6tP1PVGPvyctz82tthnOcjO5mZQG41xfMEMNxWtF8P8wCh4LotpdexXtYigzBgkI1Qoa_FK1czYWAUovysAJCTOZtmg==
                    iv: jSd3E-ElCHE-QhSDxrQ-Jv4eQhkxOj0s
                    tag: dbDolGVDdvYsYdn-vVrICw==
        description: ''
      responses:
        '200':
          description: Message sent
        '400':
          description: Error sending message
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    parameters: []
  /core/v1/messaging/inboxes:
    post:
      tags:
        - Inboxes
      summary: Create an inbox
      description: >-
        Creates an inbox that can register DIDs and then hold messages sent to
        those DIDs service points.


        ### **Analytic events**

        * MESSAGING_INBOX_CREATE_START

        * MESSAGING_INBOX_CREATE_SUCCESS

        * MESSAGING_INBOX_CREATE_FAIL
      requestBody:
        description: Inbox configuration
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Inbox name.
                  minLength: 1
                  example: My_Inbox
              required:
                - name
      operationId: createInbox
      responses:
        '201':
          description: Inbox created
          content:
            application/json:
              schema:
                title: MessagingInbox
                type: object
                properties:
                  id:
                    type: string
                    example: f04faabf-cea8-4f39-95b3-0ce357ac4d03
                  name:
                    type: string
                    example: My_Inbox
                required:
                  - id
                  - name
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Existing inbox with same name:
                  value:
                    code: BadRequest
                    message: Unique Constraint Error
                    details:
                      - param: name
                        message: Must be unique
    get:
      tags:
        - Inboxes
      summary: List inboxes
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      description: |
        Returns a list of all inboxes on the tenant.

        ### **Analytic events**
        * MESSAGING_INBOX_RETRIEVE_LIST_START
        * MESSAGING_INBOX_RETRIEVE_LIST_SUCCESS
        * MESSAGING_INBOX_RETRIEVE_LIST_FAIL
      operationId: getInboxes
      responses:
        '200':
          description: A list of inboxes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    minItems: 2
                    items:
                      title: MessagingInbox
                      type: object
                      properties:
                        id:
                          type: string
                          example: f04faabf-cea8-4f39-95b3-0ce357ac4d03
                        name:
                          type: string
                          example: My_Inbox
                      required:
                        - id
                        - name
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
    parameters: []
  /core/v1/messaging/inboxes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Inbox ID
    get:
      tags:
        - Inboxes
      summary: Retrieve an inbox
      description: |
        Retrieves an inbox based on its ID.

        ### **Analytic events**
        * MESSAGING_INBOX_RETRIEVE_START
        * MESSAGING_INBOX_RETRIEVE_SUCCESS
        * MESSAGING_INBOX_RETRIEVE_FAIL
      operationId: getInbox
      responses:
        '200':
          description: Inbox returned
          content:
            application/json:
              schema:
                title: MessagingInbox
                type: object
                properties:
                  id:
                    type: string
                    example: f04faabf-cea8-4f39-95b3-0ce357ac4d03
                  name:
                    type: string
                    example: My_Inbox
                required:
                  - id
                  - name
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
    put:
      tags:
        - Inboxes
      summary: Update an inbox
      requestBody:
        description: |-
          Updates an inbox name.

          ### **Analytic events**
          * MESSAGING_INBOX_UPDATE_START
          * MESSAGING_INBOX_UPDATE_SUCCESS
          * MESSAGING_INBOX_UPDATE_FAIL
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
              required:
                - name
      operationId: updateInbox
      responses:
        '200':
          description: Inbox updated
          content:
            application/json:
              schema:
                title: MessagingInbox
                type: object
                properties:
                  id:
                    type: string
                    example: f04faabf-cea8-4f39-95b3-0ce357ac4d03
                  name:
                    type: string
                    example: My_Inbox
                required:
                  - id
                  - name
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
                Existing inbox with same name:
                  value:
                    code: BadRequest
                    message: Unique Constraint Error
                    details:
                      - param: name
                        message: Must be unique
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      description: Update the inbox configurations
    delete:
      tags:
        - Inboxes
      summary: Delete an inbox
      responses:
        '204':
          description: Inbox deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: deleteInbox
      description: |-
        Deletes an inbox by providing its ID.

        ### **Analytic events**
        * MESSAGING_INBOX_DELETE_START
        * MESSAGING_INBOX_DELETE_SUCCESS
        * MESSAGING_INBOX_DELETE_FAIL
  /core/v1/messaging/inboxes/{id}/dids:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Requested inbox ID
    post:
      tags:
        - Inboxes
      summary: Register DID with an inbox
      requestBody:
        description: DID registration information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                did:
                  type: string
                  description: URI of the DID to register with this inbox.
                jwt:
                  type: string
              required:
                - did
      operationId: registerInboxDid
      responses:
        '201':
          description: DID registered with inbox
          content:
            application/json:
              schema:
                type: object
                properties:
                  did:
                    type: string
                required:
                  - did
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
                DID not found:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Resource Not Found
                        param: did
                        value: >-
                          did:key:z6MkhzsSMkbGYNxyxtqNpTpPet119FSYn4om6yoZZfdUAHqj
                BLS DID key type not supported:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        value: >-
                          did:key:zUC75Wk5aeoMttq5Z4ShQTbVVLXSTy2hiEvh6L7GaFjcUWoff1szDbwvgs978r1BPy5oFL1J6n6YttvvaexugWvjrMGurpdtnYNthukkpzDqhim2ARwAHVFkdpYMF7T184jP5rx
                        param: did
                        msg: DID key with BLS key type is not supported
                Bad JWT:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: j.w.t
                        msg: Failed to verify JWT
                        param: jwt
                        location: body
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      description: |-
        Register the provided DID to the requested inbox.

        > DID registration with inboxes is currently limited to `did:key`'

        ### **Analytic events**
        * MESSAGING_INBOX_DID_REGISTER_START
        * MESSAGING_INBOX_DID_REGISTER_SUCCESS
        * MESSAGING_INBOX_DID_REGISTER_FAIL
    get:
      summary: Retrieve inbox DIDs
      description: |
        Retrieves a list of all the DIDs registered with the requested inbox.

        ### **Analytic events**
        * MESSAGING_INBOX_DID_RETRIEVE_LIST_START
        * MESSAGING_INBOX_DID_RETRIEVE_LIST_SUCCESS
        * MESSAGING_INBOX_DID_RETRIEVE_LIST_FAIL
      operationId: getInboxDids
      responses:
        '200':
          description: A list of inbox DIDs
          content:
            application/json:
              schema:
                title: MessagingInboxDIDs
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                  data:
                    type: array
                    description: Array of DIDs which are registered with this inbox.
                    example:
                      - did:key:did1
                      - did:key:did2
                      - did:key:did3
                    items:
                      type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      tags:
        - Inboxes
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
  /core/v1/messaging/inboxes/{id}/dids/{did}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Requested inbox ID
      - schema:
          type: string
          example: did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9
        name: did
        in: path
        required: true
        description: DID
    delete:
      tags:
        - Inboxes
      description: |-
        Unregisters a DID from the requested inbox.

        ### **Analytic events**
        * MESSAGING_INBOX_DID_UNREGISTER_START
        * MESSAGING_INBOX_DID_UNREGISTER_SUCCESS
        * MESSAGING_INBOX_DID_UNREGISTER_FAIL
      operationId: unregisterInboxDid
      responses:
        '204':
          description: DID unregistered from inbox
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
                DID not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: body
                        msg: Resource Not Found
                        param: did
                        value: >-
                          did:key:z6MkuAAkHfkHFV6NTWZRYDmtipNNVYvrZ9PddQ2HJXZnfHvd
      summary: Unregister DID with an inbox
  /core/v1/messaging/inboxes/{id}/messages:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Requested inbox ID
    get:
      tags:
        - Inboxes
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      description: |
        Retrieving all the messages from an inbox

        ### **Analytic events**
        * MESSAGING_INBOX_MESSAGE_RETRIEVE_LIST_START
        * MESSAGING_INBOX_MESSAGE_RETRIEVE_LIST_SUCCESS
        * MESSAGING_INBOX_MESSAGE_RETRIEVE_LIST_FAIL
      operationId: getInboxMessages
      responses:
        '200':
          description: A list of inbox messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    minItems: 2
                    items:
                      title: MessageInboxMessage
                      type: object
                      properties:
                        name:
                          type: string
                          description: Message name.
                        createdAt:
                          type: string
                          format: date
                          description: Message creation date.
                        id:
                          type: string
                          description: Unique identifier of this message.
                        inboxId:
                          type: string
                          description: >-
                            Unique identifier of the inbox this message is held
                            in.
                        payload:
                          type: string
                          description: Message payload.
                      required:
                        - name
                        - createdAt
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      summary: Retrieve all messages
  /core/v1/messaging/inboxes/{id}/messages/{messageid}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Requested inbox ID
      - schema:
          type: string
        name: messageid
        in: path
        required: true
        description: Requested message ID
    get:
      tags:
        - Inboxes
      description: |
        Retrieves a message from the requested inbox by providing its ID.

        ### **Analytic events**
        * MESSAGING_INBOX_MESSAGE_RETRIEVE_START
        * MESSAGING_INBOX_MESSAGE_RETRIEVE_SUCCESS
        * MESSAGING_INBOX_MESSAGE_RETRIEVE_FAIL
      operationId: getInboxMessage
      responses:
        '200':
          description: An inbox message
          content:
            application/json:
              schema:
                title: MessageInboxMessage
                type: object
                properties:
                  name:
                    type: string
                    description: Message name.
                  createdAt:
                    type: string
                    format: date
                    description: Message creation date.
                  id:
                    type: string
                    description: Unique identifier of this message.
                  inboxId:
                    type: string
                    description: Unique identifier of the inbox this message is held in.
                  payload:
                    type: string
                    description: Message payload.
                required:
                  - name
                  - createdAt
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
                Message ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: messageId
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
                Message not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      summary: Retrieve a message
    delete:
      tags:
        - Inboxes
      description: |
        Deletes a message from the requested inbox by providing its ID.

        ### **Analytic events**
        * MESSAGING_INBOX_MESSAGE_DELETE_START
        * MESSAGING_INBOX_MESSAGE_DELETE_SUCCESS
        * MESSAGING_INBOX_MESSAGE_DELETE_FAIL
      operationId: deleteInboxMessage
      responses:
        '204':
          description: Message deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: inboxId
                        location: params
                Message ID not UUID format:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: notUUIDvalue
                        msg: Invalid value
                        param: messageId
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Inbox not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
                Message not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      summary: Delete a message
  /core/v1/config/domain:
    post:
      operationId: createCustomDomain
      tags:
        - Custom Domain
      summary: Configure custom domain
      description: >
        Creates a custom domain configuration on your tenant. You can configure
        a custom domain for a specific MATTR VII tenant to represent your brand
        and instil trust with your end-users. Any MATTR VII tenant can only have
        one custom domain. Refer to our
        [tutorial](https://learn.mattr.global/tutorials/tenant-management/custom-domain/overview)
        for more information.


        > Custom domains are only available as part of our paid plans, and trial
        accounts do not include ongoing access to custom domains. The APIs are
        available for you to trial the feature, but they may be deactivated
        unless you switch to a paid plan.


        ### **Analytic events**

        * CONFIG_CUSTOM_DOMAIN_CREATE_START

        * CONFIG_CUSTOM_DOMAIN_CREATE_SUCCESS

        * CONFIG_CUSTOM_DOMAIN_CREATE_FAIL
      requestBody:
        description: The custom domain payload
        required: true
        content:
          application/json:
            schema:
              type: object
              title: CreateCustomDomain
              description: ''
              properties:
                name:
                  type: string
                  description: >-
                    Insert a name for the custom domain that will be displayed
                    to digital wallet holders when they receive credential
                    offers or verification requests from this tenant.
                logoUrl:
                  type: string
                  description: >-
                    Insert a URL for a square logo that will be displayed to
                    digital wallet holders when they receive credential offers
                    or verification requests from your MATTR VII tenant:

                    * URL must be publicly available.

                    * Must be a square image, recommended 64x64 px in size

                    * **png** and **jpg** files are supported.

                    * The recommended maximum size is 15 KB.
                domain:
                  type: string
                  description: >-
                    Insert the full custom domain, leaving out the protocol
                    (e.g. https://).
              required:
                - name
                - logoUrl
                - domain
            examples:
              Create a Custom Domain:
                value:
                  name: Example Corp
                  logoUrl: https://cdn.example.com/logo.jpg
                  domain: example.com
          application/xml:
            schema:
              type: object
              title: CreateCustomDomain
              description: ''
              properties:
                name:
                  type: string
                  description: >-
                    Insert a name for the custom domain that will be displayed
                    to digital wallet holders when they receive credential
                    offers or verification requests from this tenant.
                logoUrl:
                  type: string
                  description: >-
                    Insert a URL for a square logo that will be displayed to
                    digital wallet holders when they receive credential offers
                    or verification requests from your MATTR VII tenant:

                    * URL must be publicly available.

                    * Must be a square image, recommended 64x64 px in size

                    * **png** and **jpg** files are supported.

                    * The recommended maximum size is 15 KB.
                domain:
                  type: string
                  description: >-
                    Insert the full custom domain, leaving out the protocol
                    (e.g. https://).
              required:
                - name
                - logoUrl
                - domain
            examples: {}
      responses:
        '201':
          description: Custom domain created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Example Corp
                  logoUrl:
                    type: string
                    example: https://cdn.example.com/logo.icon
                  domain:
                    type: string
                    example: example.com
                  verificationToken:
                    type: string
                    description: >-
                      This value must be added to your domain DNS entry TXT
                      record. Refer to [Verify domain
                      ownership](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
                      for more information.
                    example: 8c6f36c1-91ff-439d-a518-48cf7ef421ef
                  isVerified:
                    type: boolean
                    description: >-
                      This will indicate `false` until the domain has been
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
                      MATTR VII will only use the custom domain after it has
                      been
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
                      and this field indicates `true`.
                    example: false
                  verifiedAt:
                    type:
                      - string
                      - null
                    description: >-
                      Indicates when the custom domain was
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
                      This field is only included in the response when
                      `isVerified` is `true`.
                required:
                  - name
                  - logoUrl
                  - domain
                  - verificationToken
                  - isVerified
                title: CustomDomainResponse
              examples:
                Created:
                  value:
                    name: Example Corp
                    logoUrl: https://cdn.example.com/logo.jpg
                    domain: example.com
                    verificationToken: 8c6f36c1-91ff-439d-a518-48cf7ef421ef
                    isVerified: false
        '400':
          description: Bad request, Invalid request body
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    get:
      operationId: retrieveCustomDomain
      tags:
        - Custom Domain
      summary: Retrieve custom domain
      description: >-
        Returns your tenant's custom domain configuration and its verification
        status.


        ### **Analytic events**

        * CONFIG_CUSTOM_DOMAIN_RETRIEVE_START

        * CONFIG_CUSTOM_DOMAIN_RETRIEVE_SUCCESS

        * CONFIG_CUSTOM_DOMAIN_RETRIEVE_FAIL
      responses:
        '200':
          description: Custom domain returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Example Corp
                  logoUrl:
                    type: string
                    example: https://cdn.example.com/logo.icon
                  domain:
                    type: string
                    example: example.com
                  verificationToken:
                    type: string
                    description: >-
                      This value must be added to your domain DNS entry TXT
                      record. Refer to [Verify domain
                      ownership](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
                      for more information.
                    example: 8c6f36c1-91ff-439d-a518-48cf7ef421ef
                  isVerified:
                    type: boolean
                    description: >-
                      This will indicate `false` until the domain has been
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
                      MATTR VII will only use the custom domain after it has
                      been
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
                      and this field indicates `true`.
                    example: false
                  verifiedAt:
                    type:
                      - string
                      - null
                    description: >-
                      Indicates when the custom domain was
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
                      This field is only included in the response when
                      `isVerified` is `true`.
                required:
                  - name
                  - logoUrl
                  - domain
                  - verificationToken
                  - isVerified
                title: CustomDomainResponse
              examples:
                Retrieve Domain:
                  value:
                    name: Example Corp
                    logoUrl: https://cdn.example.com/logo.icon
                    domain: example.com
                    verificationToken: 8c6f36c1-91ff-439d-a518-48cf7ef421ef
                    isVerified: true
                    verifiedAt: '2024-01-31T20:31:48.340Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    delete:
      operationId: removeCustomDomain
      tags:
        - Custom Domain
      summary: Delete custom domain
      description: >-
        Deletes the custom domain configuration on your tenant.


        > Deleting your custom domain configuration breaks the linkage with any
        credentials issued under the custom domain. These credentials will no
        longer be valid.


        ### **Analytic events**

        * CONFIG_CUSTOM_DOMAIN_DELETE_START

        * CONFIG_CUSTOM_DOMAIN_DELETE_SUCCESS

        * CONFIG_CUSTOM_DOMAIN_DELETE_FAIL
      responses:
        '204':
          description: Custom domain deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    put:
      summary: Update custom domain
      operationId: updateCustomDomain
      tags:
        - Custom Domain
      responses:
        '200':
          description: Custom Domain updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Example Corp
                  logoUrl:
                    type: string
                    example: https://cdn.example.com/logo.icon
                  domain:
                    type: string
                    example: example.com
                  verificationToken:
                    type: string
                    description: >-
                      This value must be added to your domain DNS entry TXT
                      record. Refer to [Verify domain
                      ownership](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
                      for more information.
                    example: 8c6f36c1-91ff-439d-a518-48cf7ef421ef
                  isVerified:
                    type: boolean
                    description: >-
                      This will indicate `false` until the domain has been
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
                      MATTR VII will only use the custom domain after it has
                      been
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
                      and this field indicates `true`.
                    example: false
                  verifiedAt:
                    type:
                      - string
                      - null
                    description: >-
                      Indicates when the custom domain was
                      [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
                      This field is only included in the response when
                      `isVerified` is `true`.
                required:
                  - name
                  - logoUrl
                  - domain
                  - verificationToken
                  - isVerified
                title: CustomDomainResponse
              examples:
                Updated:
                  value:
                    name: Example Corp
                    logoUrl: https://cdn.example.com/logo.icon
                    domain: example.com
                    verificationToken: 8c6f36c1-91ff-439d-a518-48cf7ef421ef
                    isVerified: true
                    verifiedAt: '2021-04-15T07:37:25.008Z'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      description: |-
        Updates the custom domain configuration.

        ### **Analytic events**
        * CONFIG_CUSTOM_DOMAIN_UPDATE_START
        * CONFIG_CUSTOM_DOMAIN_UPDATE_SUCCESS
        * CONFIG_CUSTOM_DOMAIN_UPDATE_FAIL
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateCustomDomain
              allOf:
                - type: object
                  properties:
                    id:
                      type: string
                - type: object
                  title: CreateCustomDomain
                  description: ''
                  properties:
                    name:
                      type: string
                      description: >-
                        Insert a name for the custom domain that will be
                        displayed to digital wallet holders when they receive
                        credential offers or verification requests from this
                        tenant.
                    logoUrl:
                      type: string
                      description: >-
                        Insert a URL for a square logo that will be displayed to
                        digital wallet holders when they receive credential
                        offers or verification requests from your MATTR VII
                        tenant:

                        * URL must be publicly available.

                        * Must be a square image, recommended 64x64 px in size

                        * **png** and **jpg** files are supported.

                        * The recommended maximum size is 15 KB.
                    domain:
                      type: string
                      description: >-
                        Insert the full custom domain, leaving out the protocol
                        (e.g. https://).
                  required:
                    - name
                    - logoUrl
                    - domain
            examples:
              Update a Custom Domain:
                value:
                  name: Example Corp
                  logoUrl: https://cdn.example.com/logo.jpg
                  domain: example.com
        description: ''
    parameters: []
  /core/v1/config/domain/verify:
    post:
      operationId: verifyCustomDomain
      tags:
        - Custom Domain
      summary: Verify custom domain
      description: >-
        Verifies that you have control of the configured custom domain by
        examining its TXT record.


        > Your custom domain will not be active until you verify it. Refer to
        [Verify domain
        ownership](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
        for more information.


        ### **Analytic events**

        * CONFIG_CUSTOM_DOMAIN_VERIFY_START

        * CONFIG_CUSTOM_DOMAIN_VERIFY_SUCCESS

        * CONFIG_CUSTOM_DOMAIN_VERIFY_FAIL
      responses:
        '204':
          description: Custom domain verified
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    parameters: []
  /core/v1/dids:
    post:
      tags:
        - DIDs
      summary: Create a DID
      description: >-
        Takes a supported [DID
        method](https://learn.mattr.global/docs/vii-platform/dids/structure) and
        returns a new DID with its generated keys and required information. This
        endpoint also registers the DID Document when applicable.


        MATTR VII currently supports creating DIDs of the following methods:

        - **did:key**: The most basic type of DID. The public key forms the DID
        and has no further data associated with it.

        - **did:web**: This type of DID requires hosting the DID document on a
        publicly accessible domain in order to make the document and its
        contents available.


        ### **Analytic events**

        * DID_CREATE_START

        * DID_CREATE_SUCCESS

        * DID_CREATE_FAIL
      requestBody:
        description: Options for creating the decentralized identifier
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  description: >-
                    Used to determine the type of DID to be created based on its
                    [DID
                    method](https://learn.mattr.global/docs/vii-platform/dids/structure).
                  enum:
                    - key
                    - web
                options:
                  type: object
                  description: >-
                    To define a key type for a did:key or to define a domain for
                    did:web
                  minItems: 1
                  properties:
                    keyType:
                      type: string
                      description: >-
                        Define the key types that will be generated for the
                        created DID:

                        - Supported `keyType` for `did:key` are `Ed25519` and
                        `Bls12381G2`.

                        - If `keyType` is omitted, the default keyType is
                        `Ed25519`. This keytype can be used as a Verifier DID.

                        - If `keyType` is set to `Bls12381G2` the created DID
                        supports BBS+ signatures for creating
                        selective-disclosure enabled credentials.

                        - As `did:key` only support `Ed25519` or `Bls12381G2`
                        key types, you can only use it to create Web
                        Credentials. If you wish to create Compact Credentials,
                        create a DID using a keyType of `P-256`, such as
                        `did:web`.

                        - The `Bls12381G2` key type cannot be used as a Verifier
                        DID as it does not support symmetric key signing
                        required to verify messages.


                        Note that keyType is only required for `did:key`, as
                        `did:web`s are automatically created with multiple key
                        types by default:

                        - P-256: This is the default option for signing Compact
                        Credentials.

                        - Bls12381G2Key2020: This is the default option for
                        signing Web Credentials. It supports
                        selective-disclosure and key rotation.

                        - Ed25519: Recommended when the `web:did` is used as a
                        Verifier DID, as it supports symmetric key signing
                        required for verifying messages.
                      example: Bls12381G2
                    url:
                      type: string
                      description: >-
                        Define the domain that will host the DID document. This
                        would likely be your tenant's URL. Refer to our [hosting
                        tutorial](https://learn.mattr.global/tutorials/dids/did-web/hosting)
                        for more information about hosting your `did:web`, and
                        to our [did:web for Custom domains
                        tutorial](https://learn.mattr.global/tutorials/dids/did-web/custom-domain)
                        if you are planning to setup a custom domain for your
                        tenant.
                      example: learn.vii.au01.mattr.global
              required:
                - method
              description: ''
              title: CreateDidDocument
            examples:
              Create did:web:
                value:
                  method: web
                  options:
                    url: learn.vii.au01.mattr.global
              Create did:key:
                value:
                  method: key
                  options:
                    keyType: Ed25519
      responses:
        '201':
          description: DID document created
          content:
            application/json:
              schema:
                type: object
                properties:
                  registrationStatus:
                    type: string
                    example: COMPLETED
                    description: >-
                      This status will update from PROCESSING to COMPLETED once
                      publicly resolvable. For `did:web` this  means the DID
                      document must be available on the `url` defined when it
                      was created.
                  did:
                    type: string
                    example: did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr
                    description: DID URI.
                  metadata:
                    type: object
                    required:
                      - keys
                    properties:
                      registered:
                        type: number
                        description: >-
                          Timestamp of when the DID was registered (Epoch Unix
                          timestamp).
                        example: 1583233799656
                      keys:
                        type: array
                        description: >-
                          An array of keys that describe the relationship
                          between keys listed in the DID document and keys that
                          exist in a connected Key Management System (KMS).
                        items:
                          type: object
                          properties:
                            kmsKeyId:
                              type: string
                              description: >-
                                Unique identifier of this key in the Key
                                Management System (KMS)
                              example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
                            didDocumentKeyId:
                              type: string
                              description: >-
                                Unique identifier of this key in the DID
                                document.
                              example: >-
                                did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
                          title: DidMetadataKey
                      initialDidDocument:
                        type: object
                        description: The DID document that this DID URI should resolve to.
                        items:
                          type: object
                          title: did
                          description: DID URI.
                    title: DidMetadata
                title: CreateDidResponse
              examples:
                did:web:
                  value:
                    did: did:web:learn.vii.au01.mattr.global
                    registrationStatus: COMPLETED
                    localMetadata:
                      keys:
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#z12KiP7r
                          kmsKeyId: 96fa6a94-a8cf-4afd-825b-70b46bdb60ee
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                          kmsKeyId: 378dfe87-6eba-4779-a402-34ff5b267840
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          kmsKeyId: a0cba537-ffe1-486d-aedd-6ead80e75519
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#CU6dJt9p8t
                          kmsKeyId: 250c4e1f-bae3-44ca-9f4e-4f7ff15851e2
                      registered: 1674421454614
                      initialDidDocument:
                        '@context':
                          - https://w3.org/ns/did/v1
                          - https://w3id.org/security/suites/x25519-2019/v1
                          - https://w3id.org/security/suites/jws-2020/v1
                          - https://w3id.org/security/suites/ed25519-2018/v1
                          - https://w3id.org/security/bbs/v1
                        id: did:web:learn.vii.au01.mattr.global
                        verificationMethod:
                          - id: did:web:learn.vii.au01.mattr.global#z12KiP7r
                            controller: did:web:learn.vii.au01.mattr.global
                            type: JsonWebKey2020
                            publicKeyJwk:
                              kty: EC
                              crv: P-256
                              x: PZWoBmV7vjJ55Aq5hFAPIH6uDA-V3G0ueVe22ahgL7w
                              'y': 7kzcj257Zvfpzyj2gFWrnCIbXZxQ6WyDOo2MdA6mpMI
                          - id: did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                            controller: did:web:learn.vii.au01.mattr.global
                            type: Ed25519VerificationKey2018
                            publicKeyBase58: 2vcj3MjR4dSKq5asFQ9oor7iZsqTKTfBpjLHgaP15Y24
                          - id: did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                            controller: did:web:learn.vii.au01.mattr.global
                            type: Bls12381G2Key2020
                            publicKeyBase58: >-
                              nCxqyzxHFioYCVwinAwJzTPwfs84pPaseZQFkfGXUxx5ZD93HE43aXicYsyj2s5HYFSSYw9WtRaWsKeF9qn2jBVZ2UNuQCdG1qna9jpZPTvWQY1t2Z2hxhhs8MV5P5QaozB
                        authentication:
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                        assertionMethod:
                          - did:web:learn.vii.au01.mattr.global#z12KiP7r
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                        capabilityDelegation:
                          - did:web:learn.vii.au01.mattr.global#z12KiP7r
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                        capabilityInvocation:
                          - did:web:learn.vii.au01.mattr.global#z12KiP7r
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                        keyAgreement:
                          - id: did:web:learn.vii.au01.mattr.global#CU6dJt9p8t
                            controller: did:web:learn.vii.au01.mattr.global
                            type: X25519KeyAgreementKey2019
                            publicKeyBase58: CU6dJt9p8twE4hmyGVFbVpUMmu6G732bVgD1tNupwYY7
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Unsupported method:
                  value:
                    code: BadRequest
                    message: Bad Request
                    details:
                      - value: xxx
                        msg: Invalid value
                        param: method
                        location: body
      operationId: createDid
    get:
      tags:
        - DIDs
      summary: Retrieve a list of DIDs
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      description: >
        Returns a list of all DIDs (Decentralized Identifiers) managed by the
        tenant and their associated meta-data.


        ### **Analytic events**

        * DID_RETRIEVE_LIST_START

        * DID_RETRIEVE_LIST_SUCCESS

        * DID_RETRIEVE_LIST_FAIL
      responses:
        '200':
          description: A list of DIDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      type: object
                      required:
                        - did
                        - localMetadata
                      properties:
                        did:
                          type: string
                          example: >-
                            did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr
                        localMetadata:
                          type: object
                          required:
                            - keys
                          properties:
                            registered:
                              type: number
                              description: >-
                                Timestamp of when the DID was registered (Epoch
                                Unix timestamp).
                              example: 1583233799656
                            keys:
                              type: array
                              description: >-
                                An array of keys that describe the relationship
                                between keys listed in the DID document and keys
                                that exist in a connected Key Management System
                                (KMS).
                              items:
                                type: object
                                properties:
                                  kmsKeyId:
                                    type: string
                                    description: >-
                                      Unique identifier of this key in the Key
                                      Management System (KMS)
                                    example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
                                  didDocumentKeyId:
                                    type: string
                                    description: >-
                                      Unique identifier of this key in the DID
                                      document.
                                    example: >-
                                      did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
                                title: DidMetadataKey
                            initialDidDocument:
                              type: object
                              description: >-
                                The DID document that this DID URI should
                                resolve to.
                              items:
                                type: object
                                title: did
                                description: DID URI.
                          title: DidMetadata
                title: GetDidsResponse
              examples:
                Example:
                  value:
                    data:
                      - did: did:web:learn.vii.au01.mattr.global
                        localMetadata:
                          keys:
                            - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#z12KiP7r
                              kmsKeyId: 96fa6a94-a8cf-4afd-825b-70b46bdb60ee
                            - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                              kmsKeyId: 378dfe87-6eba-4779-a402-34ff5b267840
                            - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                              kmsKeyId: a0cba537-ffe1-486d-aedd-6ead80e75519
                            - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#CU6dJt9p8t
                              kmsKeyId: 250c4e1f-bae3-44ca-9f4e-4f7ff15851e2
                          registered: 1674421454614
                          initialDidDocument:
                            '@context':
                              - https://w3.org/ns/did/v1
                              - https://w3id.org/security/suites/x25519-2019/v1
                              - https://w3id.org/security/suites/jws-2020/v1
                              - https://w3id.org/security/suites/ed25519-2018/v1
                              - https://w3id.org/security/bbs/v1
                            id: did:web:learn.vii.au01.mattr.global
                            verificationMethod:
                              - id: did:web:learn.vii.au01.mattr.global#z12KiP7r
                                controller: did:web:learn.vii.au01.mattr.global
                                type: JsonWebKey2020
                                publicKeyJwk:
                                  kty: EC
                                  crv: P-256
                                  x: PZWoBmV7vjJ55Aq5hFAPIH6uDA-V3G0ueVe22ahgL7w
                                  'y': 7kzcj257Zvfpzyj2gFWrnCIbXZxQ6WyDOo2MdA6mpMI
                              - id: did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                                controller: did:web:learn.vii.au01.mattr.global
                                type: Ed25519VerificationKey2018
                                publicKeyBase58: 2vcj3MjR4dSKq5asFQ9oor7iZsqTKTfBpjLHgaP15Y24
                              - id: did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                                controller: did:web:learn.vii.au01.mattr.global
                                type: Bls12381G2Key2020
                                publicKeyBase58: >-
                                  nCxqyzxHFioYCVwinAwJzTPwfs84pPaseZQFkfGXUxx5ZD93HE43aXicYsyj2s5HYFSSYw9WtRaWsKeF9qn2jBVZ2UNuQCdG1qna9jpZPTvWQY1t2Z2hxhhs8MV5P5QaozB
                            authentication:
                              - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                            assertionMethod:
                              - did:web:learn.vii.au01.mattr.global#z12KiP7r
                              - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                              - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                            capabilityDelegation:
                              - did:web:learn.vii.au01.mattr.global#z12KiP7r
                              - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                              - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                            capabilityInvocation:
                              - did:web:learn.vii.au01.mattr.global#z12KiP7r
                              - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                              - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                            keyAgreement:
                              - id: did:web:learn.vii.au01.mattr.global#CU6dJt9p8t
                                controller: did:web:learn.vii.au01.mattr.global
                                type: X25519KeyAgreementKey2019
                                publicKeyBase58: CU6dJt9p8twE4hmyGVFbVpUMmu6G732bVgD1tNupwYY7
                      - did: >-
                          did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                        localMetadata:
                          keys:
                            - kmsKeyId: 2462a440-ef70-413b-8e73-0b2905a73562
                              didDocumentKeyId: >-
                                did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                            - kmsKeyId: e65e6545-1ba0-4959-8272-db22a46f2e34
                              didDocumentKeyId: >-
                                did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6LSsfqtdz5mtaGRTZrGwhzK73xDYAtack5AHKcakR1eco7K
                          registered: 1671586060525
                          initialDidDocument:
                            id: >-
                              did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                            '@context':
                              - https://w3.org/ns/did/v1
                              - https://w3id.org/security/suites/x25519-2019/v1
                              - https://w3id.org/security/suites/ed25519-2018/v1
                            verificationMethod:
                              - id: >-
                                  did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                                type: Ed25519VerificationKey2018
                                controller: >-
                                  did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                                publicKeyBase58: Bqf3SpwXEypMQq9txNrURNy1kZXzAPXKVwinChGztncB
                            keyAgreement:
                              - id: >-
                                  did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6LSsfqtdz5mtaGRTZrGwhzK73xDYAtack5AHKcakR1eco7K
                                type: X25519KeyAgreementKey2019
                                controller: >-
                                  did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                                publicKeyBase58: Gzfj7gGuo7YgNBUWR4UMnTjjh2MTv8u1QLtuFxN7uRLZ
                            authentication:
                              - >-
                                did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                            assertionMethod:
                              - >-
                                did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                            capabilityDelegation:
                              - >-
                                did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                            capabilityInvocation:
                              - >-
                                did:key:z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ#z6MkqHv635BxaXJpXKzbdwpKGUX1a8oqaGmgBxdi2yF1p1PZ
                    nextCursor: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
      operationId: retrieveListOfDids
    parameters: []
  /core/v1/dids/{id}:
    get:
      tags:
        - DIDs
      summary: Resolve a DID
      description: >-
        Retrieves a DID and its metadata from the tenant by its URI. This may
        involve a network call depending on the method involved:

        - For did:key the public key is encapsulated in the DID URI itself.

        - For did:web it must be resolved by accessing the
        `/.well-known/did.json` path on its domain.


        ### **Analytic events**

        * DID_RETRIEVE_START

        * DID_RETRIEVE_SUCCESS

        * DID_RETRIEVE_FAIL
      responses:
        '200':
          description: A DID Document and its meta-data
          content:
            application/json:
              schema:
                type: object
                properties:
                  did:
                    type: object
                    title: did
                    description: DID URI.
                  registrationStatus:
                    type: string
                    description: >-
                      This status will update from `PROCESSING` to `COMPLETED`
                      once publicly resolvable. For `did:web` this means the DID
                      document must be available on the url defined when it was
                      created.
                  localMetadata:
                    type: object
                    required:
                      - keys
                    properties:
                      registered:
                        type: number
                        description: >-
                          Timestamp of when the DID was registered (Epoch Unix
                          timestamp).
                        example: 1583233799656
                      keys:
                        type: array
                        description: >-
                          An array of keys that describe the relationship
                          between keys listed in the DID document and keys that
                          exist in a connected Key Management System (KMS).
                        items:
                          type: object
                          properties:
                            kmsKeyId:
                              type: string
                              description: >-
                                Unique identifier of this key in the Key
                                Management System (KMS)
                              example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
                            didDocumentKeyId:
                              type: string
                              description: >-
                                Unique identifier of this key in the DID
                                document.
                              example: >-
                                did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
                          title: DidMetadataKey
                      initialDidDocument:
                        type: object
                        description: The DID document that this DID URI should resolve to.
                        items:
                          type: object
                          title: did
                          description: DID URI.
                    title: DidMetadata
                title: GetDidResponse
              examples:
                Example did:web:
                  value:
                    did: did:web:learn.vii.au01.mattr.global
                    registrationStatus: COMPLETED
                    localMetadata:
                      keys:
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#z12KiP7r
                          kmsKeyId: 96fa6a94-a8cf-4afd-825b-70b46bdb60ee
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                          kmsKeyId: 378dfe87-6eba-4779-a402-34ff5b267840
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          kmsKeyId: a0cba537-ffe1-486d-aedd-6ead80e75519
                        - didDocumentKeyId: did:web:learn.vii.au01.mattr.global#CU6dJt9p8t
                          kmsKeyId: 250c4e1f-bae3-44ca-9f4e-4f7ff15851e2
                      registered: 1674421454614
                      initialDidDocument:
                        '@context':
                          - https://w3.org/ns/did/v1
                          - https://w3id.org/security/suites/x25519-2019/v1
                          - https://w3id.org/security/suites/jws-2020/v1
                          - https://w3id.org/security/suites/ed25519-2018/v1
                          - https://w3id.org/security/bbs/v1
                        id: did:web:learn.vii.au01.mattr.global
                        verificationMethod:
                          - id: did:web:learn.vii.au01.mattr.global#z12KiP7r
                            controller: did:web:learn.vii.au01.mattr.global
                            type: JsonWebKey2020
                            publicKeyJwk:
                              kty: EC
                              crv: P-256
                              x: PZWoBmV7vjJ55Aq5hFAPIH6uDA-V3G0ueVe22ahgL7w
                              'y': 7kzcj257Zvfpzyj2gFWrnCIbXZxQ6WyDOo2MdA6mpMI
                          - id: did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                            controller: did:web:learn.vii.au01.mattr.global
                            type: Ed25519VerificationKey2018
                            publicKeyBase58: 2vcj3MjR4dSKq5asFQ9oor7iZsqTKTfBpjLHgaP15Y24
                          - id: did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                            controller: did:web:learn.vii.au01.mattr.global
                            type: Bls12381G2Key2020
                            publicKeyBase58: >-
                              nCxqyzxHFioYCVwinAwJzTPwfs84pPaseZQFkfGXUxx5ZD93HE43aXicYsyj2s5HYFSSYw9WtRaWsKeF9qn2jBVZ2UNuQCdG1qna9jpZPTvWQY1t2Z2hxhhs8MV5P5QaozB
                        authentication:
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                        assertionMethod:
                          - did:web:learn.vii.au01.mattr.global#z12KiP7r
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                        capabilityDelegation:
                          - did:web:learn.vii.au01.mattr.global#z12KiP7r
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                        capabilityInvocation:
                          - did:web:learn.vii.au01.mattr.global#z12KiP7r
                          - did:web:learn.vii.au01.mattr.global#2vcj3MjR4d
                          - did:web:learn.vii.au01.mattr.global#nCxqyzxHFi
                        keyAgreement:
                          - id: did:web:learn.vii.au01.mattr.global#CU6dJt9p8t
                            controller: did:web:learn.vii.au01.mattr.global
                            type: X25519KeyAgreementKey2019
                            publicKeyBase58: CU6dJt9p8twE4hmyGVFbVpUMmu6G732bVgD1tNupwYY7
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                '404':
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: resolveDid
    delete:
      description: >-
        Deletes a DID and all associated metadata by providing its URI. This
        includes all the removal of all associated private keys from the Key
        Management System (KMS).

        > For ledger-based DIDs the public DID Document will still be available.
        This means that for `did:web` you will need to manually remove the
        `did.json` from your hosted domain.


        ### **Analytic events**

        * DID_DELETE_START

        * DID_DELETE_SUCCESS

        * DID_DELETE_FAIL
      tags:
        - DIDs
      summary: Delete a DID
      responses:
        '204':
          description: DID successfully deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Unsupported method:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: xxx
                        msg: Invalid value
                        param: id
                        location: params
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                '404':
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: deleteDid
    parameters:
      - name: id
        in: path
        description: DID
        schema:
          type: string
          format: did
          example: did:key:z6Mkjr7vfzBfamiN6Wi6cyQUgTq6CEMXP1MzWQawsUEXJoa9
        required: true
  /.well-known/did-configuration:
    get:
      security: []
      tags:
        - DIDs
      summary: Well known DID configuration
      description: >
        Returns a list of Decentralized Identifier (DID) Configuration entries
        from the tenant. These are automatically created for **all** DIDS
        created on a tenant so that they can be used by any party aiming to
        establish and verify the domain-DID linkage by exposing cryptographic
        proofs. Thus, this endpoint is unprotected, public facing and can be
        deterministically found at the root of the tenant subdomain or alias by
        any party. Refer to [Well Known DID
        Configuration](https://identity.foundation/.well-known/resources/did-configuration)
        on the Decentralized Identity Foundation website for more information.
      responses:
        '200':
          description: List of DID Configuration entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      type: object
                      properties:
                        '@context':
                          type: array
                          example:
                            - https://www.w3.org/2018/credentials/v1
                            - https://www.w3.org/2018/credentials/examples/v1
                          items:
                            type: string
                            minLength: 1
                            example: >-
                              "https://www.w3.org/2018/credentials/v1",
                              "https://www.w3.org/2018/credentials/examples/v1"
                        type:
                          type: array
                          example:
                            - VerifiableCredential
                            - AlumniCredential
                          items:
                            type: string
                            minLength: 1
                            example: '"AlumniCredential", "VerifiableCredential"'
                        issuer:
                          description: >-
                            Includes Issuer id (DID), domain name and optional
                            branding properties.
                          oneOf:
                            - type: object
                              properties:
                                id:
                                  type: string
                                  example: did:web:organization.com
                                name:
                                  type: string
                                  example: Example University
                                logoUrl:
                                  type: string
                                  example: https://example.edu/img/logo.png
                                  description: >-
                                    The location of the logo image. The
                                    supported formats are jpg, png, and svg.
                                iconUrl:
                                  type: string
                                  example: https://example.edu/img/icon.png
                                  description: >-
                                    The location of the icon image. The
                                    supported formats are jpg, png, and svg.
                            - type: string
                        credentialBranding:
                          type: object
                          description: Includes optional credential branding properties.
                          properties:
                            backgroundColor:
                              type: string
                              example: '#B00AA0'
                              description: >-
                                The background colour used for the credential
                                card. The format is "#rrggbb" where "rrggbb" is
                                a hex RGB triplet, such as "#FFCC00".
                            watermarkImageUrl:
                              type: string
                              example: https://example.edu/img/watermark.png
                              description: >-
                                The location of the watermark image. The
                                supported formats are jpg, png, and svg.
                        issuanceDate:
                          type: string
                          format: date-time
                          example: '2020-05-02T12:06:29.156Z'
                        credentialStatus:
                          type: object
                          description: Credential status location information
                          properties:
                            id:
                              type: string
                              description: Unique ID for the credential status
                              example: >-
                                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                            type:
                              type: string
                              description: >-
                                Indicates that the status contains revocation
                                information
                              example: RevocationList2020Status
                            revocationListIndex:
                              type: integer
                              example: 1
                              description: >-
                                The location within the revocation list for the
                                credential
                            revocationListCredential:
                              type: string
                              description: The location of the revocation list
                              example: >-
                                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                          title: CredentialStatus
                        credentialSubject:
                          type: object
                          example:
                            givenName: Jamie
                            familyName: Doe
                            alumniOf: Example University
                          properties:
                            givenName:
                              type: string
                              example: Jamie
                            familyName:
                              type: string
                              example: Doe
                            alumniOf:
                              type: string
                              example: Example University
                        proof:
                          type: object
                          properties:
                            type:
                              type: string
                              example: Ed25519Signature2018
                            created:
                              type: string
                              format: date-time
                              example: '2020-05-02T12:06:29Z'
                            jws:
                              type: string
                              description: Compact form of JWS
                              example: >-
                                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                            proofPurpose:
                              type: string
                              example: assertionMethod
                            verificationMethod:
                              type: string
                              example: did:web:organization.com
                          title: ED25519Signature2018
                        name:
                          type: string
                          example: Alumni Credential
                          description: Name of the credential (requires v2 data model)
                        description:
                          type: string
                          example: >-
                            This credential shows that the person has attended
                            the mentioned university.
                          description: >-
                            Description of the credential (requires v2 data
                            model)
                      required:
                        - '@context'
                        - type
                        - issuanceDate
                        - credentialSubject
                        - proof
                      title: VerifiableCredential
                title: GetDidConfigJsonldResponse
              examples:
                Example:
                  value:
                    entries:
                      - '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - >-
                            https://identity.foundation/.well-known/contexts/did-configuration-v0.2.jsonld
                        type:
                          - VerifiableCredential
                          - DomainLinkageCredential
                        issuer: >-
                          did:key:z6MktarAWYW9iUWN2f9oAdHhFXdD9ZKRoEiQyPhQffBho4Df
                        issuanceDate: '2023-07-19T00:46:39.327Z'
                        credentialSubject:
                          id: >-
                            did:key:z6MktarAWYW9iUWN2f9oAdHhFXdD9ZKRoEiQyPhQffBho4Df
                          origin: tenant.vii.mattr.global
                        proof:
                          type: Ed25519Signature2018
                          created: '2023-07-19T00:46:39Z'
                          verificationMethod: >-
                            did:key:z6MktarAWYW9iUWN2f9oAdHhFXdD9ZKRoEiQyPhQffBho4Df#z6MktarAWYW9iUWN2f9oAdHhFXdD9ZKRoEiQyPhQffBho4Df
                          proofPurpose: assertionMethod
                          jws: >-
                            eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jx6VQ_iB80R2GVcqy-hBGHp0A-u-i9ynye7ipb0p4z-4I2ww8tgcut3JadipHUgTS9Qs2YwY2abUsj3045ywDA
                      - '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - >-
                            https://identity.foundation/.well-known/contexts/did-configuration-v0.2.jsonld
                          - https://w3id.org/security/bbs/v2
                        type:
                          - VerifiableCredential
                          - DomainLinkageCredential
                        issuer: >-
                          did:key:zUC745TL4zAa8D8qqHnwcmLj7QFcTbgsh41x6sbkRARPokFFvykvk6jjotsEmjpXniEQsm9r5LkSfXKXXu9F5698uDoQ9Bq8MeLtisqUoJJ1SZRa9tsU5EFfD2T2dR58RFMPW9K
                        issuanceDate: '2023-07-19T00:46:39.328Z'
                        credentialSubject:
                          id: >-
                            did:key:zUC745TL4zAa8D8qqHnwcmLj7QFcTbgsh41x6sbkRARPokFFvykvk6jjotsEmjpXniEQsm9r5LkSfXKXXu9F5698uDoQ9Bq8MeLtisqUoJJ1SZRa9tsU5EFfD2T2dR58RFMPW9K
                          origin: product-team.platform.staging.mattrlabs.io
                        proof:
                          type: BbsSignature2022
                          verificationMethod: >-
                            did:key:zUC745TL4zAa8D8qqHnwcmLj7QFcTbgsh41x6sbkRARPokFFvykvk6jjotsEmjpXniEQsm9r5LkSfXKXXu9F5698uDoQ9Bq8MeLtisqUoJJ1SZRa9tsU5EFfD2T2dR58RFMPW9K#zUC745TL4zAa8D8qqHnwcmLj7QFcTbgsh41x6sbkRARPokFFvykvk6jjotsEmjpXniEQsm9r5LkSfXKXXu9F5698uDoQ9Bq8MeLtisqUoJJ1SZRa9tsU5EFfD2T2dR58RFMPW9K
                          proofPurpose: assertionMethod
                          proofValue: >-
                            x8AFZpr/CUbwC4qony2g8BpW7hdF+KhM363b0jQ6MI+FFsKzwug92JDdeSXaFaZyCvfhkJrIdDGMAzyLSp9kJqH4B2cqPw2AcEsoNrTqxOEw9ZK7D1LXAkvElUhfmIZLKAmGpA8RNVPUG8Q+a2p49w==
      operationId: wellKnownDidConfig
  /v1/ecosystems:
    get:
      tags:
        - Ecosystems
      summary: Retrieve all ecosystems
      description: |-
        Retrieves a list of ecosystems.
        ### **Analytic events**
        * ECOSYSTEM_RETRIEVE_LIST_START
        * ECOSYSTEM_RETRIEVE_LIST_SUCCESS
        * ECOSYSTEM_RETRIEVE_LIST_FAIL
      operationId: getEcosystems
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: Ecosystems retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: The UUID of the ecosystem.
                          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                          readOnly: true
                        name:
                          type: string
                          description: The name of the ecosystem.
                          minLength: 1
                          maxLength: 50
                          example: My Ecosystem
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
    post:
      tags:
        - Ecosystems
      summary: Create ecosystem
      description: |-
        Creates an ecosystem.
        ### **Analytic events**
        * ECOSYSTEM_CREATE_START
        * ECOSYSTEM_CREATE_SUCCESS
        * ECOSYSTEM_CREATE_FAIL
      operationId: createEcosystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the ecosystem.
                  minLength: 1
                  maxLength: 50
                  example: My Ecosystem
      responses:
        '201':
          description: Ecosystem created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The UUID of the ecosystem.
                    example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                    readOnly: true
                  name:
                    type: string
                    description: The name of the ecosystem.
                    minLength: 1
                    maxLength: 50
                    example: My Ecosystem
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '500':
          description: Internal Server Error. An unexpected error occurred.
  /v1/ecosystems/{ecosystemId}:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
    get:
      tags:
        - Ecosystems
      summary: Retrieve ecosystem
      description: |-
        Retrieves an ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_RETRIEVE_START
        * ECOSYSTEM_RETRIEVE_SUCCESS
        * ECOSYSTEM_RETRIEVE_FAIL
      operationId: getEcosystem
      responses:
        '200':
          description: Ecosystem retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The UUID of the ecosystem.
                    example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                    readOnly: true
                  name:
                    type: string
                    description: The name of the ecosystem.
                    minLength: 1
                    maxLength: 50
                    example: My Ecosystem
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
    put:
      tags:
        - Ecosystems
      summary: Update ecosystem
      description: |-
        Updates an ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_UPDATE_START
        * ECOSYSTEM_UPDATE_SUCCESS
        * ECOSYSTEM_UPDATE_FAIL
      operationId: updateEcosystem
      responses:
        '200':
          description: Ecosystem updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The UUID of the ecosystem.
                    example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                    readOnly: true
                  name:
                    type: string
                    description: The name of the ecosystem.
                    minLength: 1
                    maxLength: 50
                    example: My Ecosystem
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
    delete:
      tags:
        - Ecosystems
      summary: Delete ecosystem
      description: |-
        Deletes an ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_DELETE_START
        * ECOSYSTEM_DELETE_SUCCESS
        * ECOSYSTEM_DELETE_FAIL
      operationId: deleteEcosystem
      responses:
        '204':
          description: Ecosystem deleted
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
  /v1/ecosystems/{ecosystemId}/policy:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
    get:
      tags:
        - Policy
      summary: Retrieve ecosystem policy
      description: |-
        Retrieves an ecosystem policy by its ID.
        ### **Analytic events**
        * ECOSYSTEM_POLICY_RETRIEVE_START
        * ECOSYSTEM_POLICY_RETRIEVE_SUCCESS
        * ECOSYSTEM_POLICY_RETRIEVE_FAIL
      operationId: getEcosystemPolicy
      parameters:
        - in: header
          name: If-None-Match
          description: >-
            The If-None-Match parameter enables caching. Specify the ETag of the
            latest retrieved policy version, so that the policy is only
            retrieved if it had changed since.
          schema:
            type: string
        - in: header
          name: Accept-Encoding
          description: >-
            Use the Accept-Encoding header to specify the supported content
            encodings.
          schema:
            type: string
            enum:
              - gzip
              - deflate
      responses:
        '200':
          headers:
            ETag:
              description: >-
                An Entity Tag (ETag) is a unique identifier assigned to a
                specific version of a resource. It allows clients to check if a
                resource has been modified since it was last retrieved.
              schema:
                type: string
                format: byte
              example: MTcwMTIyMDgzNzMzOA==
          description: Ecosystem policy retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  policyModifiedAt:
                    description: The timestamp when the ecosystem policy was last modified.
                    type: string
                    format: date-time
                    example: '2023-10-17T00:00:00Z'
                  credentials:
                    description: >-
                      A list of credentials associated with the ecosystem
                      policy.
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - ecosystemId
                        - profile
                        - type
                        - name
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 599bf148-d711-405a-a20b-9c8a87ac8850
                          description: Unique identifier for this credential type.
                          readOnly: true
                        ecosystemId:
                          type: string
                          format: uuid
                          description: The UUID of the ecosystem.
                          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                          readOnly: true
                        profile:
                          type: string
                          enum:
                            - compact
                            - compact-semantic
                            - web-semantic
                        type:
                          type: string
                          example: DriverLicence
                        name:
                          type: string
                          description: The name of the credential
                          minLength: 1
                          maxLength: 50
                          example: Driver's Licence
                  participants:
                    description: >-
                      A list of participants associated with the ecosystem
                      policy.
                    type: array
                    items:
                      allOf:
                        - required:
                            - id
                            - ecosystemId
                            - name
                            - identifiers
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: The UUID of the participant.
                              example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                              readOnly: true
                            ecosystemId:
                              type: string
                              format: uuid
                              description: The UUID of the ecosystem.
                              example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                              readOnly: true
                            name:
                              type: string
                              description: Name to easily identify the participant.
                              minLength: 1
                              maxLength: 50
                              example: My Participant
                            identifiers:
                              type: object
                              description: >-
                                Define the unique identifier that will be used
                                by this participant to issue and/or verify
                                credentials. Participants can have different
                                identifiers for different credential profiles.
                                Each participant must have at least one defined
                                credential profile, and for each credential
                                profile a participant can define exactly one
                                unique identifier.

                                - Credentials are only valid in the ecosystem if
                                they include an identifier of an issuer that is
                                a participant in the ecosystem.

                                - Verification requests are only valid in the
                                ecosystem if they include an identifier of a
                                verifier that is a participant in the ecosystem.

                                - For Mobile Credentials this must be the PEM of
                                a valid
                                [IACA](#operation/create-mobile-credential-iaca)
                                used by this participant to sign Mobile
                                Credentials, as defined in annex B of [ISO
                                18013-5](https://www.iso.org/standard/69084.html).
                                An exception to this aforementioned definition
                                is that IACAs with a `notBefore` date in the
                                future are considered valid.
                              additionalProperties:
                                type: object
                                properties:
                                  web-semantic:
                                    type: string
                                  compact-semantic:
                                    type: string
                                  compact:
                                    type: string
                                  mobile:
                                    type: array
                                    items:
                                      type: string
                              example:
                                web-semantic: did:web:example.com
                                compact-semantic: did:web:example.com
                                compact: did:web:example.com
                                mobile:
                                  - >-
                                    -----BEGIN
                                    CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                                    CERTIFICATE-----\r\n
                            isIssuer:
                              type: boolean
                              description: >-
                                Indicates whether the participant is an issuer
                                in the ecosystem (`true`) or not (`false`). When
                                set to `false`, the participant will not be able
                                to issue any valid credential types, even if it
                                is added to an issuer policy. The default value
                                is `false`, as this assigns the least privileges
                                to the new participant.
                              default: false
                              example: false
                            isVerifier:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is a
                                verifier in the ecosystem (`true`) or not
                                (`false`). When set to `false`, the participant
                                will not be able to verify any valid credential
                                types, even if it is added to a verifier policy.
                                The default value is `false`, as this assigns
                                the least privileges to the new participant.
                              default: false
                              example: false
                            isIssuerConstrained:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is
                                constrained to only issue specific types of
                                valid credentials (`true`) or not (`false`).
                                When set to `false`, the issuer can issue all
                                valid credential types defined within the
                                ecosystem, even if it is added to a more limited
                                issuer policy. The default value is `true`, as
                                this assigns the least privileges to the new
                                participant.
                              default: true
                              example: true
                            isVerifierConstrained:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is
                                constrained to only verify specific types of
                                valid credentials (`true`) or not (`false`).
                                When set to `false`, the verifier can verify all
                                valid credential types defined within the
                                ecosystem, even if it is added to a more limited
                                verifier policy. The default value is `true`, as
                                this assigns the least privileges to the new
                                participant.
                              default: true
                              example: true
                        - type: object
                          properties:
                            issuerAllowedCredentials:
                              description: >-
                                A list of credentials that can be validly issued
                                within the ecosystem.
                              type: array
                              items:
                                type: string
                                format: uuid
                              example:
                                - e0a07846-44e1-41a4-b704-1ccf6eb1a5af
                                - 25fa6ffc-bf6e-417c-865c-96fcf1d7d1a3
                            verifierAllowedCredentials:
                              description: >-
                                A list of credentials that can be validly
                                verified within the ecosystem.
                              type: array
                              items:
                                type: string
                                format: uuid
                              example:
                                - 4e25a240-76bb-4e9f-9f93-b93be287922b
                                - daca4a43-3ff9-4ecb-93fe-d9104e36bf74
                required:
                  - policyModifiedAt
                  - credentials
                  - participants
        '304':
          description: >-
            Not Modified. The resource has not been modified since the last
            request.
        '404':
          description: Not Found. The specified resource was not found.
  /v1/ecosystems/{ecosystemId}/participants:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
    get:
      tags:
        - Participants
      summary: Retrieve participants
      description: |-
        Retrieves a list of participants from the requested ecosystem.
        ### **Analytic events**
        * ECOSYSTEM_PARTICIPANT_RETRIEVE_LIST_START
        * ECOSYSTEM_PARTICIPANT_RETRIEVE_LIST_SUCCESS
        * ECOSYSTEM_PARTICIPANT_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      operationId: getEcosystemParticipants
      responses:
        '200':
          description: Participants retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      required:
                        - id
                        - ecosystemId
                        - name
                        - identifiers
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: The UUID of the participant.
                          example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                          readOnly: true
                        ecosystemId:
                          type: string
                          format: uuid
                          description: The UUID of the ecosystem.
                          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                          readOnly: true
                        name:
                          type: string
                          description: Name to easily identify the participant.
                          minLength: 1
                          maxLength: 50
                          example: My Participant
                        identifiers:
                          type: object
                          description: >-
                            Define the unique identifier that will be used by
                            this participant to issue and/or verify credentials.
                            Participants can have different identifiers for
                            different credential profiles. Each participant must
                            have at least one defined credential profile, and
                            for each credential profile a participant can define
                            exactly one unique identifier.

                            - Credentials are only valid in the ecosystem if
                            they include an identifier of an issuer that is a
                            participant in the ecosystem.

                            - Verification requests are only valid in the
                            ecosystem if they include an identifier of a
                            verifier that is a participant in the ecosystem.

                            - For Mobile Credentials this must be the PEM of a
                            valid
                            [IACA](#operation/create-mobile-credential-iaca)
                            used by this participant to sign Mobile Credentials,
                            as defined in annex B of [ISO
                            18013-5](https://www.iso.org/standard/69084.html).
                            An exception to this aforementioned definition is
                            that IACAs with a `notBefore` date in the future are
                            considered valid.
                          additionalProperties:
                            type: object
                            properties:
                              web-semantic:
                                type: string
                              compact-semantic:
                                type: string
                              compact:
                                type: string
                              mobile:
                                type: array
                                items:
                                  type: string
                          example:
                            web-semantic: did:web:example.com
                            compact-semantic: did:web:example.com
                            compact: did:web:example.com
                            mobile:
                              - >-
                                -----BEGIN
                                CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                                CERTIFICATE-----\r\n
                        isIssuer:
                          type: boolean
                          description: >-
                            Indicates whether the participant is an issuer in
                            the ecosystem (`true`) or not (`false`). When set to
                            `false`, the participant will not be able to issue
                            any valid credential types, even if it is added to
                            an issuer policy. The default value is `false`, as
                            this assigns the least privileges to the new
                            participant.
                          default: false
                          example: false
                        isVerifier:
                          type: boolean
                          description: >-
                            Indicates whether the created participant is a
                            verifier in the ecosystem (`true`) or not (`false`).
                            When set to `false`, the participant will not be
                            able to verify any valid credential types, even if
                            it is added to a verifier policy. The default value
                            is `false`, as this assigns the least privileges to
                            the new participant.
                          default: false
                          example: false
                        isIssuerConstrained:
                          type: boolean
                          description: >-
                            Indicates whether the created participant is
                            constrained to only issue specific types of valid
                            credentials (`true`) or not (`false`). When set to
                            `false`, the issuer can issue all valid credential
                            types defined within the ecosystem, even if it is
                            added to a more limited issuer policy. The default
                            value is `true`, as this assigns the least
                            privileges to the new participant.
                          default: true
                          example: true
                        isVerifierConstrained:
                          type: boolean
                          description: >-
                            Indicates whether the created participant is
                            constrained to only verify specific types of valid
                            credentials (`true`) or not (`false`). When set to
                            `false`, the verifier can verify all valid
                            credential types defined within the ecosystem, even
                            if it is added to a more limited verifier policy.
                            The default value is `true`, as this assigns the
                            least privileges to the new participant.
                          default: true
                          example: true
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
    post:
      tags:
        - Participants
      summary: Create participant
      description: |-
        Creates a participant in the requested ecosystem.
        ### **Analytic events**
        * ECOSYSTEM_PARTICIPANT_CREATE_START
        * ECOSYSTEM_PARTICIPANT_CREATE_SUCCESS
        * ECOSYSTEM_PARTICIPANT_CREATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - ecosystemId
                - name
                - identifiers
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: The UUID of the participant.
                  example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                  readOnly: true
                ecosystemId:
                  type: string
                  format: uuid
                  description: The UUID of the ecosystem.
                  example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                  readOnly: true
                name:
                  type: string
                  description: Name to easily identify the participant.
                  minLength: 1
                  maxLength: 50
                  example: My Participant
                identifiers:
                  type: object
                  description: >-
                    Define the unique identifier that will be used by this
                    participant to issue and/or verify credentials. Participants
                    can have different identifiers for different credential
                    profiles. Each participant must have at least one defined
                    credential profile, and for each credential profile a
                    participant can define exactly one unique identifier.

                    - Credentials are only valid in the ecosystem if they
                    include an identifier of an issuer that is a participant in
                    the ecosystem.

                    - Verification requests are only valid in the ecosystem if
                    they include an identifier of a verifier that is a
                    participant in the ecosystem.

                    - For Mobile Credentials this must be the PEM of a valid
                    [IACA](#operation/create-mobile-credential-iaca) used by
                    this participant to sign Mobile Credentials, as defined in
                    annex B of [ISO
                    18013-5](https://www.iso.org/standard/69084.html). An
                    exception to this aforementioned definition is that IACAs
                    with a `notBefore` date in the future are considered valid.
                  additionalProperties:
                    type: object
                    properties:
                      web-semantic:
                        type: string
                      compact-semantic:
                        type: string
                      compact:
                        type: string
                      mobile:
                        type: array
                        items:
                          type: string
                  example:
                    web-semantic: did:web:example.com
                    compact-semantic: did:web:example.com
                    compact: did:web:example.com
                    mobile:
                      - >-
                        -----BEGIN
                        CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                        CERTIFICATE-----\r\n
                isIssuer:
                  type: boolean
                  description: >-
                    Indicates whether the participant is an issuer in the
                    ecosystem (`true`) or not (`false`). When set to `false`,
                    the participant will not be able to issue any valid
                    credential types, even if it is added to an issuer policy.
                    The default value is `false`, as this assigns the least
                    privileges to the new participant.
                  default: false
                  example: false
                isVerifier:
                  type: boolean
                  description: >-
                    Indicates whether the created participant is a verifier in
                    the ecosystem (`true`) or not (`false`). When set to
                    `false`, the participant will not be able to verify any
                    valid credential types, even if it is added to a verifier
                    policy. The default value is `false`, as this assigns the
                    least privileges to the new participant.
                  default: false
                  example: false
                isIssuerConstrained:
                  type: boolean
                  description: >-
                    Indicates whether the created participant is constrained to
                    only issue specific types of valid credentials (`true`) or
                    not (`false`). When set to `false`, the issuer can issue all
                    valid credential types defined within the ecosystem, even if
                    it is added to a more limited issuer policy. The default
                    value is `true`, as this assigns the least privileges to the
                    new participant.
                  default: true
                  example: true
                isVerifierConstrained:
                  type: boolean
                  description: >-
                    Indicates whether the created participant is constrained to
                    only verify specific types of valid credentials (`true`) or
                    not (`false`). When set to `false`, the verifier can verify
                    all valid credential types defined within the ecosystem,
                    even if it is added to a more limited verifier policy. The
                    default value is `true`, as this assigns the least
                    privileges to the new participant.
                  default: true
                  example: true
      operationId: createEcosystemParticipant
      responses:
        '201':
          description: Participant created
          content:
            application/json:
              schema:
                required:
                  - id
                  - ecosystemId
                  - name
                  - identifiers
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The UUID of the participant.
                    example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                    readOnly: true
                  ecosystemId:
                    type: string
                    format: uuid
                    description: The UUID of the ecosystem.
                    example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                    readOnly: true
                  name:
                    type: string
                    description: Name to easily identify the participant.
                    minLength: 1
                    maxLength: 50
                    example: My Participant
                  identifiers:
                    type: object
                    description: >-
                      Define the unique identifier that will be used by this
                      participant to issue and/or verify credentials.
                      Participants can have different identifiers for different
                      credential profiles. Each participant must have at least
                      one defined credential profile, and for each credential
                      profile a participant can define exactly one unique
                      identifier.

                      - Credentials are only valid in the ecosystem if they
                      include an identifier of an issuer that is a participant
                      in the ecosystem.

                      - Verification requests are only valid in the ecosystem if
                      they include an identifier of a verifier that is a
                      participant in the ecosystem.

                      - For Mobile Credentials this must be the PEM of a valid
                      [IACA](#operation/create-mobile-credential-iaca) used by
                      this participant to sign Mobile Credentials, as defined in
                      annex B of [ISO
                      18013-5](https://www.iso.org/standard/69084.html). An
                      exception to this aforementioned definition is that IACAs
                      with a `notBefore` date in the future are considered
                      valid.
                    additionalProperties:
                      type: object
                      properties:
                        web-semantic:
                          type: string
                        compact-semantic:
                          type: string
                        compact:
                          type: string
                        mobile:
                          type: array
                          items:
                            type: string
                    example:
                      web-semantic: did:web:example.com
                      compact-semantic: did:web:example.com
                      compact: did:web:example.com
                      mobile:
                        - >-
                          -----BEGIN
                          CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                          CERTIFICATE-----\r\n
                  isIssuer:
                    type: boolean
                    description: >-
                      Indicates whether the participant is an issuer in the
                      ecosystem (`true`) or not (`false`). When set to `false`,
                      the participant will not be able to issue any valid
                      credential types, even if it is added to an issuer policy.
                      The default value is `false`, as this assigns the least
                      privileges to the new participant.
                    default: false
                    example: false
                  isVerifier:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is a verifier in
                      the ecosystem (`true`) or not (`false`). When set to
                      `false`, the participant will not be able to verify any
                      valid credential types, even if it is added to a verifier
                      policy. The default value is `false`, as this assigns the
                      least privileges to the new participant.
                    default: false
                    example: false
                  isIssuerConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only issue specific types of valid credentials (`true`)
                      or not (`false`). When set to `false`, the issuer can
                      issue all valid credential types defined within the
                      ecosystem, even if it is added to a more limited issuer
                      policy. The default value is `true`, as this assigns the
                      least privileges to the new participant.
                    default: true
                    example: true
                  isVerifierConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only verify specific types of valid credentials
                      (`true`) or not (`false`). When set to `false`, the
                      verifier can verify all valid credential types defined
                      within the ecosystem, even if it is added to a more
                      limited verifier policy. The default value is `true`, as
                      this assigns the least privileges to the new participant.
                    default: true
                    example: true
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
  /v1/ecosystems/{ecosystemId}/participants/{participantId}:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
      - in: path
        name: participantId
        description: The UUID of the participant
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the participant.
          example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
          readOnly: true
    get:
      tags:
        - Participants
      summary: Retrieve participant
      description: |-
        Retrieves a participant from the requested ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_PARTICIPANT_RETRIEVE_START
        * ECOSYSTEM_PARTICIPANT_RETRIEVE_SUCCESS
        * ECOSYSTEM_PARTICIPANT_RETRIEVE_FAIL
      operationId: getEcosystemParticipant
      responses:
        '200':
          description: Participant retrieved
          content:
            application/json:
              schema:
                required:
                  - id
                  - ecosystemId
                  - name
                  - identifiers
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The UUID of the participant.
                    example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                    readOnly: true
                  ecosystemId:
                    type: string
                    format: uuid
                    description: The UUID of the ecosystem.
                    example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                    readOnly: true
                  name:
                    type: string
                    description: Name to easily identify the participant.
                    minLength: 1
                    maxLength: 50
                    example: My Participant
                  identifiers:
                    type: object
                    description: >-
                      Define the unique identifier that will be used by this
                      participant to issue and/or verify credentials.
                      Participants can have different identifiers for different
                      credential profiles. Each participant must have at least
                      one defined credential profile, and for each credential
                      profile a participant can define exactly one unique
                      identifier.

                      - Credentials are only valid in the ecosystem if they
                      include an identifier of an issuer that is a participant
                      in the ecosystem.

                      - Verification requests are only valid in the ecosystem if
                      they include an identifier of a verifier that is a
                      participant in the ecosystem.

                      - For Mobile Credentials this must be the PEM of a valid
                      [IACA](#operation/create-mobile-credential-iaca) used by
                      this participant to sign Mobile Credentials, as defined in
                      annex B of [ISO
                      18013-5](https://www.iso.org/standard/69084.html). An
                      exception to this aforementioned definition is that IACAs
                      with a `notBefore` date in the future are considered
                      valid.
                    additionalProperties:
                      type: object
                      properties:
                        web-semantic:
                          type: string
                        compact-semantic:
                          type: string
                        compact:
                          type: string
                        mobile:
                          type: array
                          items:
                            type: string
                    example:
                      web-semantic: did:web:example.com
                      compact-semantic: did:web:example.com
                      compact: did:web:example.com
                      mobile:
                        - >-
                          -----BEGIN
                          CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                          CERTIFICATE-----\r\n
                  isIssuer:
                    type: boolean
                    description: >-
                      Indicates whether the participant is an issuer in the
                      ecosystem (`true`) or not (`false`). When set to `false`,
                      the participant will not be able to issue any valid
                      credential types, even if it is added to an issuer policy.
                      The default value is `false`, as this assigns the least
                      privileges to the new participant.
                    default: false
                    example: false
                  isVerifier:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is a verifier in
                      the ecosystem (`true`) or not (`false`). When set to
                      `false`, the participant will not be able to verify any
                      valid credential types, even if it is added to a verifier
                      policy. The default value is `false`, as this assigns the
                      least privileges to the new participant.
                    default: false
                    example: false
                  isIssuerConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only issue specific types of valid credentials (`true`)
                      or not (`false`). When set to `false`, the issuer can
                      issue all valid credential types defined within the
                      ecosystem, even if it is added to a more limited issuer
                      policy. The default value is `true`, as this assigns the
                      least privileges to the new participant.
                    default: true
                    example: true
                  isVerifierConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only verify specific types of valid credentials
                      (`true`) or not (`false`). When set to `false`, the
                      verifier can verify all valid credential types defined
                      within the ecosystem, even if it is added to a more
                      limited verifier policy. The default value is `true`, as
                      this assigns the least privileges to the new participant.
                    default: true
                    example: true
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
    put:
      tags:
        - Participants
      summary: Update participant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
                - ecosystemId
                - name
                - identifiers
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: The UUID of the participant.
                  example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                  readOnly: true
                ecosystemId:
                  type: string
                  format: uuid
                  description: The UUID of the ecosystem.
                  example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                  readOnly: true
                name:
                  type: string
                  description: Name to easily identify the participant.
                  minLength: 1
                  maxLength: 50
                  example: My Participant
                identifiers:
                  type: object
                  description: >-
                    Define the unique identifier that will be used by this
                    participant to issue and/or verify credentials. Participants
                    can have different identifiers for different credential
                    profiles. Each participant must have at least one defined
                    credential profile, and for each credential profile a
                    participant can define exactly one unique identifier.

                    - Credentials are only valid in the ecosystem if they
                    include an identifier of an issuer that is a participant in
                    the ecosystem.

                    - Verification requests are only valid in the ecosystem if
                    they include an identifier of a verifier that is a
                    participant in the ecosystem.

                    - For Mobile Credentials this must be the PEM of a valid
                    [IACA](#operation/create-mobile-credential-iaca) used by
                    this participant to sign Mobile Credentials, as defined in
                    annex B of [ISO
                    18013-5](https://www.iso.org/standard/69084.html). An
                    exception to this aforementioned definition is that IACAs
                    with a `notBefore` date in the future are considered valid.
                  additionalProperties:
                    type: object
                    properties:
                      web-semantic:
                        type: string
                      compact-semantic:
                        type: string
                      compact:
                        type: string
                      mobile:
                        type: array
                        items:
                          type: string
                  example:
                    web-semantic: did:web:example.com
                    compact-semantic: did:web:example.com
                    compact: did:web:example.com
                    mobile:
                      - >-
                        -----BEGIN
                        CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                        CERTIFICATE-----\r\n
                isIssuer:
                  type: boolean
                  description: >-
                    Indicates whether the participant is an issuer in the
                    ecosystem (`true`) or not (`false`). When set to `false`,
                    the participant will not be able to issue any valid
                    credential types, even if it is added to an issuer policy.
                    The default value is `false`, as this assigns the least
                    privileges to the new participant.
                  default: false
                  example: false
                isVerifier:
                  type: boolean
                  description: >-
                    Indicates whether the created participant is a verifier in
                    the ecosystem (`true`) or not (`false`). When set to
                    `false`, the participant will not be able to verify any
                    valid credential types, even if it is added to a verifier
                    policy. The default value is `false`, as this assigns the
                    least privileges to the new participant.
                  default: false
                  example: false
                isIssuerConstrained:
                  type: boolean
                  description: >-
                    Indicates whether the created participant is constrained to
                    only issue specific types of valid credentials (`true`) or
                    not (`false`). When set to `false`, the issuer can issue all
                    valid credential types defined within the ecosystem, even if
                    it is added to a more limited issuer policy. The default
                    value is `true`, as this assigns the least privileges to the
                    new participant.
                  default: true
                  example: true
                isVerifierConstrained:
                  type: boolean
                  description: >-
                    Indicates whether the created participant is constrained to
                    only verify specific types of valid credentials (`true`) or
                    not (`false`). When set to `false`, the verifier can verify
                    all valid credential types defined within the ecosystem,
                    even if it is added to a more limited verifier policy. The
                    default value is `true`, as this assigns the least
                    privileges to the new participant.
                  default: true
                  example: true
      description: |-
        Updates a participant in the requested ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_PARTICIPANT_UPDATE_START
        * ECOSYSTEM_PARTICIPANT_UPDATE_SUCCESS
        * ECOSYSTEM_PARTICIPANT_UPDATE_FAIL
      operationId: updateEcosystemParticipant
      responses:
        '200':
          description: Participant updated
          content:
            application/json:
              schema:
                required:
                  - id
                  - ecosystemId
                  - name
                  - identifiers
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The UUID of the participant.
                    example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                    readOnly: true
                  ecosystemId:
                    type: string
                    format: uuid
                    description: The UUID of the ecosystem.
                    example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                    readOnly: true
                  name:
                    type: string
                    description: Name to easily identify the participant.
                    minLength: 1
                    maxLength: 50
                    example: My Participant
                  identifiers:
                    type: object
                    description: >-
                      Define the unique identifier that will be used by this
                      participant to issue and/or verify credentials.
                      Participants can have different identifiers for different
                      credential profiles. Each participant must have at least
                      one defined credential profile, and for each credential
                      profile a participant can define exactly one unique
                      identifier.

                      - Credentials are only valid in the ecosystem if they
                      include an identifier of an issuer that is a participant
                      in the ecosystem.

                      - Verification requests are only valid in the ecosystem if
                      they include an identifier of a verifier that is a
                      participant in the ecosystem.

                      - For Mobile Credentials this must be the PEM of a valid
                      [IACA](#operation/create-mobile-credential-iaca) used by
                      this participant to sign Mobile Credentials, as defined in
                      annex B of [ISO
                      18013-5](https://www.iso.org/standard/69084.html). An
                      exception to this aforementioned definition is that IACAs
                      with a `notBefore` date in the future are considered
                      valid.
                    additionalProperties:
                      type: object
                      properties:
                        web-semantic:
                          type: string
                        compact-semantic:
                          type: string
                        compact:
                          type: string
                        mobile:
                          type: array
                          items:
                            type: string
                    example:
                      web-semantic: did:web:example.com
                      compact-semantic: did:web:example.com
                      compact: did:web:example.com
                      mobile:
                        - >-
                          -----BEGIN
                          CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                          CERTIFICATE-----\r\n
                  isIssuer:
                    type: boolean
                    description: >-
                      Indicates whether the participant is an issuer in the
                      ecosystem (`true`) or not (`false`). When set to `false`,
                      the participant will not be able to issue any valid
                      credential types, even if it is added to an issuer policy.
                      The default value is `false`, as this assigns the least
                      privileges to the new participant.
                    default: false
                    example: false
                  isVerifier:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is a verifier in
                      the ecosystem (`true`) or not (`false`). When set to
                      `false`, the participant will not be able to verify any
                      valid credential types, even if it is added to a verifier
                      policy. The default value is `false`, as this assigns the
                      least privileges to the new participant.
                    default: false
                    example: false
                  isIssuerConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only issue specific types of valid credentials (`true`)
                      or not (`false`). When set to `false`, the issuer can
                      issue all valid credential types defined within the
                      ecosystem, even if it is added to a more limited issuer
                      policy. The default value is `true`, as this assigns the
                      least privileges to the new participant.
                    default: true
                    example: true
                  isVerifierConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only verify specific types of valid credentials
                      (`true`) or not (`false`). When set to `false`, the
                      verifier can verify all valid credential types defined
                      within the ecosystem, even if it is added to a more
                      limited verifier policy. The default value is `true`, as
                      this assigns the least privileges to the new participant.
                    default: true
                    example: true
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
    delete:
      tags:
        - Participants
      summary: Delete participant
      description: |-
        Deletes a participant in the requested ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_PARTICIPANT_DELETE_START
        * ECOSYSTEM_PARTICIPANT_DELETE_SUCCESS
        * ECOSYSTEM_PARTICIPANT_DELETE_FAIL
      operationId: deleteEcosystemParticipant
      responses:
        '204':
          description: Participant deleted
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
  /v1/ecosystems/{ecosystemId}/credentials:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
    post:
      tags:
        - Credential types
      summary: Create credential type
      description: |-
        Creates a new credential type in the requested ecosystem.
        ### **Analytic events**
        * ECOSYSTEM_CREDENTIAL_CREATE_START
        * ECOSYSTEM_CREDENTIAL_CREATE_SUCCESS
        * ECOSYSTEM_CREDENTIAL_CREATE_FAIL
      operationId: createEcosystemCredential
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  required:
                    - id
                    - ecosystemId
                    - profile
                    - type
                    - name
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: 599bf148-d711-405a-a20b-9c8a87ac8850
                      description: Unique identifier for this credential type.
                      readOnly: true
                    ecosystemId:
                      type: string
                      format: uuid
                      description: The UUID of the ecosystem.
                      example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                      readOnly: true
                    profile:
                      type: string
                      enum:
                        - compact
                        - compact-semantic
                        - web-semantic
                    type:
                      type: string
                      example: DriverLicence
                    name:
                      type: string
                      description: The name of the credential
                      minLength: 1
                      maxLength: 50
                      example: Driver's Licence
                - type: object
                  required:
                    - id
                    - ecosystemId
                    - profile
                    - docType
                    - name
                  properties:
                    id:
                      type: string
                      format: uuid
                      readOnly: true
                      example: 49b6beb2-1006-4fb7-9284-7ec920475abe
                    ecosystemId:
                      type: string
                      format: uuid
                      description: The UUID of the ecosystem.
                      example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                      readOnly: true
                    profile:
                      type: string
                      example: mobile
                    docType:
                      type: string
                      example: org.iso.18013.5.1
                    name:
                      type: string
                      description: The name of the credential
                      minLength: 1
                      maxLength: 50
                      example: Driver's Licence
        required: true
      responses:
        '201':
          description: Credential type created
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - type
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 599bf148-d711-405a-a20b-9c8a87ac8850
                        description: Unique identifier for this credential type.
                        readOnly: true
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        enum:
                          - compact
                          - compact-semantic
                          - web-semantic
                      type:
                        type: string
                        example: DriverLicence
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - docType
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        readOnly: true
                        example: 49b6beb2-1006-4fb7-9284-7ec920475abe
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        example: mobile
                      docType:
                        type: string
                        example: org.iso.18013.5.1
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
    get:
      tags:
        - Credential types
      summary: Retrieve credential types
      description: |-
        Retrieves a list of credential types from the requested ecosystem.
        ### **Analytic events**
        * ECOSYSTEM_CREDENTIAL_RETRIEVE_LIST_START
        * ECOSYSTEM_CREDENTIAL_RETRIEVE_LIST_SUCCESS
        * ECOSYSTEM_CREDENTIAL_RETRIEVE_LIST_FAIL
      operationId: getEcosystemCredentials
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: Credential types retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      anyOf:
                        - type: object
                          required:
                            - id
                            - ecosystemId
                            - profile
                            - type
                            - name
                          properties:
                            id:
                              type: string
                              format: uuid
                              example: 599bf148-d711-405a-a20b-9c8a87ac8850
                              description: Unique identifier for this credential type.
                              readOnly: true
                            ecosystemId:
                              type: string
                              format: uuid
                              description: The UUID of the ecosystem.
                              example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                              readOnly: true
                            profile:
                              type: string
                              enum:
                                - compact
                                - compact-semantic
                                - web-semantic
                            type:
                              type: string
                              example: DriverLicence
                            name:
                              type: string
                              description: The name of the credential
                              minLength: 1
                              maxLength: 50
                              example: Driver's Licence
                        - type: object
                          required:
                            - id
                            - ecosystemId
                            - profile
                            - docType
                            - name
                          properties:
                            id:
                              type: string
                              format: uuid
                              readOnly: true
                              example: 49b6beb2-1006-4fb7-9284-7ec920475abe
                            ecosystemId:
                              type: string
                              format: uuid
                              description: The UUID of the ecosystem.
                              example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                              readOnly: true
                            profile:
                              type: string
                              example: mobile
                            docType:
                              type: string
                              example: org.iso.18013.5.1
                            name:
                              type: string
                              description: The name of the credential
                              minLength: 1
                              maxLength: 50
                              example: Driver's Licence
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
  /v1/ecosystems/{ecosystemId}/credentials/{credentialId}:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
      - in: path
        name: credentialId
        description: The UUID of the credential
        required: true
        schema:
          type: string
          format: uuid
          example: 599bf148-d711-405a-a20b-9c8a87ac8850
          description: Unique identifier for this credential type.
          readOnly: true
    get:
      tags:
        - Credential types
      summary: Retrieve credential type
      description: |-
        Retrieves a credential type from the requested ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_CREDENTIAL_RETRIEVE_START
        * ECOSYSTEM_CREDENTIAL_RETRIEVE_SUCCESS
        * ECOSYSTEM_CREDENTIAL_RETRIEVE_FAIL
      operationId: getEcosystemCredential
      responses:
        '200':
          description: Credential type retrieved
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - type
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 599bf148-d711-405a-a20b-9c8a87ac8850
                        description: Unique identifier for this credential type.
                        readOnly: true
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        enum:
                          - compact
                          - compact-semantic
                          - web-semantic
                      type:
                        type: string
                        example: DriverLicence
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - docType
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        readOnly: true
                        example: 49b6beb2-1006-4fb7-9284-7ec920475abe
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        example: mobile
                      docType:
                        type: string
                        example: org.iso.18013.5.1
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
    delete:
      tags:
        - Credential types
      summary: Delete credential type
      description: |-
        Deletes a credential type from the requested ecosystem by its ID.
        ### **Analytic events**
        * ECOSYSTEM_CREDENTIAL_DELETE_START
        * ECOSYSTEM_CREDENTIAL_DELETE_SUCCESS
        * ECOSYSTEM_CREDENTIAL_DELETE_FAIL
      operationId: deleteEcosystemCredential
      responses:
        '204':
          description: Credential type deleted
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
  /v1/ecosystems/{ecosystemId}/issuers:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
    get:
      tags:
        - Issuer Policies
      summary: Retrieve issuer policy
      description: Retrieves an ecosystem issuer policy by its ID.
      parameters:
        - in: header
          name: If-None-Match
          description: >-
            The If-None-Match parameter enables caching. Specify the ETag of the
            latest retrieved policy version, so that the policy is only
            retrieved if it had changed since.
          schema:
            type: string
        - in: header
          name: Accept-Encoding
          description: >-
            Use the Accept-Encoding header to specify the supported content
            encodings.
          schema:
            type: string
            enum:
              - gzip
              - deflate
      responses:
        '200':
          headers:
            ETag:
              description: >-
                An Entity Tag (ETag) is a unique identifier assigned to a
                specific version of a resource. It allows clients to check if a
                resource has been modified since it was last retrieved.
              schema:
                type: string
                format: byte
              example: MTcwMTIyMDgzNzMzOA==
          description: Ecosystem issuer policy retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  policyModifiedAt:
                    description: The timestamp when the ecosystem policy was last modified.
                    type: string
                    format: date-time
                    example: '2023-10-17T00:00:00Z'
                  credentials:
                    description: >-
                      A list of credentials associated with the ecosystem
                      policy.
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - ecosystemId
                        - profile
                        - type
                        - name
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 599bf148-d711-405a-a20b-9c8a87ac8850
                          description: Unique identifier for this credential type.
                          readOnly: true
                        ecosystemId:
                          type: string
                          format: uuid
                          description: The UUID of the ecosystem.
                          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                          readOnly: true
                        profile:
                          type: string
                          enum:
                            - compact
                            - compact-semantic
                            - web-semantic
                        type:
                          type: string
                          example: DriverLicence
                        name:
                          type: string
                          description: The name of the credential
                          minLength: 1
                          maxLength: 50
                          example: Driver's Licence
                  participants:
                    description: >-
                      A list of participants associated with the ecosystem
                      policy.
                    type: array
                    items:
                      allOf:
                        - required:
                            - id
                            - ecosystemId
                            - name
                            - identifiers
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: The UUID of the participant.
                              example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                              readOnly: true
                            ecosystemId:
                              type: string
                              format: uuid
                              description: The UUID of the ecosystem.
                              example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                              readOnly: true
                            name:
                              type: string
                              description: Name to easily identify the participant.
                              minLength: 1
                              maxLength: 50
                              example: My Participant
                            identifiers:
                              type: object
                              description: >-
                                Define the unique identifier that will be used
                                by this participant to issue and/or verify
                                credentials. Participants can have different
                                identifiers for different credential profiles.
                                Each participant must have at least one defined
                                credential profile, and for each credential
                                profile a participant can define exactly one
                                unique identifier.

                                - Credentials are only valid in the ecosystem if
                                they include an identifier of an issuer that is
                                a participant in the ecosystem.

                                - Verification requests are only valid in the
                                ecosystem if they include an identifier of a
                                verifier that is a participant in the ecosystem.

                                - For Mobile Credentials this must be the PEM of
                                a valid
                                [IACA](#operation/create-mobile-credential-iaca)
                                used by this participant to sign Mobile
                                Credentials, as defined in annex B of [ISO
                                18013-5](https://www.iso.org/standard/69084.html).
                                An exception to this aforementioned definition
                                is that IACAs with a `notBefore` date in the
                                future are considered valid.
                              additionalProperties:
                                type: object
                                properties:
                                  web-semantic:
                                    type: string
                                  compact-semantic:
                                    type: string
                                  compact:
                                    type: string
                                  mobile:
                                    type: array
                                    items:
                                      type: string
                              example:
                                web-semantic: did:web:example.com
                                compact-semantic: did:web:example.com
                                compact: did:web:example.com
                                mobile:
                                  - >-
                                    -----BEGIN
                                    CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                                    CERTIFICATE-----\r\n
                            isIssuer:
                              type: boolean
                              description: >-
                                Indicates whether the participant is an issuer
                                in the ecosystem (`true`) or not (`false`). When
                                set to `false`, the participant will not be able
                                to issue any valid credential types, even if it
                                is added to an issuer policy. The default value
                                is `false`, as this assigns the least privileges
                                to the new participant.
                              default: false
                              example: false
                            isVerifier:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is a
                                verifier in the ecosystem (`true`) or not
                                (`false`). When set to `false`, the participant
                                will not be able to verify any valid credential
                                types, even if it is added to a verifier policy.
                                The default value is `false`, as this assigns
                                the least privileges to the new participant.
                              default: false
                              example: false
                            isIssuerConstrained:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is
                                constrained to only issue specific types of
                                valid credentials (`true`) or not (`false`).
                                When set to `false`, the issuer can issue all
                                valid credential types defined within the
                                ecosystem, even if it is added to a more limited
                                issuer policy. The default value is `true`, as
                                this assigns the least privileges to the new
                                participant.
                              default: true
                              example: true
                            isVerifierConstrained:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is
                                constrained to only verify specific types of
                                valid credentials (`true`) or not (`false`).
                                When set to `false`, the verifier can verify all
                                valid credential types defined within the
                                ecosystem, even if it is added to a more limited
                                verifier policy. The default value is `true`, as
                                this assigns the least privileges to the new
                                participant.
                              default: true
                              example: true
                        - type: object
                          properties:
                            issuerAllowedCredentials:
                              description: >-
                                A list of credentials that can be validly issued
                                within the ecosystem.
                              type: array
                              items:
                                type: string
                                format: uuid
                              example:
                                - e0a07846-44e1-41a4-b704-1ccf6eb1a5af
                                - 25fa6ffc-bf6e-417c-865c-96fcf1d7d1a3
                            verifierAllowedCredentials:
                              description: >-
                                A list of credentials that can be validly
                                verified within the ecosystem.
                              type: array
                              items:
                                type: string
                                format: uuid
                              example:
                                - 4e25a240-76bb-4e9f-9f93-b93be287922b
                                - daca4a43-3ff9-4ecb-93fe-d9104e36bf74
                required:
                  - policyModifiedAt
                  - credentials
                  - participants
        '304':
          description: >-
            Not Modified. The resource has not been modified since the last
            request.
        '404':
          description: Not Found. The specified resource was not found.
  /v1/ecosystems/{ecosystemId}/participants/{participantId}/issuer/credentials:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
      - in: path
        name: participantId
        description: The UUID of the participant
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the participant.
          example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
          readOnly: true
    post:
      tags:
        - Issuer Policies
      summary: Create issuer policy
      description: >-
        Creates an issuer policy for the requested participant in the requested
        ecosystem.

        ### **Analytic events**

        * ECOSYSTEM_ISSUER_POLICY_CREATE_START

        * ECOSYSTEM_ISSUER_POLICY_CREATE_SUCCESS

        * ECOSYSTEM_ISSUER_POLICY_CREATE_FAIL
      operationId: createEcosystemIssuerPolicy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credentialId:
                  type: string
                  format: uuid
                  example: 599bf148-d711-405a-a20b-9c8a87ac8850
      responses:
        '201':
          description: Issuer policy created
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - type
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 599bf148-d711-405a-a20b-9c8a87ac8850
                        description: Unique identifier for this credential type.
                        readOnly: true
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        enum:
                          - compact
                          - compact-semantic
                          - web-semantic
                      type:
                        type: string
                        example: DriverLicence
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - docType
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        readOnly: true
                        example: 49b6beb2-1006-4fb7-9284-7ec920475abe
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        example: mobile
                      docType:
                        type: string
                        example: org.iso.18013.5.1
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
  /v1/ecosystems/{ecosystemId}/participants/{participantId}/issuer/credentials/{credentialId}:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
      - in: path
        name: participantId
        description: The UUID of the participant
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the participant.
          example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
          readOnly: true
      - in: path
        name: credentialId
        description: The UUID of the credential
        required: true
        schema:
          type: string
          format: uuid
          example: 599bf148-d711-405a-a20b-9c8a87ac8850
          description: Unique identifier for this credential type.
          readOnly: true
    delete:
      tags:
        - Issuer Policies
      summary: Delete issuer policy
      description: >-
        Deletes an issuer policy for the requested participant in the requested
        ecosystem by its ID.

        ### **Analytic events**

        * ECOSYSTEM_ISSUER_POLICY_DELETE_START

        * ECOSYSTEM_ISSUER_POLICY_DELETE_SUCCESS

        * ECOSYSTEM_ISSUER_POLICY_DELETE_FAIL
      operationId: deleteEcosystemIssuerPolicy
      responses:
        '204':
          description: Issuer policy deleted
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
  /v1/ecosystems/{ecosystemId}/verifiers:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
    get:
      tags:
        - Verifier Policies
      summary: Retrieve verifier policy
      description: Retrieves an ecosystem verifier policy by its ID.
      parameters:
        - in: header
          name: If-None-Match
          description: >-
            The If-None-Match parameter enables caching. Specify the ETag of the
            latest retrieved policy version, so that the policy is only
            retrieved if it had changed since.
          schema:
            type: string
        - in: header
          name: Accept-Encoding
          description: >-
            Use the Accept-Encoding header to specify the supported content
            encodings.
          schema:
            type: string
            enum:
              - gzip
              - deflate
      responses:
        '200':
          headers:
            ETag:
              description: >-
                An Entity Tag (ETag) is a unique identifier assigned to a
                specific version of a resource. It allows clients to check if a
                resource has been modified since it was last retrieved.
              schema:
                type: string
                format: byte
              example: MTcwMTIyMDgzNzMzOA==
          description: Ecosystem verifier policy retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  policyModifiedAt:
                    description: The timestamp when the ecosystem policy was last modified.
                    type: string
                    format: date-time
                    example: '2023-10-17T00:00:00Z'
                  credentials:
                    description: >-
                      A list of credentials associated with the ecosystem
                      policy.
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - ecosystemId
                        - profile
                        - type
                        - name
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 599bf148-d711-405a-a20b-9c8a87ac8850
                          description: Unique identifier for this credential type.
                          readOnly: true
                        ecosystemId:
                          type: string
                          format: uuid
                          description: The UUID of the ecosystem.
                          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                          readOnly: true
                        profile:
                          type: string
                          enum:
                            - compact
                            - compact-semantic
                            - web-semantic
                        type:
                          type: string
                          example: DriverLicence
                        name:
                          type: string
                          description: The name of the credential
                          minLength: 1
                          maxLength: 50
                          example: Driver's Licence
                  participants:
                    description: >-
                      A list of participants associated with the ecosystem
                      policy.
                    type: array
                    items:
                      allOf:
                        - required:
                            - id
                            - ecosystemId
                            - name
                            - identifiers
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: The UUID of the participant.
                              example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                              readOnly: true
                            ecosystemId:
                              type: string
                              format: uuid
                              description: The UUID of the ecosystem.
                              example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                              readOnly: true
                            name:
                              type: string
                              description: Name to easily identify the participant.
                              minLength: 1
                              maxLength: 50
                              example: My Participant
                            identifiers:
                              type: object
                              description: >-
                                Define the unique identifier that will be used
                                by this participant to issue and/or verify
                                credentials. Participants can have different
                                identifiers for different credential profiles.
                                Each participant must have at least one defined
                                credential profile, and for each credential
                                profile a participant can define exactly one
                                unique identifier.

                                - Credentials are only valid in the ecosystem if
                                they include an identifier of an issuer that is
                                a participant in the ecosystem.

                                - Verification requests are only valid in the
                                ecosystem if they include an identifier of a
                                verifier that is a participant in the ecosystem.

                                - For Mobile Credentials this must be the PEM of
                                a valid
                                [IACA](#operation/create-mobile-credential-iaca)
                                used by this participant to sign Mobile
                                Credentials, as defined in annex B of [ISO
                                18013-5](https://www.iso.org/standard/69084.html).
                                An exception to this aforementioned definition
                                is that IACAs with a `notBefore` date in the
                                future are considered valid.
                              additionalProperties:
                                type: object
                                properties:
                                  web-semantic:
                                    type: string
                                  compact-semantic:
                                    type: string
                                  compact:
                                    type: string
                                  mobile:
                                    type: array
                                    items:
                                      type: string
                              example:
                                web-semantic: did:web:example.com
                                compact-semantic: did:web:example.com
                                compact: did:web:example.com
                                mobile:
                                  - >-
                                    -----BEGIN
                                    CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                                    CERTIFICATE-----\r\n
                            isIssuer:
                              type: boolean
                              description: >-
                                Indicates whether the participant is an issuer
                                in the ecosystem (`true`) or not (`false`). When
                                set to `false`, the participant will not be able
                                to issue any valid credential types, even if it
                                is added to an issuer policy. The default value
                                is `false`, as this assigns the least privileges
                                to the new participant.
                              default: false
                              example: false
                            isVerifier:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is a
                                verifier in the ecosystem (`true`) or not
                                (`false`). When set to `false`, the participant
                                will not be able to verify any valid credential
                                types, even if it is added to a verifier policy.
                                The default value is `false`, as this assigns
                                the least privileges to the new participant.
                              default: false
                              example: false
                            isIssuerConstrained:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is
                                constrained to only issue specific types of
                                valid credentials (`true`) or not (`false`).
                                When set to `false`, the issuer can issue all
                                valid credential types defined within the
                                ecosystem, even if it is added to a more limited
                                issuer policy. The default value is `true`, as
                                this assigns the least privileges to the new
                                participant.
                              default: true
                              example: true
                            isVerifierConstrained:
                              type: boolean
                              description: >-
                                Indicates whether the created participant is
                                constrained to only verify specific types of
                                valid credentials (`true`) or not (`false`).
                                When set to `false`, the verifier can verify all
                                valid credential types defined within the
                                ecosystem, even if it is added to a more limited
                                verifier policy. The default value is `true`, as
                                this assigns the least privileges to the new
                                participant.
                              default: true
                              example: true
                        - type: object
                          properties:
                            issuerAllowedCredentials:
                              description: >-
                                A list of credentials that can be validly issued
                                within the ecosystem.
                              type: array
                              items:
                                type: string
                                format: uuid
                              example:
                                - e0a07846-44e1-41a4-b704-1ccf6eb1a5af
                                - 25fa6ffc-bf6e-417c-865c-96fcf1d7d1a3
                            verifierAllowedCredentials:
                              description: >-
                                A list of credentials that can be validly
                                verified within the ecosystem.
                              type: array
                              items:
                                type: string
                                format: uuid
                              example:
                                - 4e25a240-76bb-4e9f-9f93-b93be287922b
                                - daca4a43-3ff9-4ecb-93fe-d9104e36bf74
                required:
                  - policyModifiedAt
                  - credentials
                  - participants
        '304':
          description: >-
            Not Modified. The resource has not been modified since the last
            request.
        '404':
          description: Not Found. The specified resource was not found.
  /v1/ecosystems/{ecosystemId}/participants/{participantId}/verifier/credentials:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
      - in: path
        name: participantId
        description: The UUID of the participant
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the participant.
          example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
          readOnly: true
    post:
      tags:
        - Verifier Policies
      summary: Create verifier policy
      description: >-
        Creates a verifier policy for the requested participant in the requested
        ecosystem.

        ### **Analytic events**

        * ECOSYSTEM_VERIFIER_POLICY_CREATE_START

        * ECOSYSTEM_VERIFIER_POLICY_CREATE_SUCCESS

        * ECOSYSTEM_VERIFIER_POLICY_CREATE_FAIL
      operationId: createEcosystemVerifierPolicy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credentialId:
                  type: string
                  format: uuid
                  example: 599bf148-d711-405a-a20b-9c8a87ac8850
      responses:
        '201':
          description: Verifier policy created
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - type
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 599bf148-d711-405a-a20b-9c8a87ac8850
                        description: Unique identifier for this credential type.
                        readOnly: true
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        enum:
                          - compact
                          - compact-semantic
                          - web-semantic
                      type:
                        type: string
                        example: DriverLicence
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
                  - type: object
                    required:
                      - id
                      - ecosystemId
                      - profile
                      - docType
                      - name
                    properties:
                      id:
                        type: string
                        format: uuid
                        readOnly: true
                        example: 49b6beb2-1006-4fb7-9284-7ec920475abe
                      ecosystemId:
                        type: string
                        format: uuid
                        description: The UUID of the ecosystem.
                        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                        readOnly: true
                      profile:
                        type: string
                        example: mobile
                      docType:
                        type: string
                        example: org.iso.18013.5.1
                      name:
                        type: string
                        description: The name of the credential
                        minLength: 1
                        maxLength: 50
                        example: Driver's Licence
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
  /v1/ecosystems/{ecosystemId}/participants/{participantId}/verifier/credentials/{credentialId}:
    parameters:
      - in: path
        name: ecosystemId
        description: The UUID of the ecosystem
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
      - in: path
        name: participantId
        description: The UUID of the participant
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the participant.
          example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
          readOnly: true
      - in: path
        name: credentialId
        description: The UUID of the credential
        required: true
        schema:
          type: string
          format: uuid
          example: 599bf148-d711-405a-a20b-9c8a87ac8850
          description: Unique identifier for this credential type.
          readOnly: true
    delete:
      tags:
        - Verifier Policies
      summary: Delete verifier policy
      description: >-
        Deletes a verifier policy for the requested participant in the requested
        ecosystem by its ID.

        ### **Analytic events**

        * ECOSYSTEM_VERIFIER_POLICY_DELETE_START

        * ECOSYSTEM_VERIFIER_POLICY_DELETE_SUCCESS

        * ECOSYSTEM_VERIFIER_POLICY_DELETE_FAIL
      operationId: deleteEcosystemVerifierPolicy
      responses:
        '204':
          description: Verifier policy deleted
        '400':
          description: >-
            Bad Request. The request was malformed or missing required
            parameters.
          content:
            application/json:
              schema:
                title: ValidationError
                description: The request was malformed or missing required parameters.
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: Not Found. The specified resource was not found.
        '500':
          description: Internal Server Error. An unexpected error occurred.
  /v2/credentials/compact/sign:
    post:
      requestBody:
        description: Compact Credential payload to sign
        required: true
        content:
          application/json:
            schema:
              title: SignCompactCredentialRequest
              type: object
              required:
                - payload
              properties:
                payload:
                  title: CompactCredentialSignRequest
                  type: object
                  description: CompactCredentialSignRequest
                  required:
                    - iss
                  additionalProperties:
                    example: ...
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                  properties:
                    iss:
                      type: string
                      example: did:web:organization.com
                      description: >-
                        Use the DID that identifies the credential's issuer,
                        which attests the claims in the credential. This must be
                        a publicly available and resolvable `did:web` for the
                        credential to be valid and verifiable.
                    nbf:
                      type: number
                      example: 1645743759
                      description: >-
                        Not before. When set, credential verification will fail
                        if the current time is earlier than the `nbf` value,
                        expressed as a Unix timestamp.
                    exp:
                      type: number
                      example: 1646743759
                      description: >-
                        Expiry. When set, credential verification will fail if
                        the current time is later than the `exp` value,
                        expressed as a Unix timestamp.
                    iat:
                      type: number
                      example: 1645743759
                      description: >-
                        Issued at, indicates credential issuance timestamp,
                        expressed as a Unix timestamp.
                    aud:
                      type: string
                      description: Audience.
                    sub:
                      type: string
                      description: Subject.
                    type:
                      type: string
                revocable:
                  type: boolean
                  default: false
                  description: >-
                    When set to `true`, the created credential can later be
                    revoked. When set to `false`, the credential cannot be
                    revoked.
              description: Sign Compact Credential Request
      tags:
        - Compact Credentials Issuance
      summary: Sign a Compact Credential
      responses:
        '200':
          description: Compact Credential signed
          content:
            application/json:
              schema:
                title: SignCompactCredentialResponse
                type: object
                required:
                  - id
                  - encoded
                  - decoded
                properties:
                  id:
                    type: string
                  encoded:
                    type: string
                    description: URL Encoded Compact Credential payload
                    example: >-
                      CSC:/1/2KCE3IQEJB5DCMSLN5KWKZABE2QFQRVDAF4CIZDJMQ5HOZLCHIYDGOJUFUYTENJNGIZTOLJVGIWTCMJQFZXGO4TPNMXGS33ENZQW2ZLEJJXWQ3QH3BAFB3LISHKGQ2KBJ6Q35NXZFD6LGZ2YIAYHZAKCF7NKTIUZUTZQ3PWDBALAWVRG5XL2H4P4WFK25X3Y5X5RTN7NOZUST67KLCEFS3EPXQU5KM7VUGOPXJLQ6K5U676PMQNWRZCZ
                  decoded:
                    title: CompactCredentialSignResponse
                    type: object
                    description: CompactCredentialSignResponse
                    example:
                      iss: did:web:organization.com
                      nbf: 1645743759
                      exp: 1646743759
                      iat: 1645743759
                      jti: 6tVMmKodQNaLywW6NGA2aA
                      type: CredentialType
                      property1: ...
                      property2: ...
                    required:
                      - iss
                      - jti
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                    properties:
                      iss:
                        type: string
                      jti:
                        type: string
                      nbf:
                        type: number
                      exp:
                        type: number
                      iat:
                        type: number
                      aud:
                        type: string
                      sub:
                        type: string
                      type:
                        type: string
                      status:
                        type: object
                        properties:
                          url:
                            type: string
                          index:
                            type: number
                description: Sign Compact Credential response
        '400':
          description: Compact Credential signing failed
      operationId: sign-compact-credential
      description: >-
        Returns a signed Compact Credential generated from a provided valid
        payload.


        The payload can include any number of custom claims, as Compact
        Credentials do not comply with any specific standard or specification.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SIGN_START

        * CREDENTIAL_COMPACT_SIGN_SUCCESS

        * CREDENTIAL_COMPACT_SIGN_FAIL
  /v2/credentials/compact/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Credential ID
    delete:
      tags:
        - Compact Credentials Management
      summary: Delete Compact Credential metadata
      responses:
        '204':
          description: Credential metadata deleted
        '400':
          description: Invalid id parameter format
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Credential ID not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: removeCompactCredential
      description: >-
        Deletes all credential metadata from the tenant for a specific
        credential by providing its ID. If the credential was set to be
        revocable, it will be permanently revoked upon metadata deletion.


        Note that only metadata of revocable credentials or credentials issued
        via the OpenID4VCI flow is saved.


        > Deleted metadata cannot be recovered.
  /v2/credentials/compact/revocation-lists:
    get:
      tags:
        - Compact Credentials Management
      description: |-
        Returns a list of all Compact Credential revocation lists on the tenant.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_REVOCATION_LISTS_RETRIEVE_START
        * CREDENTIAL_COMPACT_REVOCATION_LISTS_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_REVOCATION_LISTS_RETRIEVE_FAIL
      summary: Retrieve all Compact Credential revocation lists
      operationId: compact-credential-revocation-list-discovery
      responses:
        '200':
          description: Revocation lists retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    nextCursor:
                      type: string
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: >-
                              Unique identifier for this Revocation List. You
                              will need it to retrieve this specific list.
                          issuer:
                            type: string
                            description: Issuer DID for this tenant.
                          url:
                            type: string
                            description: >-
                              This is the public URL where this revocation list
                              is available.
  /v2/credentials/compact/revocation-lists/{listId}:
    get:
      tags:
        - Compact Credentials Management
      description: |-
        Returns a Compact Credential revocation list by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_REVOCATION_RETRIEVE_START
        * CREDENTIAL_COMPACT_REVOCATION_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_REVOCATION_RETRIEVE_FAIL
      summary: Retrieve Compact Credential revocation list
      operationId: compact-credential-revocation-list
      responses:
        '200':
          description: Revocation list retrieved
          content:
            application/cwt:
              schema:
                type: string
                format: binary
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
        description: The unique identifier of the Revocation List you wish to retrieve.
  /v2/credentials/compact/{id}/revocation-status:
    post:
      requestBody:
        description: Update revocation status
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isRevoked
              properties:
                isRevoked:
                  type: boolean
                  description: >-
                    When set to `true` the credential will be revoked. When set
                    to `false`, the credential will be unrevoked.
      tags:
        - Compact Credentials Management
      summary: Update Compact Credential revocation status
      responses:
        '200':
          description: Revocation status updated
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - isRevoked
                properties:
                  id:
                    type: string
                    description: Unique credential identifier.
                  isRevoked:
                    type: boolean
                    description: >-
                      Indicates whether the credential has been revoked (`true`)
                      or not (`false`).
        '404':
          description: Id not found
      operationId: update-revocation-compact-credential
      description: |-
        Updates the credential status as revoked (invalid) or unrevoked (valid).

        ### **Analytic events**
        * CREDENTIAL_COMPACT_REVOCATION_SET_STATUS_START
        * CREDENTIAL_COMPACT_REVOCATION_SET_STATUS_SUCCESS
        * CREDENTIAL_COMPACT_REVOCATION_SET_STATUS_FAIL
    get:
      tags:
        - Compact Credentials Management
      summary: Retrieve Compact Credential revocation status
      responses:
        '200':
          description: Revocation status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRevoked:
                    type: boolean
                    description: >-
                      Indicates whether the credential has been revoked (`true`)
                      or not (`false`).
        '404':
          description: Id not found
      operationId: get-revocation-compact-credential
      description: >-
        Retrieve the revocation status of a Compact Credential by providing its
        ID.
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique credential identifier.
  /v2/credentials/compact/verify:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payload
              properties:
                payload:
                  type: string
                  description: >-
                    The Compact Credential to verify, represented as an encoded
                    string.
                  example: >-
                    CSC:/1/2KCE3IQEJB5DCMSLN5KWKZABE2QFQRVDAF4CIZDJMQ5HOZLCHIYDGOJUFUYTENJNGIZTOLJVGIWTCMJQFZXGO4TPNMXGS33ENZQW2ZLEJJXWQ3QH3BAFB3LISHKGQ2KBJ6Q35NXZFD6LGZ2YIAYHZAKCF7NKTIUZUTZQ3PWDBALAWVRG5XL2H4P4WFK25X3Y5X5RTN7NOZUST67KLCEFS3EPXQU5KM7VUGOPXJLQ6K5U676PMQNWRZCZ
                trustedIssuers:
                  type: array
                  description: >-
                    When you include issuers' DIDs in this array, credentials
                    will only be verified if their `iss` value matches one of
                    these DIDs. You can include multiple trusted issuers,
                    separated by commas.
                  items:
                    type: string
                    example: did:web:organization.com
                assertValidFrom:
                  type: boolean
                  description: >-
                    MATTR VII validates the credential's `nbf` (not before)
                    field by default, so that credentials that have a future
                    `nbf` date will not be verified. When this field is set to
                    `false`, credentials can be verified even when their `nbf`
                    date is in the future.
                  default: true
                assertValidUntil:
                  type: boolean
                  description: >-
                    MATTR VII validates the credential's `exp` (expiry) field by
                    default, so that expired credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when their `exp` date has passed.
                  default: true
                checkRevocation:
                  type: boolean
                  description: >-
                    MATTR VII checks the credential revocation status by
                    default, so that revoked credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when they had been revoked.
                  default: true
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "A PDF or an image:\n- File size can be 1MB or under. Larger files are rejected with a 413 error.\_\n- Only the first page of PDF documents is processed. \_\n- Image files must contain a QR code of sufficient quality and resolution. This depends on many factors such as the size of the QR relative to the image, and whether the image had been processed in any way.\n- For optimal performance, ensure that only a single QR code is present on the file.\_"
                trustedIssuers:
                  type: array
                  description: >-
                    When you include issuers' DIDs in this array, credentials
                    will only be verified if their `iss` value matches one of
                    these DIDs. You can include multiple trusted issuers,
                    separated by commas.
                  items:
                    type: string
                    example: did:web:example.com
                assertValidFrom:
                  type: boolean
                  description: >-
                    MATTR VII validates the credential's `nbf` (not before)
                    field by default, so that credentials that have a future
                    `nbf` date will not be verified. When this field is set to
                    `false`, credentials can be verified even when their `nbf`
                    date is in the future.
                  default: true
                assertValidUntil:
                  type: boolean
                  description: >-
                    MATTR VII validates the credential's `exp` (expiry) field by
                    default, so that expired credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when their `exp` date has passed.
                  default: true
                checkRevocation:
                  type: boolean
                  description: >-
                    MATTR VII checks the credential revocation status by
                    default, so that revoked credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when they had been revoked.
                  default: true
              required:
                - file
      tags:
        - Compact Credentials Verification
      summary: Verify a Compact Credential
      responses:
        '200':
          description: Verification completed
          content:
            application/json:
              schema:
                title: VerifyCompactCredentialResponse
                type: object
                description: VerifyCompactCredentialResponse
                properties:
                  verified:
                    type: boolean
                  decoded:
                    title: CompactCredentialSignResponse
                    type: object
                    description: CompactCredentialSignResponse
                    example:
                      iss: did:web:organization.com
                      nbf: 1645743759
                      exp: 1646743759
                      iat: 1645743759
                      jti: 6tVMmKodQNaLywW6NGA2aA
                      type: CredentialType
                      property1: ...
                      property2: ...
                    required:
                      - iss
                      - jti
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                    properties:
                      iss:
                        type: string
                      jti:
                        type: string
                      nbf:
                        type: number
                      exp:
                        type: number
                      iat:
                        type: number
                      aud:
                        type: string
                      sub:
                        type: string
                      type:
                        type: string
                      status:
                        type: object
                        properties:
                          url:
                            type: string
                          index:
                            type: number
                  error:
                    type: object
                    properties:
                      type:
                        type: string
                      message:
                        type: string
                      details:
                        type: object
                    required:
                      - type
                      - message
                required:
                  - verified
                  - decoded
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Payload invalid:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: ...
                        msg: >-
                          Payload must contain prefix, version and base32
                          payload
                        param: payload
                        location: body
        '413':
          description: Payload Too Large
        '415':
          description: Unsupported Media Type
      operationId: verify-compact-credential
      description: >-
        Verify a Compact Credential by providing the encoded payload and
        specifying verification options.


        You can provide a valid Compact Credential as either an encoded string
        or a QR code in a PDF document or an image file.


        Standard checks performed on all verification requests:

        - Conformance of the string and encoded data. All string representations
        of Compact Credentials must be prefixed with `CSC/1`.

        - Decoded payload structure is a valid Compact Credential.

        - Issuer DID can be used to resolve its `did.json` document.

        - Public key from issuer's `did.json` document validates the proof
        signature, confirming the credential has not been tampered with.


        Optional parameter checks:

        - Credential was issued by a trusted issuer.

        - Current time is after the beginning of the credential validity period.

        - Current time is not after the end of the credential validity period.

        - Credential has not been revoked.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_VERIFY_START

        * CREDENTIAL_COMPACT_VERIFY_SUCCESS

        * CREDENTIAL_COMPACT_VERIFY_FAIL
  /v2/credentials/compact/qrcode:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: GenerateQrCodeRequest
              type: object
              properties:
                payload:
                  type: string
                  description: String representation of the encoded Compact Credential.
                  example: >-
                    CSS:/1/2KCE3IQEJB5DCMSMGRKXI3IBE2QFSANKVACBUYQYB2HQKGTCDAHI6BQ2MIMA5DYBPAUWI2L...
                width:
                  type: number
                  description: >-
                    Optionally specify the desired width of the output QR code.
                    When no width is specified MATTR VII will generate a QR code
                    with an optimised width based on the size of the payload.
                    Maximal value is 1000px.
                  example: 250
              required:
                - payload
      tags:
        - Compact Credentials Issuance
      operationId: generateQrCodeCompactCredential
      summary: Format a Compact Credential as a QR code
      description: >-
        Returns a QR code representation of a Compact Credential from a provided
        encoded string representation of that credential.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_QRCODE_CREATE_START

        * CREDENTIAL_COMPACT_QRCODE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_QRCODE_CREATE_FAIL
      responses:
        '200':
          description: QR code generated
          content:
            image/png:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Payload is not string:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: '1'
                        msg: must be a string
                        param: payload
                        location: body
                The payload does not belong to compact credential profile:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: CSS:/1/BASE_32_ENCODED_PAYLOAD
                        msg: >-
                          The payload does not belong to compact credential
                          profile
                        param: payload
                        location: body
                The amount of data is too big to be stored in a QR Code:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: CSC:/1/BASE_32_ENCODED_PAYLOAD
                        msg: >-
                          The amount of data is too big to be stored in a QR
                          Code
                        param: payload
                        location: body
                The generated QR Code is larger than the provided width:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: '5'
                        msg: >-
                          The generated QR Code is larger than the provided
                          width
                        param: width
                        location: body
  /v2/credentials/compact/configurations:
    post:
      operationId: createCompactCredentialConfiguration
      tags:
        - Compact Credentials Configuration
      summary: Create a Compact Credential configuration
      description: >
        Creates a new Compact Credential configuration, a specific set of rules
        and parameters that are used to create and validate a particular type of
        verifiable credential. These rules and parameters define how the
        credential is structured and what data it contains when issued.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_CREATE_START

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_CREATE_FAIL
      requestBody:
        description: The Credential Configuration payload
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              allOf:
                - type: object
                  properties:
                    type:
                      description: >-
                        Used to differentiate between different Compact/Compact
                        Semantic credential configurations on your tenant. Thus,
                        its value must:

                        - Be unique across all Compact/Semantic compact
                        credential configurations on your tenant.

                        - Not be VerifiableCredential.
                      type: string
                      minLength: 1
                      maxLength: 1024
                      example: CourseCredential
                    claimMappings:
                      type: object
                      description: >
                        This is where you specify how to map claims (user
                        attributes) into issued credentials. Each field in the
                        object corresponds to a claim in the issued credential,
                        and contains one or more from the following attributes:

                        - `mapFrom`: References the path in the user object
                        where the claim is available.
                          - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                          - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                        - `defaultValue`: Indicates what value is used if
                        required is set to `false` (field is optional) and no
                        value is provided by the claims source. When
                        `defaultValue` is provided, `mapFrom` is optional.

                        - `required`: Indicates whether the claim is required
                        (default: `false`). When a required claim cannot be
                        retrieved and no `defaultValue` is available, credential
                        issuance will fail.

                        **Example source context object**

                        ```json

                        {
                          "claims": {
                            "given_name": "Jamie",
                            "family_name": "Doe",
                            "address": {
                              "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                            }
                          },
                          "authenticationProvider": {
                            "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                            "url": "https://accounts.google.com"
                          }
                        }

                        ```
                      example:
                        firstName:
                          mapFrom: claims.given_name
                          required: true
                        address:
                          mapFrom: claims.address.formatted
                        picture:
                          mapFrom: claims.picture
                          defaultValue: http://example.edu/img/placeholder.png
                        badge:
                          defaultValue: http://example.edu/img/badge.png
                        providerSubjectId:
                          mapFrom: authenticationProvider.subjectId
                      additionalProperties:
                        type: object
                        properties:
                          mapFrom:
                            type: string
                            description: >-
                              The path of the property in the source context
                              object.
                          required:
                            type: boolean
                            description: >-
                              Indicates whether value of the property must be
                              resolvable. If set to true and does not map to a
                              value, issuance will fail.
                          defaultValue:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                              - type: array
                              - type: object
                            description: >-
                              Default value to be used when unable to resolve
                              from the supplied context object. Required when
                              `mapFrom` is not defined.
                    revocable:
                      type: boolean
                      default: true
                      description: >-
                        When set to true (default), the created credential can
                        later be revoked. When set to false, the credential
                        cannot be revoked.
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of `years`, `months`,
                        `weeks`, `days`, `hours`, `minutes` and `seconds`.
                      properties:
                        years:
                          type: number
                          example: 1
                        months:
                          type: number
                          example: 12
                        weeks:
                          type: number
                          example: 52
                        days:
                          type: number
                          example: 365
                        hours:
                          type: number
                          example: 24
                        minutes:
                          type: number
                          example: 1440
                        seconds:
                          type: number
                          example: 3600
                  required:
                    - claimMappings
              title: CreateCredentialConfigurationRequest
      responses:
        '201':
          description: Compact Credential configuration created
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this credential configuration. Can
                          be used to create an offer based on this credential
                          configuration, or to retrieve, update or remove the
                          credential configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different
                          Compact/Compact Semantic credential configurations on
                          your tenant. Thus, its value must:

                          - Be unique across all Compact/Semantic compact
                          credential configurations on your tenant.

                          - Not be VerifiableCredential.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to true (default), the created credential can
                          later be revoked. When set to false, the credential
                          cannot be revoked.
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                            example: 1
                          months:
                            type: number
                            example: 12
                          weeks:
                            type: number
                            example: 52
                          days:
                            type: number
                            example: 365
                          hours:
                            type: number
                            example: 24
                          minutes:
                            type: number
                            example: 1440
                          seconds:
                            type: number
                            example: 3600
                    required:
                      - claimMappings
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
    get:
      operationId: getCompactCredentialConfigurations
      tags:
        - Compact Credentials Configuration
      summary: Retrieve all Compact Credential configurations
      description: >
        Returns a list of all Comapct Credential configurations from your
        tenant.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_START

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_SUCCESS

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of entries
        - schema:
            type: string
            example: AlumniCredential
          in: query
          name: type
          description: The optional credential type to filter on
      responses:
        '200':
          description: Compact Credential configurations retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      required:
                        - id
                        - type
                        - revocable
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: >-
                                Uniquely identifies this credential
                                configuration. Can be used to create an offer
                                based on this credential configuration, or to
                                retrieve, update or remove the credential
                                configuration.
                              example: 983c0a86-204f-4431-9371-f5a22e506599
                        - type: object
                          properties:
                            type:
                              description: >-
                                Used to differentiate between different
                                Compact/Compact Semantic credential
                                configurations on your tenant. Thus, its value
                                must:

                                - Be unique across all Compact/Semantic compact
                                credential configurations on your tenant.

                                - Not be VerifiableCredential.
                              type: string
                              minLength: 1
                              maxLength: 1024
                              example: CourseCredential
                            claimMappings:
                              type: object
                              description: >
                                This is where you specify how to map claims
                                (user attributes) into issued credentials. Each
                                field in the object corresponds to a claim in
                                the issued credential, and contains one or more
                                from the following attributes:

                                - `mapFrom`: References the path in the user
                                object where the claim is available.
                                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                                - `defaultValue`: Indicates what value is used
                                if required is set to `false` (field is
                                optional) and no value is provided by the claims
                                source. When `defaultValue` is provided,
                                `mapFrom` is optional.

                                - `required`: Indicates whether the claim is
                                required (default: `false`). When a required
                                claim cannot be retrieved and no `defaultValue`
                                is available, credential issuance will fail.

                                **Example source context object**

                                ```json

                                {
                                  "claims": {
                                    "given_name": "Jamie",
                                    "family_name": "Doe",
                                    "address": {
                                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                                    }
                                  },
                                  "authenticationProvider": {
                                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                                    "url": "https://accounts.google.com"
                                  }
                                }

                                ```
                              example:
                                firstName:
                                  mapFrom: claims.given_name
                                  required: true
                                address:
                                  mapFrom: claims.address.formatted
                                picture:
                                  mapFrom: claims.picture
                                  defaultValue: http://example.edu/img/placeholder.png
                                badge:
                                  defaultValue: http://example.edu/img/badge.png
                                providerSubjectId:
                                  mapFrom: authenticationProvider.subjectId
                              additionalProperties:
                                type: object
                                properties:
                                  mapFrom:
                                    type: string
                                    description: >-
                                      The path of the property in the source
                                      context object.
                                  required:
                                    type: boolean
                                    description: >-
                                      Indicates whether value of the property
                                      must be resolvable. If set to true and
                                      does not map to a value, issuance will
                                      fail.
                                  defaultValue:
                                    oneOf:
                                      - type: string
                                      - type: number
                                      - type: boolean
                                      - type: array
                                      - type: object
                                    description: >-
                                      Default value to be used when unable to
                                      resolve from the supplied context object.
                                      Required when `mapFrom` is not defined.
                            revocable:
                              type: boolean
                              default: true
                              description: >-
                                When set to true (default), the created
                                credential can later be revoked. When set to
                                false, the credential cannot be revoked.
                            claimSourceId:
                              type: string
                              format: uuid
                              description: >-
                                References the unique identifier of a claims
                                source that can be used to retrieve claims and
                                include them in the issued credential.
                            expiresIn:
                              type: object
                              description: >-
                                Used to determine when will issued credentials
                                expire. Can include any combination of `years`,
                                `months`, `weeks`, `days`, `hours`, `minutes`
                                and `seconds`.
                              properties:
                                years:
                                  type: number
                                  example: 1
                                months:
                                  type: number
                                  example: 12
                                weeks:
                                  type: number
                                  example: 52
                                days:
                                  type: number
                                  example: 365
                                hours:
                                  type: number
                                  example: 24
                                minutes:
                                  type: number
                                  example: 1440
                                seconds:
                                  type: number
                                  example: 3600
                          required:
                            - claimMappings
                      title: CredentialConfigurationResponse
                title: GetCredentialConfigurationsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Invalid value
                        param: cursor
                        value: abc
    parameters: []
  /v2/credentials/compact/configurations/{id}:
    parameters:
      - name: id
        in: path
        description: Unique identifier for the Compact Credential configuration.
        schema:
          type: string
          format: uuid
          example: 3948c40e-6e19-4ffc-933c-91f643f24264
        required: true
    get:
      operationId: getCompactCredentialConfiguration
      tags:
        - Compact Credentials Configuration
      summary: Retrieve a Compact Credential configuration
      description: |-
        Returns a Compact Credential Configuration by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_RETRIEVE_START
        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_RETRIEVE_FAIL
      responses:
        '200':
          description: Compact Credential configuration retrieved
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this credential configuration. Can
                          be used to create an offer based on this credential
                          configuration, or to retrieve, update or remove the
                          credential configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different
                          Compact/Compact Semantic credential configurations on
                          your tenant. Thus, its value must:

                          - Be unique across all Compact/Semantic compact
                          credential configurations on your tenant.

                          - Not be VerifiableCredential.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to true (default), the created credential can
                          later be revoked. When set to false, the credential
                          cannot be revoked.
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                            example: 1
                          months:
                            type: number
                            example: 12
                          weeks:
                            type: number
                            example: 52
                          days:
                            type: number
                            example: 365
                          hours:
                            type: number
                            example: 24
                          minutes:
                            type: number
                            example: 1440
                          seconds:
                            type: number
                            example: 3600
                    required:
                      - claimMappings
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: Compact Credential configuration not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    put:
      operationId: updateCompactCredentialConfiguration
      tags:
        - Compact Credentials Configuration
      summary: Update a Compact Credential configuration
      description: >
        Updates an existing Compact Credential configuration by providing its
        ID.
                
        ### **Analytic events**

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_UPDATE_START

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              allOf:
                - type: object
                  properties:
                    type:
                      description: >-
                        Used to differentiate between different Compact/Compact
                        Semantic credential configurations on your tenant. Thus,
                        its value must:

                        - Be unique across all Compact/Semantic compact
                        credential configurations on your tenant.

                        - Not be VerifiableCredential.
                      type: string
                      minLength: 1
                      maxLength: 1024
                      example: CourseCredential
                    claimMappings:
                      type: object
                      description: >
                        This is where you specify how to map claims (user
                        attributes) into issued credentials. Each field in the
                        object corresponds to a claim in the issued credential,
                        and contains one or more from the following attributes:

                        - `mapFrom`: References the path in the user object
                        where the claim is available.
                          - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                          - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                        - `defaultValue`: Indicates what value is used if
                        required is set to `false` (field is optional) and no
                        value is provided by the claims source. When
                        `defaultValue` is provided, `mapFrom` is optional.

                        - `required`: Indicates whether the claim is required
                        (default: `false`). When a required claim cannot be
                        retrieved and no `defaultValue` is available, credential
                        issuance will fail.

                        **Example source context object**

                        ```json

                        {
                          "claims": {
                            "given_name": "Jamie",
                            "family_name": "Doe",
                            "address": {
                              "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                            }
                          },
                          "authenticationProvider": {
                            "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                            "url": "https://accounts.google.com"
                          }
                        }

                        ```
                      example:
                        firstName:
                          mapFrom: claims.given_name
                          required: true
                        address:
                          mapFrom: claims.address.formatted
                        picture:
                          mapFrom: claims.picture
                          defaultValue: http://example.edu/img/placeholder.png
                        badge:
                          defaultValue: http://example.edu/img/badge.png
                        providerSubjectId:
                          mapFrom: authenticationProvider.subjectId
                      additionalProperties:
                        type: object
                        properties:
                          mapFrom:
                            type: string
                            description: >-
                              The path of the property in the source context
                              object.
                          required:
                            type: boolean
                            description: >-
                              Indicates whether value of the property must be
                              resolvable. If set to true and does not map to a
                              value, issuance will fail.
                          defaultValue:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                              - type: array
                              - type: object
                            description: >-
                              Default value to be used when unable to resolve
                              from the supplied context object. Required when
                              `mapFrom` is not defined.
                    revocable:
                      type: boolean
                      default: true
                      description: >-
                        When set to true (default), the created credential can
                        later be revoked. When set to false, the credential
                        cannot be revoked.
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of `years`, `months`,
                        `weeks`, `days`, `hours`, `minutes` and `seconds`.
                      properties:
                        years:
                          type: number
                          example: 1
                        months:
                          type: number
                          example: 12
                        weeks:
                          type: number
                          example: 52
                        days:
                          type: number
                          example: 365
                        hours:
                          type: number
                          example: 24
                        minutes:
                          type: number
                          example: 1440
                        seconds:
                          type: number
                          example: 3600
                  required:
                    - claimMappings
              title: CreateCredentialConfigurationRequest
        description: Update a Compact Credential configuration
      responses:
        '200':
          description: Compact Credential configuration updated
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this credential configuration. Can
                          be used to create an offer based on this credential
                          configuration, or to retrieve, update or remove the
                          credential configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different
                          Compact/Compact Semantic credential configurations on
                          your tenant. Thus, its value must:

                          - Be unique across all Compact/Semantic compact
                          credential configurations on your tenant.

                          - Not be VerifiableCredential.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to true (default), the created credential can
                          later be revoked. When set to false, the credential
                          cannot be revoked.
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                            example: 1
                          months:
                            type: number
                            example: 12
                          weeks:
                            type: number
                            example: 52
                          days:
                            type: number
                            example: 365
                          hours:
                            type: number
                            example: 24
                          minutes:
                            type: number
                            example: 1440
                          seconds:
                            type: number
                            example: 3600
                    required:
                      - claimMappings
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: must be a string
                        param: type
        '404':
          description: Compact Credential configuration not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    delete:
      operationId: deleteCompactCredentialConfiguration
      tags:
        - Compact Credentials Configuration
      summary: Delete a Compact Credential configuration
      description: |
        Deletes an exising Compact Credential configuration by providing its ID.
         
        ### **Analytic events**
        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_DELETE_START
        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_DELETE_SUCCESS
        * CREDENTIAL_COMPACT_CREDENTIAL_CONFIGURATION_DELETE_FAIL
      responses:
        '204':
          description: Compact Credential configuration deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: The Credential Configuration is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
  /v2/credentials/compact-semantic/sign:
    post:
      requestBody:
        description: Compact Semantic Credential payload to sign
        required: true
        content:
          application/json:
            schema:
              title: SignCompactSemanticCredentialRequest
              type: object
              required:
                - payload
              properties:
                payload:
                  title: CompactSemanticCredentialSignRequest
                  type: object
                  description: CompactSemanticCredentialSignRequest
                  required:
                    - iss
                    - vc
                  properties:
                    iss:
                      type: string
                      example: did:web:organization.com
                      description: >-
                        Use the DID that identifies the credential's issuer,
                        which attests the claims in the credential. This must be
                        a publicly available and resolvable `did:web` for the
                        credential to be valid and verifiable.
                    nbf:
                      type: number
                      example: 1645743759
                      description: >-
                        Not before. Credential verification will fail if the
                        current time is earlier than the `nbf` value, expressed
                        as a Unix timestamp. `nbf` is required by the W3C VC
                        data model. If not provided in the request, current time
                        at issuance is used.
                    exp:
                      type: number
                      example: 1645743759
                      description: >-
                        Expiry. When set, credential verification will fail if
                        the current time is later than the `exp` value,
                        expressed as a Unix timestamp.
                    iat:
                      type: number
                      example: 1645743759
                      description: >-
                        Issued at, indicates credential issuance timestamp,
                        expressed as a Unix timestamp.
                    aud:
                      type: string
                      example: ...
                      description: Audience.
                    sub:
                      type: string
                      example: ...
                      description: >-
                        Subject identifier. As Compact Semantic Credentials are
                        _bearer credentials_, including a subject identifier is
                        not required.
                    vc:
                      type: object
                      description: >-
                        Represents a W3C Verifiable Credential data model
                        credential.
                      required:
                        - credentialSubject
                        - type
                      properties:
                        '@context':
                          type: string
                          example: https://www.w3.org/2018/credentials/examples/v1
                          description: Must be a publicly available and resolvable schema.
                        type:
                          type: string
                          example: AlumniCredential
                          description: Must be a single credential type.
                        credentialSubject:
                          type: object
                          description: >-
                            Contains all the claims attested in the credential.
                            Must comply with the referenced context schema.
                          additionalProperties:
                            example: ...
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                revocable:
                  type: boolean
                  default: false
                  description: >-
                    When set to `true`, the created credential can later be
                    revoked. When set to `false`, the credential cannot be
                    revoked.
              description: Sign Compact Semantic Credential Request
      tags:
        - Compact Semantic Credentials Issuance
      summary: Sign a Compact Semantic Credential
      responses:
        '200':
          description: Compact Semantic Credential signed
          content:
            application/json:
              schema:
                title: SignCompactSemanticCredentialResponse
                type: object
                required:
                  - id
                  - encoded
                  - decoded
                properties:
                  id:
                    type: string
                    description: Unique credential identifier.
                  encoded:
                    type: string
                    description: >-
                      The base32 encoded string representation of the Compact
                      Semantic Credential. CSC stands for COSE_SIGN Compact
                      profile. You will use this element to convert the
                      credential into a format that can be shared with a holder.
                    example: CSS:/1/BASE_32_ENCODED_PAYLOAD
                  decoded:
                    title: CompactSemanticCredentialSignResponse
                    type: object
                    description: CompactSemanticCredentialSignResponse
                    required:
                      - iss
                      - nbf
                      - jti
                      - vc
                    properties:
                      iss:
                        type: string
                        example: did:web:example.com
                        description: >-
                          This DID identifies the credential's issuer, which
                          attests the claims in the credential. Must be a
                          publicly available and resolvable `did:web` for the
                          credential to be valid and verifiable.
                      jti:
                        type: string
                        example: ...
                        description: >-
                          This JWT ID identifies this credential and is
                          identical to the `id` element. When `revocable` is set
                          to `true`, this value is persisted on the tenant to
                          enable revoking this specific credential.
                      nbf:
                        type: number
                        example: 1645743759
                        description: >-
                          Not before. Credential verification will fail if the
                          current time is earlier than the `nbf` value,
                          expressed as a Unix timestamp.
                      exp:
                        type: number
                        example: 1645743759
                        description: >-
                          Expiry. When set, credential verification will fail if
                          the current time is later than the `exp` value,
                          expressed as a Unix timestamp.
                      iat:
                        type: number
                        example: 1645743759
                        description: >-
                          Issued at, indicates credential issuance timestamp,
                          expressed as a Unix timestamp.
                      aud:
                        type: string
                        example: ...
                        description: Audience.
                      sub:
                        type: string
                        example: ...
                        description: >-
                          Subject identifier. As Compact Semantic Credentials
                          are _bearer credentials_, including a subject
                          identifier is not required.
                      vc:
                        type: object
                        description: >-
                          Represents a W3C Verifiable Credential data model
                          credential.
                        required:
                          - '@context'
                          - type
                          - credentialSubject
                        properties:
                          '@context':
                            type: array
                            description: >-
                              Must be a publicly available and resolvable
                              schema.
                            items:
                              type: string
                            example:
                              - https://www.w3.org/2018/credentials/v1
                              - https://www.w3.org/2018/credentials/examples/v1
                          type:
                            type: array
                            description: Must be a single credential type.
                            items:
                              type: string
                            example:
                              - VerifiableCredential
                              - AlumniCredential
                          credentialSubject:
                            type: object
                            description: >-
                              Contains all the claims attested in the
                              credential. Must comply with the referenced
                              context schema.
                            additionalProperties:
                              example: ...
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                      status:
                        type: object
                        description: >-
                          If `revocable` was set to `true` in the request, this
                          object is used to provide information required for
                          revocation.
                        properties:
                          url:
                            type: string
                            example: ...
                            description: >-
                              Every revocable credential will reference a
                              Revocation List that is automatically created and
                              held on the issuer's tenant. This list can be used
                              by external verifiers to validate the credential
                              status. This property references the Revocation
                              List which holds the revocation status for this
                              specific credential.
                          index:
                            type: number
                            example: 123
                            description: >-
                              This indicates the index of this specific
                              credential within the revocation list.
                description: Sign Compact Semantic Credential response
        '400':
          description: Failed to sign Compact Semantic Credential, invalid payload, etc
      operationId: signCompactSemanticcredential
      description: >-
        Returns a signed Compact Semantic Credential generated from a provided
        valid payload.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_SIGN_START

        * CREDENTIAL_COMPACT_SEMANTIC_SIGN_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_SIGN_FAIL
  /v2/credentials/compact-semantic/verify:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payload
              properties:
                payload:
                  type: string
                  description: >-
                    The Compact Semantic Credential to verify, represented as an
                    encoded string.
                  example: >-
                    CSS:/1/2KCE3IQEJB5DCMSLN5KWKZABE2QFRMFEAF4CIZDJMQ5HOZLCHIYDGOJUFUYTENJNGIZTOLJVGIWTCMJQFZXGO4TPNMXGS33COZR2G2CAMNXW45DFPB2IC6BGNB2HI4DTHIXS653XO4XHOMZON5ZGOLZSGAYTQL3DOJSWIZLOORUWC3DTF53DCZDUPFYGLALUKZSXE2LGNFQWE3DFINZGKZDFNZ2GSYLMOFRXEZLEMVXHI2LBNRJXKYTKMVRXJILENZQW2ZLEJJXWQ3QH3BAFAW2MIRFQDICFCSNL5EIX4IISCEIFDJRFHCRRLBALWFYDLUVEKXHERNWHUDGJI3DDNNXSFWIRHUASBHGB2I7UHGPZMJEB3SMOFMBL3PABL5HUFSQLLGNE7YRKSAM3OAQN7F4LG365HL67BU
                trustedIssuers:
                  type: array
                  description: >-
                    When you include issuers' DIDs in this array, credentials
                    will only be verified if their `iss` value matches one of
                    these DIDs. You can include multiple trusted issuers,
                    separated by commas.
                  items:
                    type: string
                    example: did:web:example.com
                assertValidFrom:
                  description: >-
                    MATTR VII validates the credential's `nbf` (not before)
                    field by default, so that credentials that have a future
                    `nbf` date will not be verified. When this field is set to
                    `false`, credentials can be verified even when their `nbf`
                    date is in the future.
                  type: boolean
                  default: true
                assertValidUntil:
                  description: >-
                    MATTR VII validates the credential's `exp` (expiry) field by
                    default, so that expired credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when their `exp` date has passed.
                  type: boolean
                  default: true
                checkRevocation:
                  description: >-
                    MATTR VII checks the credential revocation status by
                    default, so that revoked credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when they had been revoked.
                  type: boolean
                  default: true
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "A PDF or an image\n- File size can be 1MB or under. Larger files are rejected with a 413 error.\_\n- Only the first page of PDF documents is processed. \_\n- Image files must contain a QR code of sufficient quality and resolution. This depends on many factors such as the size of the QR relative to the image, and whether the image had been processed in any way.\n- For optimal performance, ensure that only a single QR code is present on the file.\_"
                trustedIssuers:
                  type: array
                  description: >-
                    When you include issuers' DIDs in this array, credentials
                    will only be verified if their `iss` value matches one of
                    these DIDs. You can include multiple trusted issuers,
                    separated by commas.
                  items:
                    type: string
                    example: did:web:example.com
                assertValidFrom:
                  description: >-
                    MATTR VII validates the credential's `nbf` (not before)
                    field by default, so that credentials that have a future
                    `nbf` date will not be verified. When this field is set to
                    `false`, credentials can be verified even when their `nbf`
                    date is in the future.
                  type: boolean
                  default: true
                assertValidUntil:
                  description: >-
                    MATTR VII validates the credential's `exp` (expiry) field by
                    default, so that expired credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when their `exp` date has passed.
                  type: boolean
                  default: true
                checkRevocation:
                  description: >-
                    MATTR VII checks the credential revocation status by
                    default, so that revoked credentials will not be verified.
                    When this field is set to `false`, credentials can be
                    verified even when they had been revoked.
                  type: boolean
                  default: true
              required:
                - file
      tags:
        - Compact Semantic Credentials Verification
      summary: Verify a Compact Semantic Credential
      responses:
        '200':
          description: Verification completed
          content:
            application/json:
              schema:
                title: VerifyCompactSemanticCredentialResponse
                type: object
                description: VerifyCompactSemanticCredentialResponse
                required:
                  - verified
                properties:
                  verified:
                    type: boolean
                  decoded:
                    title: CompactSemanticCredentialSignResponse
                    type: object
                    description: CompactSemanticCredentialSignResponse
                    required:
                      - iss
                      - nbf
                      - jti
                      - vc
                    properties:
                      iss:
                        type: string
                        example: did:web:example.com
                        description: >-
                          This DID identifies the credential's issuer, which
                          attests the claims in the credential. Must be a
                          publicly available and resolvable `did:web` for the
                          credential to be valid and verifiable.
                      jti:
                        type: string
                        example: ...
                        description: >-
                          This JWT ID identifies this credential and is
                          identical to the `id` element. When `revocable` is set
                          to `true`, this value is persisted on the tenant to
                          enable revoking this specific credential.
                      nbf:
                        type: number
                        example: 1645743759
                        description: >-
                          Not before. Credential verification will fail if the
                          current time is earlier than the `nbf` value,
                          expressed as a Unix timestamp.
                      exp:
                        type: number
                        example: 1645743759
                        description: >-
                          Expiry. When set, credential verification will fail if
                          the current time is later than the `exp` value,
                          expressed as a Unix timestamp.
                      iat:
                        type: number
                        example: 1645743759
                        description: >-
                          Issued at, indicates credential issuance timestamp,
                          expressed as a Unix timestamp.
                      aud:
                        type: string
                        example: ...
                        description: Audience.
                      sub:
                        type: string
                        example: ...
                        description: >-
                          Subject identifier. As Compact Semantic Credentials
                          are _bearer credentials_, including a subject
                          identifier is not required.
                      vc:
                        type: object
                        description: >-
                          Represents a W3C Verifiable Credential data model
                          credential.
                        required:
                          - '@context'
                          - type
                          - credentialSubject
                        properties:
                          '@context':
                            type: array
                            description: >-
                              Must be a publicly available and resolvable
                              schema.
                            items:
                              type: string
                            example:
                              - https://www.w3.org/2018/credentials/v1
                              - https://www.w3.org/2018/credentials/examples/v1
                          type:
                            type: array
                            description: Must be a single credential type.
                            items:
                              type: string
                            example:
                              - VerifiableCredential
                              - AlumniCredential
                          credentialSubject:
                            type: object
                            description: >-
                              Contains all the claims attested in the
                              credential. Must comply with the referenced
                              context schema.
                            additionalProperties:
                              example: ...
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                      status:
                        type: object
                        description: >-
                          If `revocable` was set to `true` in the request, this
                          object is used to provide information required for
                          revocation.
                        properties:
                          url:
                            type: string
                            example: ...
                            description: >-
                              Every revocable credential will reference a
                              Revocation List that is automatically created and
                              held on the issuer's tenant. This list can be used
                              by external verifiers to validate the credential
                              status. This property references the Revocation
                              List which holds the revocation status for this
                              specific credential.
                          index:
                            type: number
                            example: 123
                            description: >-
                              This indicates the index of this specific
                              credential within the revocation list.
                  error:
                    type: object
                    properties:
                      type:
                        type: string
                      message:
                        type: string
                      details:
                        type: object
                    required:
                      - type
                      - message
              examples:
                Issuer not trusted:
                  value:
                    verified: false
                    reason:
                      - type: IssuerNotTrusted
                        msg: ...
                    decoded:
                      jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
                      iss: did:web:xxx
                      nbf: 1649037604
                      vc:
                        '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - https://example.com/credentials/pass
                        type:
                          - VerifiableCredential
                          - PublicCovidPass
                        credentialSubject:
                          givenName: Jack
                          familyName: Sparrow
                          dob: '1979-04-14'
                Issuer public key invalid:
                  value:
                    verified: false
                    reason:
                      - type: IssuerPublicKeyInvalid
                        msg: ...
                    decoded:
                      jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
                      iss: did:web:xxx
                      nbf: 1649037604
                      vc:
                        '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - https://example.com/credentials/pass
                        type:
                          - VerifiableCredential
                          - PublicCovidPass
                        credentialSubject:
                          givenName: Jack
                          familyName: Sparrow
                          dob: '1979-04-14'
                Signature invalid:
                  value:
                    verified: false
                    reason:
                      - type: SignatureInvalid
                        msg: ...
                    decoded:
                      jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
                      iss: did:web:xxx
                      nbf: 1649037604
                      vc:
                        '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - https://example.com/credentials/pass
                        type:
                          - VerifiableCredential
                          - PublicCovidPass
                        credentialSubject:
                          givenName: Jack
                          familyName: Sparrow
                          dob: '1979-04-14'
                Expired:
                  value:
                    verified: false
                    reason:
                      - type: Expired
                        msg: ...
                    decoded:
                      jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
                      iss: did:web:xxx
                      nbf: 1649037604
                      vc:
                        '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - https://example.com/credentials/pass
                        type:
                          - VerifiableCredential
                          - PublicCovidPass
                        credentialSubject:
                          givenName: Jack
                          familyName: Sparrow
                          dob: '1979-04-14'
                NotActive:
                  value:
                    verified: false
                    reason:
                      - type: NotActive
                        msg: ...
                    decoded:
                      jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
                      iss: did:web:xxx
                      nbf: 1649037604
                      vc:
                        '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - https://example.com/credentials/pass
                        type:
                          - VerifiableCredential
                          - PublicCovidPass
                        credentialSubject:
                          givenName: Jack
                          familyName: Sparrow
                          dob: '1979-04-14'
                Revoked:
                  value:
                    verified: false
                    reason:
                      - type: Revoked
                        msg: ...
                    decoded:
                      jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
                      iss: did:web:xxx
                      nbf: 1649037604
                      vc:
                        '@context':
                          - https://www.w3.org/2018/credentials/v1
                          - https://example.com/credentials/pass
                        type:
                          - VerifiableCredential
                          - PublicCovidPass
                        credentialSubject:
                          givenName: Jack
                          familyName: Sparrow
                          dob: '1979-04-14'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Payload invalid:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: ...
                        msg: >-
                          Payload must contain prefix, version and base32
                          payload
                        param: payload
                        location: body
        '413':
          description: Payload Too Large
        '415':
          description: Unsupported Media Type
      operationId: verifyCompactSemantiCredential
      description: >-
        Verify a Compact Semantic Credential by providing the encoded payload
        and specifying verification options.


        You can provide a valid Compact Semantic Credential as either an encoded
        string or a QR code in a PDF document or an image file.


        Standard checks performed on all verification requests:

        - Conformance of the string and encoded data. All string representations
        of Compact Credentials must be prefixed with `CSC/1`.

        - Decoded payload CWT structure and attributes can be validated.

        - Remote context schema can be resolved and validate claims can be
        dereferenced.

        - Issuer DID can be used to resolve its `did.json` document.

        - Public key from issuer's `did.json` document validates the proof
        signature, confirming the credential has not been tampered with.


        Optional parameter checks:

        - Credential was issued by a trusted issuer.

        - Current time is after the beginning of the credential validity period.

        - Current time is not after the end of the credential validity period.

        - Credential has not been revoked.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_VERIFY_START

        * CREDENTIAL_COMPACT_SEMANTIC_VERIFY_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_VERIFY_FAIL
  /v2/credentials/compact-semantic/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Credential ID
    delete:
      tags:
        - Compact Semantic Credentials Management
      summary: Delete Compact Semantic Credential metadata
      responses:
        '204':
          description: Credential metadata deleted
        '400':
          description: Invalid id parameter format
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Credential ID not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: removeCompactSemanticCredential
      description: >-
        Deletes all credential metadata from the tenant for a specific
        credential by providing its ID. If the credential was set to be
        revocable, it will be permanently revoked upon metadata deletion.


        Note that only metadata of revocable credentials or credentials issued
        via the OpenID4VCI flow is saved.


        > Deleted metadata cannot be recovered.
  /v2/credentials/compact-semantic/revocation-lists:
    get:
      tags:
        - Compact Semantic Credentials Management
      description: >-
        Returns a list of all Compact Semantic Credential revocation lists on
        the tenant.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_LISTS_RETRIEVE_START

        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_LISTS_RETRIEVE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_LISTS_RETRIEVE_FAIL
      summary: Retrieve all Compact Semantic Credential revocation lists
      operationId: compact-credential-semantic-revocation-list-discovery
      responses:
        '200':
          description: Revocation lists retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    nextCursor:
                      type: string
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: >-
                              Unique identifier for this Revocation List. You
                              will need it to retrieve this specific list.
                          issuer:
                            type: string
                            description: Issuer DID for this tenant.
                          url:
                            type: string
                            description: >-
                              This is the public URL where this revocation list
                              is available.
  /v2/credentials/compact-semantic/revocation-lists/{listId}:
    get:
      tags:
        - Compact Semantic Credentials Management
      description: >-
        Returns a Compact Semantic Credential revocation list by providing its
        ID.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_RETRIEVE_START

        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_RETRIEVE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_RETRIEVE_FAIL
      summary: Retrieve Compact Semantic Credential revocation list
      operationId: compact-credential-semantic-revocation-list
      responses:
        '200':
          description: Revocation list retrieved
          content:
            application/cwt:
              schema:
                type: string
                format: binary
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
        description: The unique identifier of the revocation list you wish to retrieve.
  /v2/credentials/compact-semantic/{id}/revocation-status:
    post:
      requestBody:
        description: Update revocation status
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isRevoked
              properties:
                isRevoked:
                  type: boolean
                  description: >-
                    When set to `true` the credential will be revoked. When set
                    to `false`, the credential will be unrevoked.
      tags:
        - Compact Semantic Credentials Management
      summary: Update Compact Semantic Credential revocation status
      responses:
        '200':
          description: Revocation status updated
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - isRevoked
                properties:
                  id:
                    type: string
                    description: Unique credential identifier.
                  isRevoked:
                    type: boolean
                    description: >-
                      Indicates whether the credential has been revoked (`true`)
                      or not (`false`).
        '404':
          description: Id not found
      operationId: update-revocation-compact-credential-semantic
      description: |-
        Updates the credential status as revoked (invalid) or unrevoked (valid).

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_SET_STATUS_START
        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_SET_STATUS_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_REVOCATION_SET_STATUS_FAIL
    get:
      tags:
        - Compact Semantic Credentials Management
      summary: Retrieve Compact Semantic Credential revocation status
      responses:
        '200':
          description: Revocation status retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - isRevoked
                properties:
                  isRevoked:
                    type: boolean
                    description: >-
                      Indicates whether the credential has been revoked (`true`)
                      or not (`false`).
        '404':
          description: Id not found
      operationId: get-revocation-compact-credential-semantic
      description: >-
        Retrieve the revocation status of a Compact Semantic Credential by
        providing its ID.
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique credential identifier (`jti`)
  /v2/credentials/compact-semantic/qrcode:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: GenerateQrCodeRequest
              type: object
              properties:
                payload:
                  type: string
                  description: String representation of the encoded Compact Credential.
                  example: >-
                    CSS:/1/2KCE3IQEJB5DCMSMGRKXI3IBE2QFSANKVACBUYQYB2HQKGTCDAHI6BQ2MIMA5DYBPAUWI2L...
                width:
                  type: number
                  description: >-
                    Optionally specify the desired width of the output QR code.
                    When no width is specified MATTR VII will generate a QR code
                    with an optimised width based on the size of the payload.
                    Maximal value is 1000px.
                  example: 250
              required:
                - payload
      tags:
        - Compact Semantic Credentials Issuance
      operationId: generateQrCodeCompactSemantiCredentia
      summary: Format a Compact Semantic Credential as a QR code
      description: >-
        Returns a QR code representation of a Compact Semantic Credential from a
        provided encoded string representation of that credential.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_QRCODE_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_QRCODE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_QRCODE_CREATE_FAIL
      responses:
        '200':
          description: QR code generated
          content:
            image/png:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Payload is not string:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: '1'
                        msg: must be a string
                        param: payload
                        location: body
                The payload does not belong to compact semantic credential profile:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: CSC:/1/BASE_32_ENCODED_PAYLOAD
                        msg: >-
                          The payload does not belong to compact semantic
                          credential profile
                        param: payload
                        location: body
                The amount of data is too big to be stored in a QR Code:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: CSC:/1/BASE_32_ENCODED_PAYLOAD
                        msg: >-
                          The amount of data is too big to be stored in a QR
                          Code
                        param: payload
                        location: body
                The generated QR Code is larger than the provided width:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: '5'
                        msg: >-
                          The generated QR Code is larger than the provided
                          width
                        param: width
                        location: body
    parameters: []
  /v2/credentials/compact-semantic/configurations:
    post:
      operationId: createCompactSemanticCredentialConfiguration
      tags:
        - Compact Semantic Credentials Configuration
      summary: Create a Compact Semantic Credential Configuration
      description: >
        Creates a new Compact Semantic Credential configuration, a specific set
        of rules and parameters that are used to create and validate a
        particular type of verifiable credential. These rules and parameters
        define how the credential is structured and what data it contains when
        issued.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_CREATE_FAIL
      requestBody:
        description: The Credential Configuration payload
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              allOf:
                - type: object
                  properties:
                    type:
                      description: >-
                        Used to differentiate between different Compact/Compact
                        Semantic credential configurations on your tenant. Thus,
                        its value must:

                        - Be unique across all Compact/Semantic compact
                        credential configurations on your tenant.

                        - Not be VerifiableCredential.          type: string
                      minLength: 1
                      maxLength: 1024
                      example: CourseCredential
                    claimMappings:
                      type: object
                      description: >
                        This is where you specify how to map claims (user
                        attributes) into issued credentials. Each field in the
                        object corresponds to a claim in the issued credential,
                        and contains one or more from the following attributes:

                        - `mapFrom`: References the path in the user object
                        where the claim is available.
                          - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                          - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                        - `defaultValue`: Indicates what value is used if
                        required is set to `false` (field is optional) and no
                        value is provided by the claims source. When
                        `defaultValue` is provided, `mapFrom` is optional.

                        - `required`: Indicates whether the claim is required
                        (default: `false`). When a required claim cannot be
                        retrieved and no `defaultValue` is available, credential
                        issuance will fail.

                        **Example source context object**

                        ```json

                        {
                          "claims": {
                            "given_name": "Jamie",
                            "family_name": "Doe",
                            "address": {
                              "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                            }
                          },
                          "authenticationProvider": {
                            "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                            "url": "https://accounts.google.com"
                          }
                        }

                        ```
                      example:
                        firstName:
                          mapFrom: claims.given_name
                          required: true
                        address:
                          mapFrom: claims.address.formatted
                        picture:
                          mapFrom: claims.picture
                          defaultValue: http://example.edu/img/placeholder.png
                        badge:
                          defaultValue: http://example.edu/img/badge.png
                        providerSubjectId:
                          mapFrom: authenticationProvider.subjectId
                      additionalProperties:
                        type: object
                        properties:
                          mapFrom:
                            type: string
                            description: >-
                              The path of the property in the source context
                              object.
                          required:
                            type: boolean
                            description: >-
                              Indicates whether value of the property must be
                              resolvable. If set to true and does not map to a
                              value, issuance will fail.
                          defaultValue:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                              - type: array
                              - type: object
                            description: >-
                              Default value to be used when unable to resolve
                              from the supplied context object. Required when
                              `mapFrom` is not defined.
                    revocable:
                      type: boolean
                      default: true
                      description: >-
                        When set to `true` (default), the created credential can
                        later be revoked. When set to `false`, the credential
                        cannot be revoked.
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of `years`, `months`,
                        `weeks`, `days`, `hours`, `minutes` and `seconds`.
                      properties:
                        years:
                          type: number
                          example: 1
                        months:
                          type: number
                          example: 12
                        weeks:
                          type: number
                          example: 52
                        days:
                          type: number
                          example: 365
                        hours:
                          type: number
                          example: 24
                        minutes:
                          type: number
                          example: 1440
                        seconds:
                          type: number
                          example: 3600
                  required:
                    - claimMappings
              title: CreateCredentialConfigurationRequest
      responses:
        '201':
          description: Credential configuration created
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this credential configuration. Can
                          be used to create an offer based on this credential
                          configuration, or to retrieve, update or remove the
                          credential configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different
                          Compact/Compact Semantic credential configurations on
                          your tenant. Thus, its value must:

                          - Be unique across all Compact/Semantic compact
                          credential configurations on your tenant.

                          - Not be VerifiableCredential.          type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to `true` (default), the created credential
                          can later be revoked. When set to `false`, the
                          credential cannot be revoked.
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                            example: 1
                          months:
                            type: number
                            example: 12
                          weeks:
                            type: number
                            example: 52
                          days:
                            type: number
                            example: 365
                          hours:
                            type: number
                            example: 24
                          minutes:
                            type: number
                            example: 1440
                          seconds:
                            type: number
                            example: 3600
                    required:
                      - claimMappings
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
    get:
      operationId: getCompactSemanticCredentialConfigurations
      tags:
        - Compact Semantic Credentials Configuration
      summary: Retrieve all Compact Semantic Credential configurations
      description: >
        Returns a list of all Comapct Semantic Credential configurations from
        your tenant.


        ### **Analytic events**

        *
        CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_START

        *
        CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_SUCCESS

        *
        CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of entries
        - schema:
            type: string
            example: AlumniCredential
          in: query
          name: type
          description: The optional credential type to filter on
      responses:
        '200':
          description: Compact Semantic Credential configurations retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      required:
                        - id
                        - type
                        - revocable
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: >-
                                Uniquely identifies this credential
                                configuration. Can be used to create an offer
                                based on this credential configuration, or to
                                retrieve, update or remove the credential
                                configuration.
                              example: 983c0a86-204f-4431-9371-f5a22e506599
                        - type: object
                          properties:
                            type:
                              description: >-
                                Used to differentiate between different
                                Compact/Compact Semantic credential
                                configurations on your tenant. Thus, its value
                                must:

                                - Be unique across all Compact/Semantic compact
                                credential configurations on your tenant.

                                - Not be VerifiableCredential.          type:
                                string
                              minLength: 1
                              maxLength: 1024
                              example: CourseCredential
                            claimMappings:
                              type: object
                              description: >
                                This is where you specify how to map claims
                                (user attributes) into issued credentials. Each
                                field in the object corresponds to a claim in
                                the issued credential, and contains one or more
                                from the following attributes:

                                - `mapFrom`: References the path in the user
                                object where the claim is available.
                                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                                - `defaultValue`: Indicates what value is used
                                if required is set to `false` (field is
                                optional) and no value is provided by the claims
                                source. When `defaultValue` is provided,
                                `mapFrom` is optional.

                                - `required`: Indicates whether the claim is
                                required (default: `false`). When a required
                                claim cannot be retrieved and no `defaultValue`
                                is available, credential issuance will fail.

                                **Example source context object**

                                ```json

                                {
                                  "claims": {
                                    "given_name": "Jamie",
                                    "family_name": "Doe",
                                    "address": {
                                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                                    }
                                  },
                                  "authenticationProvider": {
                                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                                    "url": "https://accounts.google.com"
                                  }
                                }

                                ```
                              example:
                                firstName:
                                  mapFrom: claims.given_name
                                  required: true
                                address:
                                  mapFrom: claims.address.formatted
                                picture:
                                  mapFrom: claims.picture
                                  defaultValue: http://example.edu/img/placeholder.png
                                badge:
                                  defaultValue: http://example.edu/img/badge.png
                                providerSubjectId:
                                  mapFrom: authenticationProvider.subjectId
                              additionalProperties:
                                type: object
                                properties:
                                  mapFrom:
                                    type: string
                                    description: >-
                                      The path of the property in the source
                                      context object.
                                  required:
                                    type: boolean
                                    description: >-
                                      Indicates whether value of the property
                                      must be resolvable. If set to true and
                                      does not map to a value, issuance will
                                      fail.
                                  defaultValue:
                                    oneOf:
                                      - type: string
                                      - type: number
                                      - type: boolean
                                      - type: array
                                      - type: object
                                    description: >-
                                      Default value to be used when unable to
                                      resolve from the supplied context object.
                                      Required when `mapFrom` is not defined.
                            revocable:
                              type: boolean
                              default: true
                              description: >-
                                When set to `true` (default), the created
                                credential can later be revoked. When set to
                                `false`, the credential cannot be revoked.
                            claimSourceId:
                              type: string
                              format: uuid
                              description: >-
                                References the unique identifier of a claims
                                source that can be used to retrieve claims and
                                include them in the issued credential.
                            expiresIn:
                              type: object
                              description: >-
                                Used to determine when will issued credentials
                                expire. Can include any combination of `years`,
                                `months`, `weeks`, `days`, `hours`, `minutes`
                                and `seconds`.
                              properties:
                                years:
                                  type: number
                                  example: 1
                                months:
                                  type: number
                                  example: 12
                                weeks:
                                  type: number
                                  example: 52
                                days:
                                  type: number
                                  example: 365
                                hours:
                                  type: number
                                  example: 24
                                minutes:
                                  type: number
                                  example: 1440
                                seconds:
                                  type: number
                                  example: 3600
                          required:
                            - claimMappings
                      title: CredentialConfigurationResponse
                title: GetCredentialConfigurationsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Invalid value
                        param: cursor
                        value: abc
    parameters: []
  /v2/credentials/compact-semantic/configurations/{id}:
    parameters:
      - name: id
        in: path
        description: Unique identifier for the Compact Semantic Credential configuration.
        schema:
          type: string
          format: uuid
          example: 3948c40e-6e19-4ffc-933c-91f643f24264
        required: true
    get:
      operationId: getCompactSemanticCredentialConfiguration
      tags:
        - Compact Semantic Credentials Configuration
      summary: Retrieve a Compact Semantic Credential Configuration
      description: |-
        Returns a Compact Semantic Credential Configuration by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_START
        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_FAIL
      responses:
        '200':
          description: Compact Semantic Credential configuration retrieved
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this credential configuration. Can
                          be used to create an offer based on this credential
                          configuration, or to retrieve, update or remove the
                          credential configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different
                          Compact/Compact Semantic credential configurations on
                          your tenant. Thus, its value must:

                          - Be unique across all Compact/Semantic compact
                          credential configurations on your tenant.

                          - Not be VerifiableCredential.          type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to `true` (default), the created credential
                          can later be revoked. When set to `false`, the
                          credential cannot be revoked.
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                            example: 1
                          months:
                            type: number
                            example: 12
                          weeks:
                            type: number
                            example: 52
                          days:
                            type: number
                            example: 365
                          hours:
                            type: number
                            example: 24
                          minutes:
                            type: number
                            example: 1440
                          seconds:
                            type: number
                            example: 3600
                    required:
                      - claimMappings
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: The Credential Configuration is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    put:
      operationId: updateCompactSemanticCredentialConfiguration
      tags:
        - Compact Semantic Credentials Configuration
      summary: Update a Compact Semantic Credential configuration
      description: >
        Updates an existing Compact Semantic Credential configuration by
        providing its ID.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_UPDATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              allOf:
                - type: object
                  properties:
                    type:
                      description: >-
                        Used to differentiate between different Compact/Compact
                        Semantic credential configurations on your tenant. Thus,
                        its value must:

                        - Be unique across all Compact/Semantic compact
                        credential configurations on your tenant.

                        - Not be VerifiableCredential.          type: string
                      minLength: 1
                      maxLength: 1024
                      example: CourseCredential
                    claimMappings:
                      type: object
                      description: >
                        This is where you specify how to map claims (user
                        attributes) into issued credentials. Each field in the
                        object corresponds to a claim in the issued credential,
                        and contains one or more from the following attributes:

                        - `mapFrom`: References the path in the user object
                        where the claim is available.
                          - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                          - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                        - `defaultValue`: Indicates what value is used if
                        required is set to `false` (field is optional) and no
                        value is provided by the claims source. When
                        `defaultValue` is provided, `mapFrom` is optional.

                        - `required`: Indicates whether the claim is required
                        (default: `false`). When a required claim cannot be
                        retrieved and no `defaultValue` is available, credential
                        issuance will fail.

                        **Example source context object**

                        ```json

                        {
                          "claims": {
                            "given_name": "Jamie",
                            "family_name": "Doe",
                            "address": {
                              "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                            }
                          },
                          "authenticationProvider": {
                            "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                            "url": "https://accounts.google.com"
                          }
                        }

                        ```
                      example:
                        firstName:
                          mapFrom: claims.given_name
                          required: true
                        address:
                          mapFrom: claims.address.formatted
                        picture:
                          mapFrom: claims.picture
                          defaultValue: http://example.edu/img/placeholder.png
                        badge:
                          defaultValue: http://example.edu/img/badge.png
                        providerSubjectId:
                          mapFrom: authenticationProvider.subjectId
                      additionalProperties:
                        type: object
                        properties:
                          mapFrom:
                            type: string
                            description: >-
                              The path of the property in the source context
                              object.
                          required:
                            type: boolean
                            description: >-
                              Indicates whether value of the property must be
                              resolvable. If set to true and does not map to a
                              value, issuance will fail.
                          defaultValue:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                              - type: array
                              - type: object
                            description: >-
                              Default value to be used when unable to resolve
                              from the supplied context object. Required when
                              `mapFrom` is not defined.
                    revocable:
                      type: boolean
                      default: true
                      description: >-
                        When set to `true` (default), the created credential can
                        later be revoked. When set to `false`, the credential
                        cannot be revoked.
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of `years`, `months`,
                        `weeks`, `days`, `hours`, `minutes` and `seconds`.
                      properties:
                        years:
                          type: number
                          example: 1
                        months:
                          type: number
                          example: 12
                        weeks:
                          type: number
                          example: 52
                        days:
                          type: number
                          example: 365
                        hours:
                          type: number
                          example: 24
                        minutes:
                          type: number
                          example: 1440
                        seconds:
                          type: number
                          example: 3600
                  required:
                    - claimMappings
              title: CreateCredentialConfigurationRequest
        description: Update a Credential Configuration
      responses:
        '200':
          description: Compact Semantic Credential configuration updated
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this credential configuration. Can
                          be used to create an offer based on this credential
                          configuration, or to retrieve, update or remove the
                          credential configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different
                          Compact/Compact Semantic credential configurations on
                          your tenant. Thus, its value must:

                          - Be unique across all Compact/Semantic compact
                          credential configurations on your tenant.

                          - Not be VerifiableCredential.          type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to `true` (default), the created credential
                          can later be revoked. When set to `false`, the
                          credential cannot be revoked.
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                            example: 1
                          months:
                            type: number
                            example: 12
                          weeks:
                            type: number
                            example: 52
                          days:
                            type: number
                            example: 365
                          hours:
                            type: number
                            example: 24
                          minutes:
                            type: number
                            example: 1440
                          seconds:
                            type: number
                            example: 3600
                    required:
                      - claimMappings
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: must be a string
                        param: type
        '404':
          description: The Credential Configuration is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    delete:
      operationId: deleteCompactSemanticCredentialConfiguration
      tags:
        - Compact Semantic Credentials Configuration
      summary: Delete a Compact Semantic Credential configuration
      description: >
        Deletes an exising Compact Semantic Credential configuration by
        providing its ID.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_DELETE_START

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_DELETE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_CREDENTIAL_CONFIGURATION_DELETE_FAIL
      responses:
        '204':
          description: Compact Semantic Credential configuration deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: The Credential Configuration is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
  /v2/credentials/compact/pdf/templates:
    post:
      tags:
        - Compact Credentials PDF templates
      summary: Create a PDF template
      parameters: []
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: PDF template created
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: PDFTemplateResponse
                properties:
                  id:
                    type: string
                    description: >-
                      This is a unique identifier for this PDF template. You
                      will use it as the `templateId` when formatting a Compact
                      Credential as a PDF.
                    example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  name:
                    type: string
                    example: Certificate of participation
                    description: Template name.
                  fileName:
                    type: string
                    example: certificate_of_participation
                    description: File name for credentials formatted using this template.
                  fonts:
                    type: array
                    description: Includes any custom fonts in this template.
                    example:
                      - name: PublicSans-Regular
                        fileName: fonts/PublicSans-Regular.ttf
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        fileName:
                          type: string
                  metadata:
                    type: object
                    properties:
                      title:
                        type: string
                        example: ''
                  fields:
                    type: array
                    description: >-
                      Includes the different elements in this PDF template and
                      what fields in the credential they are mapped from.
                    example:
                      - key: familyName
                        value: '{{payload.sub_claims.familyName}}'
                        isRequired: true
                        alternativeText: '{{payload.sub_claims.familyName}}'
                        fontName: PublicSans-Regular
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        isRequired:
                          type: boolean
                        alternativeText:
                          type: string
                        fontName:
                          type: string
                      required:
                        - key
                        - value
                        - alternativeText
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
      operationId: createCompactPdfTemplate
      description: >-
        Creates a Compact Credential PDF template based on a provided `.zip`
        file. Refer to our [PDF template design
        tutorial](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/pdf-design-guideline)
        for more information on how to design a template and structure the
        `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_CREATE_START

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_CREATE_FAIL
    get:
      summary: Retrieve all PDF templates
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: PDF templates retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: 0ecdcb57-ef2b-4aa1-be34-695c2d9d9486
                  data:
                    type: array
                    items:
                      type: object
                      x-examples: {}
                      title: PDFTemplateResponse
                      properties:
                        id:
                          type: string
                          description: >-
                            This is a unique identifier for this PDF template.
                            You will use it as the `templateId` when formatting
                            a Compact Credential as a PDF.
                          example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                        name:
                          type: string
                          example: Certificate of participation
                          description: Template name.
                        fileName:
                          type: string
                          example: certificate_of_participation
                          description: >-
                            File name for credentials formatted using this
                            template.
                        fonts:
                          type: array
                          description: Includes any custom fonts in this template.
                          example:
                            - name: PublicSans-Regular
                              fileName: fonts/PublicSans-Regular.ttf
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              fileName:
                                type: string
                        metadata:
                          type: object
                          properties:
                            title:
                              type: string
                              example: ''
                        fields:
                          type: array
                          description: >-
                            Includes the different elements in this PDF template
                            and what fields in the credential they are mapped
                            from.
                          example:
                            - key: familyName
                              value: '{{payload.sub_claims.familyName}}'
                              isRequired: true
                              alternativeText: '{{payload.sub_claims.familyName}}'
                              fontName: PublicSans-Regular
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                              isRequired:
                                type: boolean
                              alternativeText:
                                type: string
                              fontName:
                                type: string
                            required:
                              - key
                              - value
                              - alternativeText
                title: PDFTemplateResponse
                description: ''
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getCompactPdfTemplates
      description: >-
        Retrieves a list of all Compact Credential PDF templates available on
        the tenant.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_RETRIEVE_LIST_START

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_RETRIEVE_LIST_SUCCESS

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_RETRIEVE_LIST_FAIL
      tags:
        - Compact Credentials PDF templates
    parameters: []
  /v2/credentials/compact/pdf/templates/{id}:
    put:
      tags:
        - Compact Credentials PDF templates
      summary: Update a PDF template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: PDF template ID
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: PDF template updated
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: PDFTemplateResponse
                properties:
                  id:
                    type: string
                    description: >-
                      This is a unique identifier for this PDF template. You
                      will use it as the `templateId` when formatting a Compact
                      Credential as a PDF.
                    example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  name:
                    type: string
                    example: Certificate of participation
                    description: Template name.
                  fileName:
                    type: string
                    example: certificate_of_participation
                    description: File name for credentials formatted using this template.
                  fonts:
                    type: array
                    description: Includes any custom fonts in this template.
                    example:
                      - name: PublicSans-Regular
                        fileName: fonts/PublicSans-Regular.ttf
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        fileName:
                          type: string
                  metadata:
                    type: object
                    properties:
                      title:
                        type: string
                        example: ''
                  fields:
                    type: array
                    description: >-
                      Includes the different elements in this PDF template and
                      what fields in the credential they are mapped from.
                    example:
                      - key: familyName
                        value: '{{payload.sub_claims.familyName}}'
                        isRequired: true
                        alternativeText: '{{payload.sub_claims.familyName}}'
                        fontName: PublicSans-Regular
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        isRequired:
                          type: boolean
                        alternativeText:
                          type: string
                        fontName:
                          type: string
                      required:
                        - key
                        - value
                        - alternativeText
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: updateCompactPdfTemplate
      description: >-
        Update an existing Compact Credential PDF template based on a provided
        `.zip` file. Refer to our [PDF template design
        tutorial](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/pdf-design-guideline)
        for more information on how to design a template and structure the
        `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_UPDATE_START

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_PDF_TEMPLATE_UPDATE_FAIL
    get:
      tags:
        - Compact Credentials PDF templates
      summary: Retrieve a PDF template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: PDF template ID
      responses:
        '200':
          description: PDF template retrieved
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: PDFTemplateResponse
                properties:
                  id:
                    type: string
                    description: >-
                      This is a unique identifier for this PDF template. You
                      will use it as the `templateId` when formatting a Compact
                      Credential as a PDF.
                    example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  name:
                    type: string
                    example: Certificate of participation
                    description: Template name.
                  fileName:
                    type: string
                    example: certificate_of_participation
                    description: File name for credentials formatted using this template.
                  fonts:
                    type: array
                    description: Includes any custom fonts in this template.
                    example:
                      - name: PublicSans-Regular
                        fileName: fonts/PublicSans-Regular.ttf
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        fileName:
                          type: string
                  metadata:
                    type: object
                    properties:
                      title:
                        type: string
                        example: ''
                  fields:
                    type: array
                    description: >-
                      Includes the different elements in this PDF template and
                      what fields in the credential they are mapped from.
                    example:
                      - key: familyName
                        value: '{{payload.sub_claims.familyName}}'
                        isRequired: true
                        alternativeText: '{{payload.sub_claims.familyName}}'
                        fontName: PublicSans-Regular
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        isRequired:
                          type: boolean
                        alternativeText:
                          type: string
                        fontName:
                          type: string
                      required:
                        - key
                        - value
                        - alternativeText
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getCompactPdfTemplate
      description: |-
        Retrieves an existing Compact Credential PDF template using its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_PDF_TEMPLATE_RETRIEVE_START
        * CREDENTIAL_COMPACT_PDF_TEMPLATE_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_PDF_TEMPLATE_RETRIEVE_FAIL
    delete:
      tags:
        - Compact Credentials PDF templates
      summary: Delete a PDF template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: PDF Template ID
      responses:
        '204':
          description: PDF template deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: deleteCompactPdfTemplate
      description: |-
        Delete an existing PDF template by providing its ID

        ### **Analytic events**
        * CREDENTIAL_COMPACT_PDF_TEMPLATE_DELETE_START
        * CREDENTIAL_COMPACT_PDF_TEMPLATE_DELETE_SUCCESS
        * CREDENTIAL_COMPACT_PDF_TEMPLATE_DELETE_FAIL
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  /v2/credentials/compact/pdf:
    post:
      tags:
        - Compact Credentials Issuance
      summary: Format a Compact Credential as a PDF
      parameters: []
      requestBody:
        description: Credential payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  type: string
                  description: >-
                    Use the `ID` element of the PDF template to be used to
                    format this credential.
                  example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  minLength: 1
                payload:
                  type: string
                  description: >-
                    String payload representation of the encoded Compact
                    Credential.
                  example: '{payload}'
                  minLength: 1
                  maxLength: 1024
              title: CreatePDFResponse
            examples:
              Generate PDF:
                value:
                  templateId: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  payload: '{payload}'
      responses:
        '200':
          description: PDF created
          content:
            application/pdf:
              schema:
                format: binary
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: GenCompactPdf
      description: >-
        Returns a PDF representation of a provided Compact Credential based on
        an existing PDF template.


        > The request will fail if the provided credential isn't valid or has
        expired.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_PDF_CREATE_START

        * CREDENTIAL_COMPACT_PDF_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_PDF_CREATE_FAIL
    parameters: []
  /v2/credentials/compact-semantic/pdf/templates:
    post:
      tags:
        - Compact Semantic Credentials PDF templates
      summary: Create a PDF template
      parameters: []
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: PDF template created
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: PDFTemplateResponse
                properties:
                  id:
                    type: string
                    description: >-
                      This is a unique identifier for this PDF template. You
                      will use it as the `templateId` when formatting a Compact
                      Credential as a PDF.
                    example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  name:
                    type: string
                    example: Certificate of participation
                    description: Template name.
                  fileName:
                    type: string
                    example: certificate_of_participation
                    description: File name for credentials formatted using this template.
                  fonts:
                    type: array
                    description: Includes any custom fonts in this template.
                    example:
                      - name: PublicSans-Regular
                        fileName: fonts/PublicSans-Regular.ttf
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        fileName:
                          type: string
                  metadata:
                    type: object
                    properties:
                      title:
                        type: string
                        example: ''
                  fields:
                    type: array
                    description: >-
                      Includes the different elements in this PDF template and
                      what fields in the credential they are mapped from.
                    example:
                      - key: familyName
                        value: '{{payload.sub_claims.familyName}}'
                        isRequired: true
                        alternativeText: '{{payload.sub_claims.familyName}}'
                        fontName: PublicSans-Regular
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        isRequired:
                          type: boolean
                        alternativeText:
                          type: string
                        fontName:
                          type: string
                      required:
                        - key
                        - value
                        - alternativeText
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
      operationId: createCompactSemanticPdfTemplate
      description: >-
        Creates a Compact Semantic Credential PDF template based on a provided
        `.zip` file. Refer to our [PDF template design
        tutorial](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/pdf-design-guideline)
        for more information on how to design a template and structure the
        `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_CREATE_FAIL
    get:
      tags:
        - Compact Semantic Credentials PDF templates
      summary: Retrieve all PDF templates
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: PDF templates retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: 0ecdcb57-ef2b-4aa1-be34-695c2d9d9486
                  data:
                    type: array
                    items:
                      type: object
                      x-examples: {}
                      title: PDFTemplateResponse
                      properties:
                        id:
                          type: string
                          description: >-
                            This is a unique identifier for this PDF template.
                            You will use it as the `templateId` when formatting
                            a Compact Credential as a PDF.
                          example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                        name:
                          type: string
                          example: Certificate of participation
                          description: Template name.
                        fileName:
                          type: string
                          example: certificate_of_participation
                          description: >-
                            File name for credentials formatted using this
                            template.
                        fonts:
                          type: array
                          description: Includes any custom fonts in this template.
                          example:
                            - name: PublicSans-Regular
                              fileName: fonts/PublicSans-Regular.ttf
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              fileName:
                                type: string
                        metadata:
                          type: object
                          properties:
                            title:
                              type: string
                              example: ''
                        fields:
                          type: array
                          description: >-
                            Includes the different elements in this PDF template
                            and what fields in the credential they are mapped
                            from.
                          example:
                            - key: familyName
                              value: '{{payload.sub_claims.familyName}}'
                              isRequired: true
                              alternativeText: '{{payload.sub_claims.familyName}}'
                              fontName: PublicSans-Regular
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                              isRequired:
                                type: boolean
                              alternativeText:
                                type: string
                              fontName:
                                type: string
                            required:
                              - key
                              - value
                              - alternativeText
                title: PDFTemplateResponse
                description: ''
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getCompactSemanticPdfTemplates
      description: >-
        Retrieves a list of all Compact Semantic Credential PDF templates
        available on the tenant.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_RETRIEVE_LIST_START

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_RETRIEVE_LIST_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_RETRIEVE_LIST_FAIL
    parameters: []
  /v2/credentials/compact-semantic/pdf/templates/{id}:
    put:
      tags:
        - Compact Semantic Credentials PDF templates
      summary: Update a PDF template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: PDF Template ID
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: PDF template updated
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: PDFTemplateResponse
                properties:
                  id:
                    type: string
                    description: >-
                      This is a unique identifier for this PDF template. You
                      will use it as the `templateId` when formatting a Compact
                      Credential as a PDF.
                    example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  name:
                    type: string
                    example: Certificate of participation
                    description: Template name.
                  fileName:
                    type: string
                    example: certificate_of_participation
                    description: File name for credentials formatted using this template.
                  fonts:
                    type: array
                    description: Includes any custom fonts in this template.
                    example:
                      - name: PublicSans-Regular
                        fileName: fonts/PublicSans-Regular.ttf
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        fileName:
                          type: string
                  metadata:
                    type: object
                    properties:
                      title:
                        type: string
                        example: ''
                  fields:
                    type: array
                    description: >-
                      Includes the different elements in this PDF template and
                      what fields in the credential they are mapped from.
                    example:
                      - key: familyName
                        value: '{{payload.sub_claims.familyName}}'
                        isRequired: true
                        alternativeText: '{{payload.sub_claims.familyName}}'
                        fontName: PublicSans-Regular
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        isRequired:
                          type: boolean
                        alternativeText:
                          type: string
                        fontName:
                          type: string
                      required:
                        - key
                        - value
                        - alternativeText
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: updateCompactSemanticPdfTemplate
      description: >-
        Update an existing Compact Credential PDF template based on a provided
        `.zip` file. Refer to our [PDF template design
        tutorial](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/pdf-design-guideline)
        for more information on how to design a template and structure the
        `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_UPDATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_UPDATE_FAIL
    get:
      tags:
        - Compact Semantic Credentials PDF templates
      summary: Retrieve a PDF template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: PDF Template ID
      responses:
        '200':
          description: PDF template retrieved
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: PDFTemplateResponse
                properties:
                  id:
                    type: string
                    description: >-
                      This is a unique identifier for this PDF template. You
                      will use it as the `templateId` when formatting a Compact
                      Credential as a PDF.
                    example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  name:
                    type: string
                    example: Certificate of participation
                    description: Template name.
                  fileName:
                    type: string
                    example: certificate_of_participation
                    description: File name for credentials formatted using this template.
                  fonts:
                    type: array
                    description: Includes any custom fonts in this template.
                    example:
                      - name: PublicSans-Regular
                        fileName: fonts/PublicSans-Regular.ttf
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        fileName:
                          type: string
                  metadata:
                    type: object
                    properties:
                      title:
                        type: string
                        example: ''
                  fields:
                    type: array
                    description: >-
                      Includes the different elements in this PDF template and
                      what fields in the credential they are mapped from.
                    example:
                      - key: familyName
                        value: '{{payload.sub_claims.familyName}}'
                        isRequired: true
                        alternativeText: '{{payload.sub_claims.familyName}}'
                        fontName: PublicSans-Regular
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        isRequired:
                          type: boolean
                        alternativeText:
                          type: string
                        fontName:
                          type: string
                      required:
                        - key
                        - value
                        - alternativeText
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: getCompactSemanticPdfTemplate
      description: >-
        Retrieves an existing Compact Semantic Credential PDF template using its
        ID.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_RETRIEVE_START

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_RETRIEVE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_RETRIEVE_FAIL
    delete:
      tags:
        - Compact Semantic Credentials PDF templates
      summary: Delete a PDF template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: PDF Template ID
      responses:
        '204':
          description: PDF template deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: deleteCompactSemanticPdfTemplate
      description: |-
        Delete an existing PDF template by providing its ID

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_DELETE_START
        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_DELETE_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_PDF_TEMPLATE_DELETE_FAIL
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  /v2/credentials/compact-semantic/pdf:
    post:
      tags:
        - Compact Semantic Credentials Issuance
      summary: Format a Compact Credential as a PDF
      parameters: []
      requestBody:
        description: The credential payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  type: string
                  description: >-
                    Use the `ID` element of the PDF template to be used to
                    format this credential.
                  example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  minLength: 1
                payload:
                  type: string
                  description: >-
                    String payload representation of the encoded Compact
                    Credential.
                  example: '{payload}'
                  minLength: 1
                  maxLength: 1024
              title: CreatePDFResponse
            examples:
              Generate PDF:
                value:
                  templateId: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
                  payload: '{payload}'
      responses:
        '200':
          description: PDF created
          content:
            application/pdf:
              schema:
                format: binary
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: GenCompactSemanticPdf
      description: >-
        Returns a PDF representation of a provided Compact Credential based on
        an existing PDF template.


        > The request will fail if the provided credential isn't valid or has
        expired.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_PDF_CREATE_FAIL
    parameters: []
  /v2/credentials/compact/digitalpass/apple/templates:
    post:
      tags:
        - Compact Credentials Apple Pass templates
      summary: Create an Apple Pass template
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Apple digital pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                fileName:
                  type: string
                  description: >-
                    Insert the file name that will be assigned to Apple digital
                    passes created from this template. Must only include
                    alphanumeric characters, ''_'', or ''-'', and end with
                    `.pkpass`.
                  example: certificate_of_participation.pkpass
                  minLength: 1
                  maxLength: 100
                teamIdentifier:
                  type: string
                  description: >-
                    The Team ID for the Apple Developer Program account that
                    registered the pass type identifier.
                  example: GH5P43ABC
                passTypeIdentifier:
                  type: string
                  description: >-
                    The pass type identifier that’s registered with Apple. The
                    value must be the same as the distribution certificate used
                    to sign the pass.
                  example: pass.myproject.participation.pk
                wwdr:
                  type: string
                  description: >-
                    Apple G1 or G4 worldwide developer relations intermediate
                    certificate.
                signerCert:
                  type: string
                  description: >-
                    Apple pass [signer
                    certificate](https://help.apple.com/developer-account/#/devbfa00fef7).
                signerKey:
                  type: string
                  description: The encrypted key of the Apple pass signer certificate.
                signerKeyPassphrase:
                  type: string
                  description: Passphrase for the encrypted key.
              required:
                - name
                - template
                - fileName
                - teamIdentifier
                - passTypeIdentifier
                - wwdr
                - signerCert
                - signerKey
                - signerKeyPassphrase
              title: ApplePassTemplateRequest
      responses:
        '201':
          description: Apple Pass template created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Apple digital pass
                      template. You will use it as the `templateId` when
                      formatting a Compact Credential as an Apple Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: certificate_of_participation.pkpass
                      teamIdentifier:
                        type: string
                        example: GH5P43ABC
                      passTypeIdentifier:
                        type: string
                        example: pass.myproject.participation.pk
                title: ApplePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: createCCApplePassTemplate
      description: >-
        Creates an Apple Pass template based on the provided `.zip` file. Refer
        to our [Design an Apple Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/apple-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        > The Apple Pass template uses the official Apple Pass bundle structure.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_CREATE_START

        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_CREATE_FAIL
    get:
      tags:
        - Compact Credentials Apple Pass templates
      summary: Retrieve all Apple Pass templates
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: Apple Pass templates retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                          description: >-
                            This is a unique identifier for this Apple digital
                            pass template. You will use it as the `templateId`
                            when formatting a Compact Credential as an Apple
                            Pass.
                        passType:
                          description: Digital pass type
                          type: string
                          enum:
                            - apple
                            - google
                          title: DigitalPassType
                        name:
                          type: string
                          example: Certificate of participation
                        metadata:
                          type: object
                          properties:
                            fileName:
                              type: string
                              example: certificate_of_participation.pkpass
                            teamIdentifier:
                              type: string
                              example: GH5P43ABC
                            passTypeIdentifier:
                              type: string
                              example: pass.myproject.participation.pk
                      title: ApplePassTemplateResponse
                title: ApplePassTemplatesResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: listCCApplePassTemplates
      description: |-
        Retrieves a list of all Apple Pass template available on the tenant.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_RETRIEVE_LIST_START
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_RETRIEVE_LIST_SUCCESS
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_RETRIEVE_LIST_FAIL
    parameters: []
  /v2/credentials/compact/digitalpass/apple/templates/{id}:
    put:
      tags:
        - Compact Credentials Apple Pass templates
      summary: Update an Apple Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Apple Pass template ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Apple digital pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                fileName:
                  type: string
                  description: >-
                    Insert the file name that will be assigned to Apple digital
                    passes created from this template. Must only include
                    alphanumeric characters, ''_'', or ''-'', and end with
                    `.pkpass`.
                  example: certificate_of_participation.pkpass
                  minLength: 1
                  maxLength: 100
                teamIdentifier:
                  type: string
                  description: >-
                    The Team ID for the Apple Developer Program account that
                    registered the pass type identifier.
                  example: GH5P43ABC
                passTypeIdentifier:
                  type: string
                  description: >-
                    The pass type identifier that’s registered with Apple. The
                    value must be the same as the distribution certificate used
                    to sign the pass.
                  example: pass.myproject.participation.pk
                wwdr:
                  type: string
                  description: >-
                    Apple G1 or G4 worldwide developer relations intermediate
                    certificate.
                signerCert:
                  type: string
                  description: >-
                    Apple pass [signer
                    certificate](https://help.apple.com/developer-account/#/devbfa00fef7).
                signerKey:
                  type: string
                  description: The encrypted key of the Apple pass signer certificate.
                signerKeyPassphrase:
                  type: string
                  description: Passphrase for the encrypted key.
              required:
                - name
                - template
                - fileName
                - teamIdentifier
                - passTypeIdentifier
                - wwdr
                - signerCert
                - signerKey
                - signerKeyPassphrase
              title: ApplePassTemplateRequest
      responses:
        '200':
          description: Apple Pass template updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Apple digital pass
                      template. You will use it as the `templateId` when
                      formatting a Compact Credential as an Apple Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: certificate_of_participation.pkpass
                      teamIdentifier:
                        type: string
                        example: GH5P43ABC
                      passTypeIdentifier:
                        type: string
                        example: pass.myproject.participation.pk
                title: ApplePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: updateCCApplePassTemplate
      description: >-
        Updates an existing Apple Pass template by providing its ID and a `.zip`
        file. Refer to our [Design an Apple Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/apple-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_UPDATE_START

        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_UPDATE_FAIL
    get:
      tags:
        - Compact Credentials Apple Pass templates
      summary: Retrieve an Apple Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Apple Pass template ID
      responses:
        '200':
          description: Apple Pass template retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Apple digital pass
                      template. You will use it as the `templateId` when
                      formatting a Compact Credential as an Apple Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: certificate_of_participation.pkpass
                      teamIdentifier:
                        type: string
                        example: GH5P43ABC
                      passTypeIdentifier:
                        type: string
                        example: pass.myproject.participation.pk
                title: ApplePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: retrieveCCApplePassTemplate
      description: |-
        Retrieves an existing Apple Pass template by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_RETRIEVE_START
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_RETRIEVE_FAIL
    delete:
      tags:
        - Compact Credentials Apple Pass templates
      summary: Delete an Apple Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Apple Pass template ID
      responses:
        '204':
          description: Apple Pass template deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: deleteCCApplePassTemplate
      description: |-
        Deletes an existing Apple Pass template by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_DELETE_START
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_DELETE_SUCCESS
        * CREDENTIAL_COMPACT_APPLE_PASS_TEMPLATE_DELETE_FAIL
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Apple Pass template ID
  /v2/credentials/compact/digitalpass/google/templates:
    post:
      tags:
        - Compact Credentials Google Pass templates
      summary: Create a Google Pass template
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Google Pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                issuerId:
                  type: string
                  description: Google Wallet Pass signer issuer ID.
                  example: '3388000000012346000'
                serviceAccountClientEmail:
                  type: string
                  description: >-
                    Email address of the Google Cloud Platform service account
                    for accessing the Google Pay Passes API.
                  example: app-user@myproject.iam.gserviceaccount.com
                serviceAccountPrivateKey:
                  type: string
                  description: >-
                    Private key PEM of the Google Cloud Platform service
                    account.
              required:
                - name
                - template
                - issuerId
                - serviceAccountClientEmail
                - serviceAccountPrivateKey
              title: GooglePassTemplateRequest
      responses:
        '201':
          description: Google Pass template created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Google Pass template.
                      You will use it as the `templateId` when formatting a
                      Compact Credential as a Google Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      issuerId:
                        type: string
                        example: '3388000000012346000'
                      serviceAccountClientEmail:
                        type: string
                        example: app-user@myproject.iam.gserviceaccount.com
                      payPassId:
                        type: string
                        example: >-
                          3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                title: GooglePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: createCCGooglePassTemplate
      description: >-
        Creates a Google Pass template based on the provided `.zip` file. Refer
        to our [Design a Google Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/google-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_CREATE_START

        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_CREATE_FAIL
    get:
      tags:
        - Compact Credentials Google Pass templates
      summary: Retrieve all Google Pass templates
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: Google Pass templates retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                          description: >-
                            This is a unique identifier for this Google Pass
                            template. You will use it as the `templateId` when
                            formatting a Compact Credential as a Google Pass.
                        passType:
                          description: Digital pass type
                          type: string
                          enum:
                            - apple
                            - google
                          title: DigitalPassType
                        name:
                          type: string
                          example: Certificate of participation
                        metadata:
                          type: object
                          properties:
                            issuerId:
                              type: string
                              example: '3388000000012346000'
                            serviceAccountClientEmail:
                              type: string
                              example: app-user@myproject.iam.gserviceaccount.com
                            payPassId:
                              type: string
                              example: >-
                                3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                      title: GooglePassTemplateResponse
                title: GooglePassTemplatesResponse
                description: ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: getCCGooglePassTemplates
      description: |-
        Retrieves a list of all Google Pass templates available on your tenant.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_RETRIEVE_LIST_START
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_RETRIEVE_LIST_SUCCESS
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_RETRIEVE_LIST_FAIL
    parameters: []
  /v2/credentials/compact/digitalpass/google/templates/{id}:
    put:
      tags:
        - Compact Credentials Google Pass templates
      summary: Update a Google Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Google Pass template ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Google Pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                issuerId:
                  type: string
                  description: Google Wallet Pass signer issuer ID.
                  example: '3388000000012346000'
                serviceAccountClientEmail:
                  type: string
                  description: >-
                    Email address of the Google Cloud Platform service account
                    for accessing the Google Pay Passes API.
                  example: app-user@myproject.iam.gserviceaccount.com
                serviceAccountPrivateKey:
                  type: string
                  description: >-
                    Private key PEM of the Google Cloud Platform service
                    account.
              required:
                - name
                - template
                - issuerId
                - serviceAccountClientEmail
                - serviceAccountPrivateKey
              title: GooglePassTemplateRequest
      responses:
        '200':
          description: Google Pass template updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Google Pass template.
                      You will use it as the `templateId` when formatting a
                      Compact Credential as a Google Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      issuerId:
                        type: string
                        example: '3388000000012346000'
                      serviceAccountClientEmail:
                        type: string
                        example: app-user@myproject.iam.gserviceaccount.com
                      payPassId:
                        type: string
                        example: >-
                          3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                title: GooglePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
      operationId: updateCCGooglePassTemplate
      description: >-
        Updates a existing Google Pass template by providing its ID and a `.zip`
        file. Refer to our [Design a Google Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/google-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_UPDATE_START

        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_UPDATE_FAIL
    get:
      tags:
        - Compact Credentials Google Pass templates
      summary: Retrieve a Google Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Google Pass template ID
      responses:
        '200':
          description: Google Pass templated retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Google Pass template.
                      You will use it as the `templateId` when formatting a
                      Compact Credential as a Google Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      issuerId:
                        type: string
                        example: '3388000000012346000'
                      serviceAccountClientEmail:
                        type: string
                        example: app-user@myproject.iam.gserviceaccount.com
                      payPassId:
                        type: string
                        example: >-
                          3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                title: GooglePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: retrieveCCGooglePassTemplate
      description: |-
        Retrieves an existing Google Pass template by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_RETRIEVE_START
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_RETRIEVE_FAIL
    delete:
      tags:
        - Compact Credentials Google Pass templates
      summary: Delete a Google Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Google Pass template ID
      responses:
        '204':
          description: Google Pass template deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: deleteCCGooglePassTemplate
      description: |-
        Deletes an existing Google Pass template by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_DELETE_START
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_DELETE_SUCCESS
        * CREDENTIAL_COMPACT_GOOGLE_PASS_TEMPLATE_DELETE_FAIL
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Template ID
  /v2/credentials/compact/digitalpass/apple:
    post:
      tags:
        - Compact Credentials Issuance
      summary: Format a Compact Credential as an Apple Pass
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              format: object
              properties:
                templateId:
                  type: string
                  description: >-
                    Use the `id` of the template to be used to format this
                    credential.
                  example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  minLength: 1
                payload:
                  type: string
                  description: >-
                    String payload representation of the encoded Compact
                    Credential.
                  example: '{payload}'
              title: CreateDigitalPassRequest
              description: ''
            examples:
              Generate Apple Pass:
                value:
                  templateId: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  payload: '{payload}'
      responses:
        '200':
          description: Apple Pass created
          content:
            application/vnd.apple.pkpass:
              schema:
                type: string
                description: The generated Apple Pass `.pkpass` file.
                title: CreateApplePassResponse
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: generateCCApplePass
      description: >-
        Returns an Apple Pass representation of a provided Compact Credential
        based on an existing Apple Pass template.


        > The request will fail if the provided credential isn't valid or has
        expired.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_APPLE_PASS_CREATE_START

        * CREDENTIAL_COMPACT_APPLE_PASS_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_APPLE_PASS_CREATE_FAIL
    parameters: []
  /v2/credentials/compact/digitalpass/google:
    post:
      tags:
        - Compact Credentials Issuance
      summary: Format a Compact Credential as a Google Pass
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              format: object
              properties:
                templateId:
                  type: string
                  description: >-
                    Use the `id` of the template to be used to format this
                    credential.
                  example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  minLength: 1
                payload:
                  type: string
                  description: >-
                    String payload representation of the encoded Compact
                    Credential.
                  example: '{payload}'
              title: CreateDigitalPassRequest
              description: ''
            examples:
              Generate Google Pay Pass:
                value:
                  templateId: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  payload: '{payload}'
      responses:
        '200':
          description: Google Pass created
          content:
            application/json:
              schema:
                description: The URL to retrieve the Google Pass from.
                format: object
                properties:
                  redirectTo:
                    type: string
                    description: >-
                      Redirect URL to download the Google Pass to the Google
                      Wallet.
                    example: https://pay.google.com/gp/v/save/{jwt}
                title: CreateGooglePassResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: createCCDigitalPass
      description: >-
        Returns a Google Pass representation of a provided Compact Credential
        based on an existing Google Pass template.


        > The request will fail if the provided credential isn't valid or has
        expired.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_GOOGLE_PASS_CREATE_START

        * CREDENTIAL_COMPACT_GOOGLE_PASS_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_GOOGLE_PASS_CREATE_FAIL
  /v2/credentials/compact-semantic/digitalpass/apple/templates:
    post:
      tags:
        - Compact Semantic Credentials Apple Pass templates
      summary: Create an Apple Pass template
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Apple digital pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                fileName:
                  type: string
                  description: >-
                    Insert the file name that will be assigned to Apple digital
                    passes created from this template. Must only include
                    alphanumeric characters, ''_'', or ''-'', and end with
                    `.pkpass`.
                  example: certificate_of_participation.pkpass
                  minLength: 1
                  maxLength: 100
                teamIdentifier:
                  type: string
                  description: >-
                    The Team ID for the Apple Developer Program account that
                    registered the pass type identifier.
                  example: GH5P43ABC
                passTypeIdentifier:
                  type: string
                  description: >-
                    The pass type identifier that’s registered with Apple. The
                    value must be the same as the distribution certificate used
                    to sign the pass.
                  example: pass.myproject.participation.pk
                wwdr:
                  type: string
                  description: >-
                    Apple G1 or G4 worldwide developer relations intermediate
                    certificate.
                signerCert:
                  type: string
                  description: >-
                    Apple pass [signer
                    certificate](https://help.apple.com/developer-account/#/devbfa00fef7).
                signerKey:
                  type: string
                  description: The encrypted key of the Apple pass signer certificate.
                signerKeyPassphrase:
                  type: string
                  description: Passphrase for the encrypted key.
              required:
                - name
                - template
                - fileName
                - teamIdentifier
                - passTypeIdentifier
                - wwdr
                - signerCert
                - signerKey
                - signerKeyPassphrase
              title: ApplePassTemplateRequest
      responses:
        '201':
          description: Apple Pass template created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Apple digital pass
                      template. You will use it as the `templateId` when
                      formatting a Compact Credential as an Apple Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: certificate_of_participation.pkpass
                      teamIdentifier:
                        type: string
                        example: GH5P43ABC
                      passTypeIdentifier:
                        type: string
                        example: pass.myproject.participation.pk
                title: ApplePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: createSCApplePassTemplate
      description: >-
        Creates an Apple Pass template based on the provided `.zip` file. Refer
        to our [Design an Apple Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/apple-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        > The Apple Pass template uses the official Apple Pass bundle structure.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_CREATE_FAIL
    get:
      tags:
        - Compact Semantic Credentials Apple Pass templates
      summary: Retrieve all Apple Pass templates
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: Apple Pass templates retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                          description: >-
                            This is a unique identifier for this Apple digital
                            pass template. You will use it as the `templateId`
                            when formatting a Compact Credential as an Apple
                            Pass.
                        passType:
                          description: Digital pass type
                          type: string
                          enum:
                            - apple
                            - google
                          title: DigitalPassType
                        name:
                          type: string
                          example: Certificate of participation
                        metadata:
                          type: object
                          properties:
                            fileName:
                              type: string
                              example: certificate_of_participation.pkpass
                            teamIdentifier:
                              type: string
                              example: GH5P43ABC
                            passTypeIdentifier:
                              type: string
                              example: pass.myproject.participation.pk
                      title: ApplePassTemplateResponse
                title: ApplePassTemplatesResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: listSCApplePassTemplates
      description: |-
        Retrieves a list of all Apple Pass template available on the tenant.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_RETRIEVE_LIST_START
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_RETRIEVE_LIST_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_RETRIEVE_LIST_FAIL
    parameters: []
  /v2/credentials/compact-semantic/digitalpass/apple/templates/{id}:
    put:
      tags:
        - Compact Semantic Credentials Apple Pass templates
      summary: Update an Apple Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Apple Pass template ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Apple digital pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                fileName:
                  type: string
                  description: >-
                    Insert the file name that will be assigned to Apple digital
                    passes created from this template. Must only include
                    alphanumeric characters, ''_'', or ''-'', and end with
                    `.pkpass`.
                  example: certificate_of_participation.pkpass
                  minLength: 1
                  maxLength: 100
                teamIdentifier:
                  type: string
                  description: >-
                    The Team ID for the Apple Developer Program account that
                    registered the pass type identifier.
                  example: GH5P43ABC
                passTypeIdentifier:
                  type: string
                  description: >-
                    The pass type identifier that’s registered with Apple. The
                    value must be the same as the distribution certificate used
                    to sign the pass.
                  example: pass.myproject.participation.pk
                wwdr:
                  type: string
                  description: >-
                    Apple G1 or G4 worldwide developer relations intermediate
                    certificate.
                signerCert:
                  type: string
                  description: >-
                    Apple pass [signer
                    certificate](https://help.apple.com/developer-account/#/devbfa00fef7).
                signerKey:
                  type: string
                  description: The encrypted key of the Apple pass signer certificate.
                signerKeyPassphrase:
                  type: string
                  description: Passphrase for the encrypted key.
              required:
                - name
                - template
                - fileName
                - teamIdentifier
                - passTypeIdentifier
                - wwdr
                - signerCert
                - signerKey
                - signerKeyPassphrase
              title: ApplePassTemplateRequest
      responses:
        '200':
          description: Apple Pass template updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Apple digital pass
                      template. You will use it as the `templateId` when
                      formatting a Compact Credential as an Apple Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: certificate_of_participation.pkpass
                      teamIdentifier:
                        type: string
                        example: GH5P43ABC
                      passTypeIdentifier:
                        type: string
                        example: pass.myproject.participation.pk
                title: ApplePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: updateSCApplePassTemplate
      description: >-
        Updates an existing Apple Pass template by providing its ID and a `.zip`
        file. Refer to our [Design an Apple Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/apple-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_UPDATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_UPDATE_FAIL
    get:
      tags:
        - Compact Semantic Credentials Apple Pass templates
      summary: Retrieve an Apple Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Apple Pass template ID
      responses:
        '200':
          description: Apple Pass template retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Apple digital pass
                      template. You will use it as the `templateId` when
                      formatting a Compact Credential as an Apple Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: certificate_of_participation.pkpass
                      teamIdentifier:
                        type: string
                        example: GH5P43ABC
                      passTypeIdentifier:
                        type: string
                        example: pass.myproject.participation.pk
                title: ApplePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: retrieveSCApplePassTemplate
      description: |-
        Retrieves an existing Apple Pass template by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_RETRIEVE_START
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_RETRIEVE_FAIL
    delete:
      tags:
        - Compact Semantic Credentials Apple Pass templates
      summary: Delete an Apple Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Apple Pass template ID
      responses:
        '204':
          description: Apple Pass template deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: deleteSCApplePassTemplate
      description: |-
        Deletes an existing Apple Pass template by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_DELETE_START
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_DELETE_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_TEMPLATE_DELETE_FAIL
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Template ID
  /v2/credentials/compact-semantic/digitalpass/google/templates:
    post:
      tags:
        - Compact Semantic Credentials Google Pass templates
      summary: Create a Google Pass template
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Google Pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                issuerId:
                  type: string
                  description: Google Wallet Pass signer issuer ID.
                  example: '3388000000012346000'
                serviceAccountClientEmail:
                  type: string
                  description: >-
                    Email address of the Google Cloud Platform service account
                    for accessing the Google Pay Passes API.
                  example: app-user@myproject.iam.gserviceaccount.com
                serviceAccountPrivateKey:
                  type: string
                  description: >-
                    Private key PEM of the Google Cloud Platform service
                    account.
              required:
                - name
                - template
                - issuerId
                - serviceAccountClientEmail
                - serviceAccountPrivateKey
              title: GooglePassTemplateRequest
      responses:
        '201':
          description: Google Pass template created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Google Pass template.
                      You will use it as the `templateId` when formatting a
                      Compact Credential as a Google Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      issuerId:
                        type: string
                        example: '3388000000012346000'
                      serviceAccountClientEmail:
                        type: string
                        example: app-user@myproject.iam.gserviceaccount.com
                      payPassId:
                        type: string
                        example: >-
                          3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                title: GooglePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: createSCGooglePassTemplate
      description: >-
        Creates a Google Pass template based on the provided `.zip` file. Refer
        to our [Design a Google Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/google-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_CREATE_FAIL
    get:
      tags:
        - Compact Semantic Credentials Google Pass templates
      summary: Retrieve all Google Pass templates
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
      responses:
        '200':
          description: Google Pass templates retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                          description: >-
                            This is a unique identifier for this Google Pass
                            template. You will use it as the `templateId` when
                            formatting a Compact Credential as a Google Pass.
                        passType:
                          description: Digital pass type
                          type: string
                          enum:
                            - apple
                            - google
                          title: DigitalPassType
                        name:
                          type: string
                          example: Certificate of participation
                        metadata:
                          type: object
                          properties:
                            issuerId:
                              type: string
                              example: '3388000000012346000'
                            serviceAccountClientEmail:
                              type: string
                              example: app-user@myproject.iam.gserviceaccount.com
                            payPassId:
                              type: string
                              example: >-
                                3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                      title: GooglePassTemplateResponse
                title: GooglePassTemplatesResponse
                description: ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: getSCGooglePassTemplates
      description: |-
        Retrieves a list of all Google Pass templates available on your tenant.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_RETRIEVE_LIST_START
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_RETRIEVE_LIST_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_RETRIEVE_LIST_FAIL
    parameters: []
  /v2/credentials/compact-semantic/digitalpass/google/templates/{id}:
    put:
      tags:
        - Compact Semantic Credentials Google Pass templates
      summary: Update a Google Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Google Pass template ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                template:
                  type: string
                  format: binary
                  description: Includes your template files.
                name:
                  type: string
                  description: Insert a name to identify this Google Pass template.
                  example: Certificate of participation
                  minLength: 1
                  maxLength: 1024
                issuerId:
                  type: string
                  description: Google Wallet Pass signer issuer ID.
                  example: '3388000000012346000'
                serviceAccountClientEmail:
                  type: string
                  description: >-
                    Email address of the Google Cloud Platform service account
                    for accessing the Google Pay Passes API.
                  example: app-user@myproject.iam.gserviceaccount.com
                serviceAccountPrivateKey:
                  type: string
                  description: >-
                    Private key PEM of the Google Cloud Platform service
                    account.
              required:
                - name
                - template
                - issuerId
                - serviceAccountClientEmail
                - serviceAccountPrivateKey
              title: GooglePassTemplateRequest
      responses:
        '200':
          description: Google Pass template updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Google Pass template.
                      You will use it as the `templateId` when formatting a
                      Compact Credential as a Google Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      issuerId:
                        type: string
                        example: '3388000000012346000'
                      serviceAccountClientEmail:
                        type: string
                        example: app-user@myproject.iam.gserviceaccount.com
                      payPassId:
                        type: string
                        example: >-
                          3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                title: GooglePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
      operationId: updateSCGooglePassTemplate
      description: >-
        Updates a existing Google Pass template by providing its ID and a `.zip`
        file. Refer to our [Design a Google Pass
        template](https://learn.mattr.global/tutorials/create/compact-credentials/template-management/google-digital-pass-design-guideline)
        tutorial for more information on how to design the template and how to
        structure the `.zip` file.


        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_UPDATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_UPDATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_UPDATE_FAIL
    get:
      tags:
        - Compact Semantic Credentials Google Pass templates
      summary: Retrieve a Google Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Google Pass template ID
      responses:
        '200':
          description: Google Pass templated retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                    description: >-
                      This is a unique identifier for this Google Pass template.
                      You will use it as the `templateId` when formatting a
                      Compact Credential as a Google Pass.
                  passType:
                    description: Digital pass type
                    type: string
                    enum:
                      - apple
                      - google
                    title: DigitalPassType
                  name:
                    type: string
                    example: Certificate of participation
                  metadata:
                    type: object
                    properties:
                      issuerId:
                        type: string
                        example: '3388000000012346000'
                      serviceAccountClientEmail:
                        type: string
                        example: app-user@myproject.iam.gserviceaccount.com
                      payPassId:
                        type: string
                        example: >-
                          3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
                title: GooglePassTemplateResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: retrieveSCGooglePassTemplate
      description: |-
        Retrieves an existing Google Pass template by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_RETRIEVE_START
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_RETRIEVE_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_RETRIEVE_FAIL
    delete:
      tags:
        - Compact Semantic Credentials Google Pass templates
      summary: Delete a Google Pass template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Google Pass template ID
      responses:
        '204':
          description: Google Pass template deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: deleteSCGooglePassTemplate
      description: |-
        Delete a Google Pay Pass template by ID

        ### **Analytic events**
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_DELETE_START
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_DELETE_SUCCESS
        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_TEMPLATE_DELETE_FAIL
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Template ID
  /v2/credentials/compact-semantic/digitalpass/apple:
    post:
      tags:
        - Compact Semantic Credentials Issuance
      summary: Format a Compact Semantic Credential as an Apple Pass
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              format: object
              properties:
                templateId:
                  type: string
                  description: >-
                    Use the `id` of the template to be used to format this
                    credential.
                  example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  minLength: 1
                payload:
                  type: string
                  description: >-
                    String payload representation of the encoded Compact
                    Credential.
                  example: '{payload}'
              title: CreateDigitalPassRequest
              description: ''
            examples:
              Generate Apple Pass:
                value:
                  templateId: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  payload: '{payload}'
      responses:
        '200':
          description: Apple Pass created
          content:
            application/vnd.apple.pkpass:
              schema:
                type: string
                description: The generated Apple Pass `.pkpass` file.
                title: CreateApplePassResponse
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: generateSCApplePass
      description: >-
        Returns an Apple Pass representation of a provided Compact Semantic
        Credential based on an existing Apple Pass template.


        > The request will fail if the provided credential isn't valid or has
        expired.

        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_APPLE_PASS_CREATE_FAIL
    parameters: []
  /v2/credentials/compact-semantic/digitalpass/google:
    post:
      tags:
        - Compact Semantic Credentials Issuance
      summary: Format a Compact Semantic Credential as a Google Pass
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              format: object
              properties:
                templateId:
                  type: string
                  description: >-
                    Use the `id` of the template to be used to format this
                    credential.
                  example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  minLength: 1
                payload:
                  type: string
                  description: >-
                    String payload representation of the encoded Compact
                    Credential.
                  example: '{payload}'
              title: CreateDigitalPassRequest
              description: ''
            examples:
              Generate Google Pay Pass:
                value:
                  templateId: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                  payload: '{payload}'
      responses:
        '200':
          description: Google Pass created
          content:
            application/json:
              schema:
                description: The URL to retrieve the Google Pass from.
                format: object
                properties:
                  redirectTo:
                    type: string
                    description: >-
                      Redirect URL to download the Google Pass to the Google
                      Wallet.
                    example: https://pay.google.com/gp/v/save/{jwt}
                title: CreateGooglePassResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: createSCDigitalPass
      description: >-
        Returns a Google Pass representation of a provided Compact Credential
        based on an existing Google Pass template.


        > The request will fail if the provided credential isn't valid or has
        expired.

        ### **Analytic events**

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_CREATE_START

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_CREATE_SUCCESS

        * CREDENTIAL_COMPACT_SEMANTIC_GOOGLE_PASS_CREATE_FAIL
    parameters: []
  /v2/credentials/mobile/iacas:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: CreateIacaRequest
              type: object
              properties:
                commonName:
                  type: string
                  default: '{tenantHost} IACA'
                  description: >-
                    This optional parameter indicates the common name of the
                    IACA certificate. When specified, the value must be a valid
                    `PrintableString`. If not provided and a custom domain is
                    configured and verified, the custom domain is used. If no
                    custom domain is configured, the tenant subdomain is used.
                  example: https://{tenant-subdomain}.vii.mattr.global IACA
                country:
                  type: string
                  example: NZ
                  description: >-
                    This optional parameter indicates the issuer country. If not
                    provided, a country is selected based on the region of the
                    tenant subdomain cloud host. When specified, the value must
                    be uppercase and a valid country code as per [ISO 3166-1
                    alpha-2](https://www.iso.org/iso-3166-country-codes.html).
                notAfter:
                  type: string
                  example: '2034-09-26'
                  description: >-
                    This optional parameter indicates the date after which the
                    IACA should no longer be used as a source of trust. When
                    omitted, defaults to 10 years from date of issuance.
            example:
              commonName: https://{tenant-subdomain}.vii.mattr.global IACA
              country: NZ
              notAfter: '2034-09-26'
      tags:
        - IACA
      summary: Create an IACA
      responses:
        '201':
          description: IACA created
          content:
            application/json:
              schema:
                title: IacaResponse
                type: object
                required:
                  - id
                  - certificateData
                  - publicKeyJwk
                  - certificateFingerprint
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique identifier of the created IACA.
                  certificatePem:
                    type: string
                    example: "-----BEGIN CERTIFICATE-----\r\nMIICDjCCAbSgAwIBAgIKdeZsA5NPKimuAzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0zMzA5\r\nMDgyMzM0MjJaMCIxIDAJBgNVBAYTAk5aMBMGA1UEAxMMRXhhbXBsZSBJQUNBMFkw\r\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEBbK7JKKFMWuu8kHQK2qaML+MQ0Ykk3Qg\r\n/p3TC6lQKvYJozPSpLXbJQIzMPq9u/dG+j4vq1iX/G/jFIwfiEiKEqOB0TCBzjAS\r\nBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIABjAdBgNVHQ4EFgQU9zTh\r\nKsqFxAgRJDDGW1au+ewJK6owHgYDVR0SBBcwFYYTaHR0cHM6Ly9leGFtcGxlLmNv\r\nbTBpBgNVHR8EYjBgMF6gXKBahlhodHRwczovL2V4YW1wbGUuY29tL3YyL2NyZWRl\r\nbnRpYWxzL21vYmlsZS9pYWNhcy8yZTg5YzE1Ni0zMWQ1LTQ3ODMtYmQ1OS05MDU1\r\nYjVmOGU3ZDIvY3JsMAoGCCqGSM49BAMCA0gAMEUCIQDD+eU8iOsYYC0v41L94fhF\r\nZ0brPo4gx2aRxrhE3NLFpwIgIgHCPBXJ+JICJg3K7dEsr153So4SEZzAA1rRn4eF\r\nvkM=\r\n-----END CERTIFICATE-----\r\n"
                    description: Certificate PEM format.
                  certificateData:
                    title: IacaCertificateData
                    type: object
                    required:
                      - notAfter
                      - notBefore
                      - country
                      - commonName
                    properties:
                      notAfter:
                        type: string
                        format: date
                        example: '2034-09-26'
                        description: >-
                          IACA's expiry date (defaults to 10 years from issuance
                          if not provided in the request).
                      notBefore:
                        type: string
                        format: date
                        example: '2023-09-26'
                        description: IACA’s active from date.
                      country:
                        type: string
                        example: NZ
                        description: >-
                          IACA’s issuer country code, based on the IACA creation
                          request.
                      commonName:
                        type: string
                        default: '{tenantHost} IACA'
                        description: IACA's name, based on the IACA creation request.
                        example: https://{tenant-subdomain}.vii.mattr.global IACA
                  publicKeyJwk:
                    type: object
                    description: JWK format of the IACA public key.
                    example:
                      kty: EC
                      crv: P-256
                      x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
                      'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorResponse
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
      operationId: create-mobile-credential-iaca
      description: >-
        Creates a new IACA that can be used to sign new Document Signer
        Certificates (DSCs).


        ### **Analytic events**

        * MOBILE_CREDENTIAL_IACA_CREATE_START

        * MOBILE_CREDENTIAL_IACA_CREATE_SUCCESS

        * MOBILE_CREDENTIAL_IACA_CREATE_FAIL
    get:
      tags:
        - IACA
      summary: Retrieve all IACAs
      responses:
        '200':
          description: IACAs Retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      title: IacaResponse
                      type: object
                      required:
                        - id
                        - certificateData
                        - publicKeyJwk
                        - certificateFingerprint
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: Unique identifier of the created IACA.
                        certificatePem:
                          type: string
                          example: "-----BEGIN CERTIFICATE-----\r\nMIICDjCCAbSgAwIBAgIKdeZsA5NPKimuAzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0zMzA5\r\nMDgyMzM0MjJaMCIxIDAJBgNVBAYTAk5aMBMGA1UEAxMMRXhhbXBsZSBJQUNBMFkw\r\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEBbK7JKKFMWuu8kHQK2qaML+MQ0Ykk3Qg\r\n/p3TC6lQKvYJozPSpLXbJQIzMPq9u/dG+j4vq1iX/G/jFIwfiEiKEqOB0TCBzjAS\r\nBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIABjAdBgNVHQ4EFgQU9zTh\r\nKsqFxAgRJDDGW1au+ewJK6owHgYDVR0SBBcwFYYTaHR0cHM6Ly9leGFtcGxlLmNv\r\nbTBpBgNVHR8EYjBgMF6gXKBahlhodHRwczovL2V4YW1wbGUuY29tL3YyL2NyZWRl\r\nbnRpYWxzL21vYmlsZS9pYWNhcy8yZTg5YzE1Ni0zMWQ1LTQ3ODMtYmQ1OS05MDU1\r\nYjVmOGU3ZDIvY3JsMAoGCCqGSM49BAMCA0gAMEUCIQDD+eU8iOsYYC0v41L94fhF\r\nZ0brPo4gx2aRxrhE3NLFpwIgIgHCPBXJ+JICJg3K7dEsr153So4SEZzAA1rRn4eF\r\nvkM=\r\n-----END CERTIFICATE-----\r\n"
                          description: Certificate PEM format.
                        certificateData:
                          title: IacaCertificateData
                          type: object
                          required:
                            - notAfter
                            - notBefore
                            - country
                            - commonName
                          properties:
                            notAfter:
                              type: string
                              format: date
                              example: '2034-09-26'
                              description: >-
                                IACA's expiry date (defaults to 10 years from
                                issuance if not provided in the request).
                            notBefore:
                              type: string
                              format: date
                              example: '2023-09-26'
                              description: IACA’s active from date.
                            country:
                              type: string
                              example: NZ
                              description: >-
                                IACA’s issuer country code, based on the IACA
                                creation request.
                            commonName:
                              type: string
                              default: '{tenantHost} IACA'
                              description: IACA's name, based on the IACA creation request.
                              example: https://{tenant-subdomain}.vii.mattr.global IACA
                        publicKeyJwk:
                          type: object
                          description: JWK format of the IACA public key.
                          example:
                            kty: EC
                            crv: P-256
                            x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
                            'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
                  nextCursor:
                    type: string
      operationId: list-mobile-credential-iaca
      description: |-
        Retrieves all existing IACAs from the tenant.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_IACA_RETRIEVE_LIST_START
        * MOBILE_CREDENTIAL_IACA_RETRIEVE_LIST_SUCCESS
        * MOBILE_CREDENTIAL_IACA_RETRIEVE_LIST_FAIL
  /v2/credentials/mobile/iacas/{iacaId}:
    delete:
      parameters:
        - name: iacaId
          required: true
          in: path
          description: IACA ID
          schema:
            type: string
            format: uuid
            example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
      tags:
        - IACA
      summary: Delete an IACA
      responses:
        '204':
          description: IACA deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorResponse
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: IACA not found
          content:
            application/json:
              schema:
                title: ErrorResponse
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
              examples:
                Iaca not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: delete-mobile-credential-iaca
      description: |-
        Deletes an existing IACA by providing its ID.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_IACA_DELETE_START
        * MOBILE_CREDENTIAL_IACA_DELETE_LIST_SUCCESS
        * MOBILE_CREDENTIAL_IACA_DELETE_LIST_FAIL
  /v2/credentials/mobile/documentsigners:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: DocumentSignerRequest
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
                  description: >-
                    This required parameter defines the status of the created
                    DSC. Only active DSCs (`true`) can be used to sign Mobile
                    Credentials.
                commonName:
                  type: string
                  example: https://{tenant-subdomain}.vii.mattr.global Document Signer
                  description: >-
                    This optional parameter indicates the common name of the DSC
                    certificate. When specified, the value must be a valid
                    `PrintableString`. If not provided and a custom domain is
                    configured and verified, the custom domain is used. If no
                    custom domain is configured, the tenant subdomain is used.
                notAfter:
                  type: string
                  example: '2034-09-26'
                  description: >-
                    Optional date after which the DSC can no longer be used to
                    sign Mobile Credentials. If not provided, defaults to 365
                    days from issuance date. Maximum value can be 457 days from
                    issuance date.
      tags:
        - DSCs
      summary: Create a DSC
      responses:
        '201':
          description: DSC created
          content:
            application/json:
              schema:
                title: DocumentSignerResponse
                type: object
                required:
                  - id
                  - active
                  - publicKey
                  - certificatePem
                  - certificateFingerprint
                  - certificateData
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Each DSC created on MATTR VII will have a unique
                      identifier which must be provided when using this DSC to
                      sign a Mobile Credential.
                  active:
                    type: boolean
                    description: >-
                      Indicates the DSC status. Only active DSCs (`true`) can be
                      used to sign Mobile Credentials.
                  publicKey:
                    type: object
                    description: JWK format of the DSC public key.
                    example:
                      kty: EC
                      crv: P-256
                      x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
                      'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
                  certificatePem:
                    type: string
                    description: Certificate PEM format.
                    example: >-
                      -----BEGIN
                      CERTIFICATE-----\r\nMIICbzCCAhSgAwIBAgIKfS7sskyJEh+DOzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0yNDA5\r\nMTAyMzM0MjJaMDExLzAJBgNVBAYTAk5aMCIGA1UEAxMbZXhhbXBsZS5jb20gRG9j\r\ndW1lbnQgU2lnbmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7fa+jv9zCtHQ\r\nmKn7o1dS6lBHD5thlhPqjlx7qEfqy8Im9AcQJDal2sr/fUxhHwf/G4ublS7AL04U\r\n73dzr/ozxaOCASEwggEdMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLdNNPTmPxt0\r\nLqvlZnV/QL86MXOxMB8GA1UdIwQYMBaAFPc04SrKhcQIESQwxltWrvnsCSuqMA4G\r\nA1UdDwEB/wQEAwIAgDAeBgNVHREEFzAVhhNodHRwczovL2V4YW1wbGUuY29tMB4G\r\nA1UdEgQXMBWGE2h0dHBzOi8vZXhhbXBsZS5jb20waQYDVR0fBGIwYDBeoFygWoZY\r\naHR0cHM6Ly9leGFtcGxlLmNvbS92Mi9jcmVkZW50aWFscy9tb2JpbGUvaWFjYXMv\r\nMmU4OWMxNTYtMzFkNS00NzgzLWJkNTktOTA1NWI1ZjhlN2QyL2NybDASBgNVHSUE\r\nCzAJBgcogYxdBQECMAoGCCqGSM49BAMCA0kAMEYCIQCfgn6+QoNfDVelJANl+Jp9\r\ncq7X9paZylfnI6UGr1FM6gIhAIzhiyclDa8+/ZSRfu7KfgGrNRaJ8YQ6vevskJls\r\nIavC\r\n-----END
                      CERTIFICATE-----\r\n
                  certificateFingerprint:
                    type: string
                    description: >-
                      DSC Hash that includes all certificate data and its
                      signature.
                    example: >-
                      f6cad6e579d70b3973efa60624af731a580d1a11a7579e70f2f10f059dc86172
                  certificateData:
                    title: DocumentSignerCertificateData
                    type: object
                    required:
                      - notAfter
                      - notBefore
                      - country
                      - commonName
                    properties:
                      notAfter:
                        type: string
                        format: date
                        example: '2034-09-26'
                      notBefore:
                        type: string
                        format: date
                        example: '2023-09-30'
                      country:
                        type: string
                        example: NZ
                      commonName:
                        type: string
                        default: '{tenantHost} Document Signer'
                        example: >-
                          https://{tenant-subdomain}.vii.mattr.global Document
                          Signer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorResponse
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
      operationId: create-mobile-credential-document-signer
      description: >-
        Creates a new Document Signer Certificate (DSC) that can be used to sign
        new Mobile Credentials.


        ### **Analytic events**

        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_CREATE_START

        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_CREATE_SUCCESS

        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_CREATE_FAIL
    get:
      tags:
        - DSCs
      summary: Retrieve all DSCs
      responses:
        '200':
          description: DSCs retrieved
          content:
            application/json:
              schema:
                title: ListDocumentSignersResponse
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      title: DocumentSignerResponse
                      type: object
                      required:
                        - id
                        - active
                        - publicKey
                        - certificatePem
                        - certificateFingerprint
                        - certificateData
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: >-
                            Each DSC created on MATTR VII will have a unique
                            identifier which must be provided when using this
                            DSC to sign a Mobile Credential.
                        active:
                          type: boolean
                          description: >-
                            Indicates the DSC status. Only active DSCs (`true`)
                            can be used to sign Mobile Credentials.
                        publicKey:
                          type: object
                          description: JWK format of the DSC public key.
                          example:
                            kty: EC
                            crv: P-256
                            x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
                            'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
                        certificatePem:
                          type: string
                          description: Certificate PEM format.
                          example: >-
                            -----BEGIN
                            CERTIFICATE-----\r\nMIICbzCCAhSgAwIBAgIKfS7sskyJEh+DOzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0yNDA5\r\nMTAyMzM0MjJaMDExLzAJBgNVBAYTAk5aMCIGA1UEAxMbZXhhbXBsZS5jb20gRG9j\r\ndW1lbnQgU2lnbmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7fa+jv9zCtHQ\r\nmKn7o1dS6lBHD5thlhPqjlx7qEfqy8Im9AcQJDal2sr/fUxhHwf/G4ublS7AL04U\r\n73dzr/ozxaOCASEwggEdMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLdNNPTmPxt0\r\nLqvlZnV/QL86MXOxMB8GA1UdIwQYMBaAFPc04SrKhcQIESQwxltWrvnsCSuqMA4G\r\nA1UdDwEB/wQEAwIAgDAeBgNVHREEFzAVhhNodHRwczovL2V4YW1wbGUuY29tMB4G\r\nA1UdEgQXMBWGE2h0dHBzOi8vZXhhbXBsZS5jb20waQYDVR0fBGIwYDBeoFygWoZY\r\naHR0cHM6Ly9leGFtcGxlLmNvbS92Mi9jcmVkZW50aWFscy9tb2JpbGUvaWFjYXMv\r\nMmU4OWMxNTYtMzFkNS00NzgzLWJkNTktOTA1NWI1ZjhlN2QyL2NybDASBgNVHSUE\r\nCzAJBgcogYxdBQECMAoGCCqGSM49BAMCA0kAMEYCIQCfgn6+QoNfDVelJANl+Jp9\r\ncq7X9paZylfnI6UGr1FM6gIhAIzhiyclDa8+/ZSRfu7KfgGrNRaJ8YQ6vevskJls\r\nIavC\r\n-----END
                            CERTIFICATE-----\r\n
                        certificateFingerprint:
                          type: string
                          description: >-
                            DSC Hash that includes all certificate data and its
                            signature.
                          example: >-
                            f6cad6e579d70b3973efa60624af731a580d1a11a7579e70f2f10f059dc86172
                        certificateData:
                          title: DocumentSignerCertificateData
                          type: object
                          required:
                            - notAfter
                            - notBefore
                            - country
                            - commonName
                          properties:
                            notAfter:
                              type: string
                              format: date
                              example: '2034-09-26'
                            notBefore:
                              type: string
                              format: date
                              example: '2023-09-30'
                            country:
                              type: string
                              example: NZ
                            commonName:
                              type: string
                              default: '{tenantHost} Document Signer'
                              example: >-
                                https://{tenant-subdomain}.vii.mattr.global
                                Document Signer
                  nextCursor:
                    type: string
      operationId: list-mobile-credential-document-signers
      description: |-
        Retrieves all existing DSCs from the tenant.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_RETRIEVE_LIST_START
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_RETRIEVE_LIST_SUCCESS
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_RETRIEVE_LIST_FAIL
  /v2/credentials/mobile/documentsigners/{documentSignerId}:
    put:
      parameters:
        - name: documentSignerId
          required: true
          in: path
          description: DSC ID
          schema:
            type: string
            format: uuid
            example: d2c9f2aa-fc69-4fbc-9b85-0c00591d72f6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: UpdateDocumentSignerRequest
              type: object
              required:
                - active
              properties:
                active:
                  description: >-
                    This required parameter defines the status of the created
                    DSC. Only active DSCs can be used to sign Mobile
                    Credentials.
                  type: boolean
      tags:
        - DSCs
      summary: Update a DSC
      responses:
        '200':
          description: DSC updated
          content:
            application/json:
              schema:
                title: DocumentSignerResponse
                type: object
                required:
                  - id
                  - active
                  - publicKey
                  - certificatePem
                  - certificateFingerprint
                  - certificateData
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Each DSC created on MATTR VII will have a unique
                      identifier which must be provided when using this DSC to
                      sign a Mobile Credential.
                  active:
                    type: boolean
                    description: >-
                      Indicates the DSC status. Only active DSCs (`true`) can be
                      used to sign Mobile Credentials.
                  publicKey:
                    type: object
                    description: JWK format of the DSC public key.
                    example:
                      kty: EC
                      crv: P-256
                      x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
                      'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
                  certificatePem:
                    type: string
                    description: Certificate PEM format.
                    example: >-
                      -----BEGIN
                      CERTIFICATE-----\r\nMIICbzCCAhSgAwIBAgIKfS7sskyJEh+DOzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0yNDA5\r\nMTAyMzM0MjJaMDExLzAJBgNVBAYTAk5aMCIGA1UEAxMbZXhhbXBsZS5jb20gRG9j\r\ndW1lbnQgU2lnbmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7fa+jv9zCtHQ\r\nmKn7o1dS6lBHD5thlhPqjlx7qEfqy8Im9AcQJDal2sr/fUxhHwf/G4ublS7AL04U\r\n73dzr/ozxaOCASEwggEdMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLdNNPTmPxt0\r\nLqvlZnV/QL86MXOxMB8GA1UdIwQYMBaAFPc04SrKhcQIESQwxltWrvnsCSuqMA4G\r\nA1UdDwEB/wQEAwIAgDAeBgNVHREEFzAVhhNodHRwczovL2V4YW1wbGUuY29tMB4G\r\nA1UdEgQXMBWGE2h0dHBzOi8vZXhhbXBsZS5jb20waQYDVR0fBGIwYDBeoFygWoZY\r\naHR0cHM6Ly9leGFtcGxlLmNvbS92Mi9jcmVkZW50aWFscy9tb2JpbGUvaWFjYXMv\r\nMmU4OWMxNTYtMzFkNS00NzgzLWJkNTktOTA1NWI1ZjhlN2QyL2NybDASBgNVHSUE\r\nCzAJBgcogYxdBQECMAoGCCqGSM49BAMCA0kAMEYCIQCfgn6+QoNfDVelJANl+Jp9\r\ncq7X9paZylfnI6UGr1FM6gIhAIzhiyclDa8+/ZSRfu7KfgGrNRaJ8YQ6vevskJls\r\nIavC\r\n-----END
                      CERTIFICATE-----\r\n
                  certificateFingerprint:
                    type: string
                    description: >-
                      DSC Hash that includes all certificate data and its
                      signature.
                    example: >-
                      f6cad6e579d70b3973efa60624af731a580d1a11a7579e70f2f10f059dc86172
                  certificateData:
                    title: DocumentSignerCertificateData
                    type: object
                    required:
                      - notAfter
                      - notBefore
                      - country
                      - commonName
                    properties:
                      notAfter:
                        type: string
                        format: date
                        example: '2034-09-26'
                      notBefore:
                        type: string
                        format: date
                        example: '2023-09-30'
                      country:
                        type: string
                        example: NZ
                      commonName:
                        type: string
                        default: '{tenantHost} Document Signer'
                        example: >-
                          https://{tenant-subdomain}.vii.mattr.global Document
                          Signer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorResponse
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
        '404':
          description: DSC not Found
      operationId: update-mobile-credential-document-signer
      description: |-
        Updates an existing DSC by providing its ID and `active` parameter.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_UPDATE_START
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_UPDATE_SUCCESS
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_UPDATE_FAIL
    get:
      parameters:
        - name: documentSignerId
          required: true
          in: path
          description: DSC ID
          schema:
            type: string
            format: uuid
            example: d2c9f2aa-fc69-4fbc-9b85-0c00591d72f6
      tags:
        - DSCs
      summary: Retrieve a DSC
      responses:
        '200':
          description: DSC retrieved
          content:
            application/json:
              schema:
                title: DocumentSignerResponse
                type: object
                required:
                  - id
                  - active
                  - publicKey
                  - certificatePem
                  - certificateFingerprint
                  - certificateData
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Each DSC created on MATTR VII will have a unique
                      identifier which must be provided when using this DSC to
                      sign a Mobile Credential.
                  active:
                    type: boolean
                    description: >-
                      Indicates the DSC status. Only active DSCs (`true`) can be
                      used to sign Mobile Credentials.
                  publicKey:
                    type: object
                    description: JWK format of the DSC public key.
                    example:
                      kty: EC
                      crv: P-256
                      x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
                      'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
                  certificatePem:
                    type: string
                    description: Certificate PEM format.
                    example: >-
                      -----BEGIN
                      CERTIFICATE-----\r\nMIICbzCCAhSgAwIBAgIKfS7sskyJEh+DOzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0yNDA5\r\nMTAyMzM0MjJaMDExLzAJBgNVBAYTAk5aMCIGA1UEAxMbZXhhbXBsZS5jb20gRG9j\r\ndW1lbnQgU2lnbmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7fa+jv9zCtHQ\r\nmKn7o1dS6lBHD5thlhPqjlx7qEfqy8Im9AcQJDal2sr/fUxhHwf/G4ublS7AL04U\r\n73dzr/ozxaOCASEwggEdMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLdNNPTmPxt0\r\nLqvlZnV/QL86MXOxMB8GA1UdIwQYMBaAFPc04SrKhcQIESQwxltWrvnsCSuqMA4G\r\nA1UdDwEB/wQEAwIAgDAeBgNVHREEFzAVhhNodHRwczovL2V4YW1wbGUuY29tMB4G\r\nA1UdEgQXMBWGE2h0dHBzOi8vZXhhbXBsZS5jb20waQYDVR0fBGIwYDBeoFygWoZY\r\naHR0cHM6Ly9leGFtcGxlLmNvbS92Mi9jcmVkZW50aWFscy9tb2JpbGUvaWFjYXMv\r\nMmU4OWMxNTYtMzFkNS00NzgzLWJkNTktOTA1NWI1ZjhlN2QyL2NybDASBgNVHSUE\r\nCzAJBgcogYxdBQECMAoGCCqGSM49BAMCA0kAMEYCIQCfgn6+QoNfDVelJANl+Jp9\r\ncq7X9paZylfnI6UGr1FM6gIhAIzhiyclDa8+/ZSRfu7KfgGrNRaJ8YQ6vevskJls\r\nIavC\r\n-----END
                      CERTIFICATE-----\r\n
                  certificateFingerprint:
                    type: string
                    description: >-
                      DSC Hash that includes all certificate data and its
                      signature.
                    example: >-
                      f6cad6e579d70b3973efa60624af731a580d1a11a7579e70f2f10f059dc86172
                  certificateData:
                    title: DocumentSignerCertificateData
                    type: object
                    required:
                      - notAfter
                      - notBefore
                      - country
                      - commonName
                    properties:
                      notAfter:
                        type: string
                        format: date
                        example: '2034-09-26'
                      notBefore:
                        type: string
                        format: date
                        example: '2023-09-30'
                      country:
                        type: string
                        example: NZ
                      commonName:
                        type: string
                        default: '{tenantHost} Document Signer'
                        example: >-
                          https://{tenant-subdomain}.vii.mattr.global Document
                          Signer
        '404':
          description: DSC not Found
      operationId: retrieve-mobile-credential-document-signer
      description: |-
        Retrieves an existing DSC by providing its ID.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_RETRIEVE_START
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_RETRIEVE_SUCCESS
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_RETRIEVE_FAIL
    delete:
      parameters:
        - name: documentSignerId
          required: true
          in: path
          description: DSC ID
          schema:
            type: string
            format: uuid
            example: d2c9f2aa-fc69-4fbc-9b85-0c00591d72f6
      tags:
        - DSCs
      summary: Delete a DSC
      responses:
        '204':
          description: DSC deleted
        '404':
          description: DSC not Found
      operationId: remote-mobile-credential-document-signer
      description: |-
        Deletes an existing DSC by providing its ID.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_DELETE_START
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_DELETE_SUCCESS
        * MOBILE_CREDENTIAL_DOCUMENT_SIGNER_DELETE_FAIL
  /v2/credentials/mobile/sign:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: SignRequest
              type: object
              required:
                - payload
              properties:
                payload:
                  title: SignRequestPayload
                  type: object
                  required:
                    - deviceKeyInfo
                    - docType
                    - validityInfo
                    - itemsToSign
                  properties:
                    deviceKeyInfo:
                      type: object
                      properties:
                        devicekey:
                          type: object
                          example:
                            kty: EC
                            crv: P-256
                            x: jKAl2NpqH74ZxdeTKFzyBZx2wApbu0YKjENFQAAxMsM
                            'y': QilxqwP16cUuprqeVptoCTqJVWzQYJi0J_32h_BwrCY
                    docType:
                      type: string
                      example: org.iso.18013.5.1.mDL
                    validityInfo:
                      title: ValidityInfo
                      type: object
                      required:
                        - validUntil
                      properties:
                        validFrom:
                          type: string
                          format: date-time
                        validUntil:
                          type: string
                          format: date-time
                        expectedUpdate:
                          type: string
                          format: date-time
                    itemsToSign:
                      title: IssuerNamespacesToSign
                      type: object
                      additionalProperties:
                        title: Claim
                        type: object
                        additionalProperties:
                          title: ClaimItem
                          type: object
                          required:
                            - value
                            - type
                          properties:
                            value:
                              type: string
                            type:
                              type: string
                              enum:
                                - boolean
                                - number
                                - string
                                - binary
                                - date
                                - object
                                - array
                      example:
                        org.iso.18013.5.1:
                          given_name:
                            value: John
                            type: string
                          family_name:
                            value: Doe
                            type: string
                    branding:
                      type: object
                      example:
                        name: Example Branding
                        description: Example Branding Description
                        backgroundColor: '#FFFFFF'
                        watermarkImage: data:image/png;base64,{image-data}
                        issuerLogo: data:image/png;base64,{image-data}
                        issuerIcon: data:image/svg+xml;base64,{image-data}
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        backgroundColor:
                          type: string
                        watermarkImage:
                          type: string
                        issuerLogo:
                          type: string
                        issuerIcon:
                          type: string
                documentSignerId:
                  type: string
                  format: uuid
                  description: >-
                    Identifier of the DSC that will be used to sign the Mobile
                    Credential.
      tags:
        - Mobile Credentials Issuance
      summary: Sign a Mobile Credential
      responses:
        '200':
          description: Mobile Credential signed
          content:
            application/json:
              schema:
                title: SignResponse
                type: object
                required:
                  - encoded
                  - decoded
                properties:
                  encoded:
                    type: string
                  decoded:
                    type: object
                    properties:
                      namespaces:
                        type: object
                        description: Contains data elements / credential claims.
                        example:
                          org.iso.18013.5.1:
                            digestID: 10
                            random: K5eA64iprBx903wg0T59Nw==
                            elementIdentifier: given_name
                            elementValue:
                              type: string
                              value: jae
                      issuerAuth:
                        type: string
                        description: >-
                          Base64 encoded string of a COSE signed payload which
                          contains the Mobile Security Object (MSO).
                        example: hEOhASahGCFZAh0wg...
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorResponse
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
      operationId: sign-mobile-credential
      description: >-
        Signs the provided Mobile Credential payload using the referenced
        Document Signer Certificate (DSC).


        ### **Analytic events**

        * MOBILE_CREDENTIAL_SIGN_START

        * MOBILE_CREDENTIAL_SIGN_SUCCESS

        * MOBILE_CREDENTIAL_SIGN_FAIL
  /v2/credentials/mobile/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Mobile Credential ID
    delete:
      tags:
        - Mobile Credentials Management
      summary: Delete Mobile Credential metadata
      responses:
        '204':
          description: Mobile Credential metadata deleted
        '400':
          description: Invalid id parameter format
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Mobile Credential not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: remove-mobile-credential
      description: >-
        Deletes all stored data for an existing Mobile Credential that matches
        the provided ID.


        > Removed credential data cannot be recovered.


        ### **Analytic events**

        * USER_CREDENTIAL_DELETE_START

        * USER_CREDENTIAL_DELETE_SUCCESS

        * USER_CREDENTIAL_DELETE_FAIL
  /v2/credentials/mobile/configurations:
    post:
      operationId: createMobileCredentialConfiguration
      tags:
        - Mobile Credential Configuration
      summary: Create a Mobile Credential configuration
      description: >
        Creates a new Mobile Credential configuration, a specific set of rules
        and parameters that are used to create and validate a particular type of
        verifiable credential. These rules and parameters define how the
        credential is structured and what data it contains when issued.


        ### **Analytic events**

        * MOBILE_CREDENTIAL_CONFIGURATION_CREATE_START

        * MOBILE_CREDENTIAL_CONFIGURATION_CREATE_SUCCESS

        * MOBILE_CREDENTIAL_CONFIGURATION_CREATE_FAIL
      requestBody:
        description: The Mobile Credential configuration payload
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - expiresIn
                - claimMappings
              allOf:
                - type: object
                  properties:
                    type:
                      description: >-
                        Used to differentiate between different Mobile
                        credential configurations on your tenant. Thus, its
                        value must:

                        - Be unique across all Mobile credential configurations
                        on your tenant.

                        - Not be `VerifiableCredential`.
                      type: string
                      minLength: 1
                      maxLength: 1024
                      example: DriverLicence
                    claimMappings:
                      title: ClaimMappings
                      type: object
                      description: >-
                        This is where you specify how to map claims (user
                        attributes) into issued credentials.
                      example:
                        org.iso.18013.5.1:
                          given_name:
                            mapFrom: claims.given_name
                            required: true
                            type: string
                          birth_date:
                            mapFrom: claims.date_of_birth
                            required: true
                            type: dateTime
                      properties:
                        additionalProperties:
                          description: >-
                            Each object corresponds to a claims source and is
                            referenced as a `namespace`.
                          type: object
                          properties:
                            additionalProperties:
                              description: >-
                                Each object corresponds to a claim in the issued
                                credential, and contains fields that control the
                                mapping logic.
                              type: object
                              properties:
                                mapFrom:
                                  type: string
                                  description: >-
                                    Path to the mapped claim in the configured
                                    claims source:

                                    - When using a URL as a claims namespace
                                    identifier, use bracket notation to access
                                    the claim value (e.g. mapFrom:
                                    "claims['https://example.com/claim-name']").

                                    - `mapForm` is optional when `defaultValue`
                                    is provided, as the latter will be used for
                                    all issued credentials. This is referred to
                                    as a **static claim**.
                                  example: claims.given_name
                                type:
                                  type: string
                                  description: >-
                                    Claim data type. `type` is optional when
                                    `defaultValue` is provided.

                                    - `date` must be in YYYY-MM-DD format.

                                    - `dateTime` must be in YYYY-MM-DD HH:MM:SS
                                    format ([ISO
                                    8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                                    compliant).

                                    - `org.iso.18013.5.1.driving_privileges` is
                                    a unique type for Mobile Driver Licences
                                    (mDL) and detail the holder's driving
                                    privileges:
                                      - `issue_date`: In YYYY-MM-DD format.
                                      - `expiry_date`: In YYYY-MM-DD format.
                                      - `vehicle_category_code`
                                  example: string
                                  enum:
                                    - boolean
                                    - number
                                    - string
                                    - binary
                                    - date
                                    - dateTime
                                    - array
                                    - object
                                    - org.iso.18013.5.1.driving_privileges
                                required:
                                  type: boolean
                                  description: >-
                                    Indicates whether the claim is required
                                    (`true`) or not (`false`). When a required
                                    claim is not available, credential issuance
                                    will fail.
                                  default: false
                                defaultValue:
                                  description: >-
                                    Indicates what value is used if `required`
                                    is set to `false` (field is optional) and no
                                    value is provided by the claims source. When
                                    `defaultValue` is provided, `mapFrom` and
                                    `type` are optional.
                                  type: string
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of years, months, weeks,
                        days, hours, minutes and seconds. Note that credential
                        issuance will fail if the credential expiry date is
                        later than that of the [Document Signer Certificate
                        (DSC)](#tag/DSC) used to sign it.
                      properties:
                        years:
                          type: number
                        months:
                          type: number
                          example: 1
                        weeks:
                          type: number
                        days:
                          type: number
                        hours:
                          type: number
                        minutes:
                          type: number
                        seconds:
                          type: number
                - type: object
                  properties:
                    branding:
                      type: object
                      description: Used to apply branding to issued credentials.
                      example:
                        name: Credential name
                        description: Credential Description
                        backgroundColor: '#FFFFFF'
                        watermarkImage: data:image/png;base64,{image-data}
                        issuerLogo: https://example-path-to-image-data.com
                        issuerIcon: data:image/svg+xml;base64,{image-data}
                      properties:
                        name:
                          description: >-
                            Insert a meaningful name for the credential. This
                            string is displayed on the top part of the
                            credential in the holder's digital wallet.
                          type: string
                        description:
                          description: >-
                            Insert a meaningful description for the credential.
                            This string is displayed below the name field on the
                            credential in the holder's digital wallet.
                          type: string
                        backgroundColor:
                          description: >-
                            Insert a colour hex code to use for the credential
                            background color in the holder's digital wallet.
                          type: string
                        watermarkImage:
                          description: >-
                            Watermarks are displayed included as a pattern on
                            the credential in the holder's digital wallet. You
                            can provide either a URL to the image, or a Data URI
                            (base64 encoded) with the following requirements:

                            - URL/URI must be publicly available.

                            - File must be 245x150 px in size.

                            - **svg** and **png** files are supported. We
                            recommend using **svg** files to allow proper
                            scaling across the UI and enable optimal
                            performance.

                            - If no watermark image is provided, a wave pattern
                            is applied to the credentials by default.

                            - The recommended maximum size is 150 KB.
                          type: string
                        issuerLogo:
                          description: >-
                            The issuer logo is displayed on the bottom part of
                            the credential in the holder's digital wallet. When
                            not provided, the issuer's name and `issuerIcon` are
                            used instead. You can provide either a URL to the
                            image, or a Data URI (base64 encoded) with the
                            following requirements:

                            - URL/URI must be publicly available.

                            - File must be 140x42 px in size.

                            - **svg** and **png** files are supported. We
                            recommend using **svg** files to allow proper
                            scaling across the UI and enable optimal
                            performance.

                            - Transparencies are allowed for **svg** and **png**
                            files.

                            - The recommended maximum size is 50 KB.

                            - If no logo is provided, the first letter of the
                            issuer name is displayed instead.
                          type: string
                        issuerIcon:
                          description: >-
                            The issuer icon is displayed next to the issuer's
                            name when the credential is offered to the holder.
                            It is also displayed next to the issuer's name on
                            the bottom part of the credential when `issuerLogo`
                            is not provided. When `issuerIcon` is not provided,
                            the first letter from the issuer name is used
                            instead. You can provide either a URL to the image,
                            or a Data URI (base64 encoded) with the following
                            requirements:

                            - URL/URI must be publicly available.

                            - File must be 32x32 px in size.

                            - **svg** and **png** files are supported. We
                            recommend using **svg** files to allow proper
                            scaling across the UI and enable optimal
                            performance.

                            - Transparencies are allowed for **svg** and **png**
                            files.

                            - The recommended maximum size is 15 KB.
                          type: string
              title: CreateCredentialConfigurationRequest
      responses:
        '201':
          description: Mobile Credential configuration created
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - expiresIn
                  - claimMappings
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies the created credential
                          configuration. This identifier can be used to create
                          an offer based on this credential configuration, or to
                          retrieve, update or remove the credential
                          configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                      branding:
                        type: object
                        description: Credential branding information
                        example:
                          name: Credential name
                          description: Credential Description
                          backgroundColor: '#FFFFFF'
                          watermarkImage: data:image/png;base64,{image-data}
                          issuerLogo: data:image/png;base64,{image-data}
                          issuerIcon: data:image/svg+xml;base64,{image-data}
                        properties:
                          name:
                            description: >-
                              This string is displayed on the top part of the
                              credential in the holder's digital wallet.
                            type: string
                          description:
                            description: >-
                              This string is displayed below the name field on
                              the credential in the holder's digital wallet.
                            type: string
                          backgroundColor:
                            description: >-
                              Colour hex code used for the credential background
                              color in the holder's digital wallet.
                            type: string
                          watermarkImage:
                            description: >-
                              Watermarks are displayed included as a pattern on
                              the credential in the holder's digital wallet. You
                              can provide either a URL to the image, or a Data
                              URI (base64 encoded) with the following
                              requirements:

                              - URL/URI must be publicly available.

                              - File must be 245x150 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - If no watermark image is provided, a wave
                              pattern is applied to the credentials by default.

                              - The recommended maximum size is 150 KB.
                            type: string
                          issuerLogo:
                            description: >-
                              The issuer logo is displayed on the bottom part of
                              the credential in the holder's digital wallet. You
                              can provide either a URL to the image, or a Data
                              URI (base64 encoded) with the following
                              requirements:

                              - URL/URI must be publicly available.

                              - File must be 140x42 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - Transparencies are allowed for **svg** and
                              **png** files.

                              - The recommended maximum size is 50 KB.

                              - If no logo is provided, the first letter of the
                              issuer name is displayed instead.
                            type: string
                          issuerIcon:
                            description: >-
                              The issuer icon is displayed next to the issuer's
                              logo on the bottom part of the credential in the
                              holder's digital wallet. You can provide either a
                              URL to the image, or a Data URI (base64 encoded)
                              with the following requirements:

                              - URL/URI must be publicly available.

                              - File must be 32x32 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - Transparencies are allowed for **svg** and
                              **png** files.

                              - The recommended maximum size is 15 KB.
                            type: string
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different Mobile
                          credential configurations on your tenant. Thus, its
                          value must:

                          - Be unique across all Mobile credential
                          configurations on your tenant.

                          - Not be `VerifiableCredential`.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: DriverLicence
                      claimMappings:
                        title: ClaimMappings
                        type: object
                        description: >-
                          This is where you specify how to map claims (user
                          attributes) into issued credentials.
                        example:
                          org.iso.18013.5.1:
                            given_name:
                              mapFrom: claims.given_name
                              required: true
                              type: string
                            birth_date:
                              mapFrom: claims.date_of_birth
                              required: true
                              type: dateTime
                        properties:
                          additionalProperties:
                            description: >-
                              Each object corresponds to a claims source and is
                              referenced as a `namespace`.
                            type: object
                            properties:
                              additionalProperties:
                                description: >-
                                  Each object corresponds to a claim in the
                                  issued credential, and contains fields that
                                  control the mapping logic.
                                type: object
                                properties:
                                  mapFrom:
                                    type: string
                                    description: >-
                                      Path to the mapped claim in the configured
                                      claims source:

                                      - When using a URL as a claims namespace
                                      identifier, use bracket notation to access
                                      the claim value (e.g. mapFrom:
                                      "claims['https://example.com/claim-name']").

                                      - `mapForm` is optional when
                                      `defaultValue` is provided, as the latter
                                      will be used for all issued credentials.
                                      This is referred to as a **static claim**.
                                    example: claims.given_name
                                  type:
                                    type: string
                                    description: >-
                                      Claim data type. `type` is optional when
                                      `defaultValue` is provided.

                                      - `date` must be in YYYY-MM-DD format.

                                      - `dateTime` must be in YYYY-MM-DD
                                      HH:MM:SS format ([ISO
                                      8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                                      compliant).

                                      - `org.iso.18013.5.1.driving_privileges`
                                      is a unique type for Mobile Driver
                                      Licences (mDL) and detail the holder's
                                      driving privileges:
                                        - `issue_date`: In YYYY-MM-DD format.
                                        - `expiry_date`: In YYYY-MM-DD format.
                                        - `vehicle_category_code`
                                    example: string
                                    enum:
                                      - boolean
                                      - number
                                      - string
                                      - binary
                                      - date
                                      - dateTime
                                      - array
                                      - object
                                      - org.iso.18013.5.1.driving_privileges
                                  required:
                                    type: boolean
                                    description: >-
                                      Indicates whether the claim is required
                                      (`true`) or not (`false`). When a required
                                      claim is not available, credential
                                      issuance will fail.
                                    default: false
                                  defaultValue:
                                    description: >-
                                      Indicates what value is used if `required`
                                      is set to `false` (field is optional) and
                                      no value is provided by the claims source.
                                      When `defaultValue` is provided, `mapFrom`
                                      and `type` are optional.
                                    type: string
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of years, months, weeks,
                          days, hours, minutes and seconds. Note that credential
                          issuance will fail if the credential expiry date is
                          later than that of the [Document Signer Certificate
                          (DSC)](#tag/DSC) used to sign it.
                        properties:
                          years:
                            type: number
                          months:
                            type: number
                            example: 1
                          weeks:
                            type: number
                          days:
                            type: number
                          hours:
                            type: number
                          minutes:
                            type: number
                          seconds:
                            type: number
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
    get:
      operationId: getMobileCredentialConfigurations
      tags:
        - Mobile Credential Configuration
      summary: Retrieve all Mobile Credential configurations
      description: |
        Retrieves all Mobile Credential Configurations from your tenant.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_START
        * MOBILE_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_SUCCESS
        * MOBILE_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
        - schema:
            type: string
            example: AlumniCredential
          in: query
          name: type
          description: Optional credential type to filter on
      responses:
        '200':
          description: Mobile Credential configurations retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      required:
                        - id
                        - type
                        - expiresIn
                        - claimMappings
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: >-
                                Uniquely identifies the created credential
                                configuration. This identifier can be used to
                                create an offer based on this credential
                                configuration, or to retrieve, update or remove
                                the credential configuration.
                              example: 983c0a86-204f-4431-9371-f5a22e506599
                            branding:
                              type: object
                              description: Credential branding information
                              example:
                                name: Credential name
                                description: Credential Description
                                backgroundColor: '#FFFFFF'
                                watermarkImage: data:image/png;base64,{image-data}
                                issuerLogo: data:image/png;base64,{image-data}
                                issuerIcon: data:image/svg+xml;base64,{image-data}
                              properties:
                                name:
                                  description: >-
                                    This string is displayed on the top part of
                                    the credential in the holder's digital
                                    wallet.
                                  type: string
                                description:
                                  description: >-
                                    This string is displayed below the name
                                    field on the credential in the holder's
                                    digital wallet.
                                  type: string
                                backgroundColor:
                                  description: >-
                                    Colour hex code used for the credential
                                    background color in the holder's digital
                                    wallet.
                                  type: string
                                watermarkImage:
                                  description: >-
                                    Watermarks are displayed included as a
                                    pattern on the credential in the holder's
                                    digital wallet. You can provide either a URL
                                    to the image, or a Data URI (base64 encoded)
                                    with the following requirements:

                                    - URL/URI must be publicly available.

                                    - File must be 245x150 px in size.

                                    - **svg** and **png** files are supported.
                                    We recommend using **svg** files to allow
                                    proper scaling across the UI and enable
                                    optimal performance.

                                    - If no watermark image is provided, a wave
                                    pattern is applied to the credentials by
                                    default.

                                    - The recommended maximum size is 150 KB.
                                  type: string
                                issuerLogo:
                                  description: >-
                                    The issuer logo is displayed on the bottom
                                    part of the credential in the holder's
                                    digital wallet. You can provide either a URL
                                    to the image, or a Data URI (base64 encoded)
                                    with the following requirements:

                                    - URL/URI must be publicly available.

                                    - File must be 140x42 px in size.

                                    - **svg** and **png** files are supported.
                                    We recommend using **svg** files to allow
                                    proper scaling across the UI and enable
                                    optimal performance.

                                    - Transparencies are allowed for **svg** and
                                    **png** files.

                                    - The recommended maximum size is 50 KB.

                                    - If no logo is provided, the first letter
                                    of the issuer name is displayed instead.
                                  type: string
                                issuerIcon:
                                  description: >-
                                    The issuer icon is displayed next to the
                                    issuer's logo on the bottom part of the
                                    credential in the holder's digital wallet.
                                    You can provide either a URL to the image,
                                    or a Data URI (base64 encoded) with the
                                    following requirements:

                                    - URL/URI must be publicly available.

                                    - File must be 32x32 px in size.

                                    - **svg** and **png** files are supported.
                                    We recommend using **svg** files to allow
                                    proper scaling across the UI and enable
                                    optimal performance.

                                    - Transparencies are allowed for **svg** and
                                    **png** files.

                                    - The recommended maximum size is 15 KB.
                                  type: string
                        - type: object
                          properties:
                            type:
                              description: >-
                                Used to differentiate between different Mobile
                                credential configurations on your tenant. Thus,
                                its value must:

                                - Be unique across all Mobile credential
                                configurations on your tenant.

                                - Not be `VerifiableCredential`.
                              type: string
                              minLength: 1
                              maxLength: 1024
                              example: DriverLicence
                            claimMappings:
                              title: ClaimMappings
                              type: object
                              description: >-
                                This is where you specify how to map claims
                                (user attributes) into issued credentials.
                              example:
                                org.iso.18013.5.1:
                                  given_name:
                                    mapFrom: claims.given_name
                                    required: true
                                    type: string
                                  birth_date:
                                    mapFrom: claims.date_of_birth
                                    required: true
                                    type: dateTime
                              properties:
                                additionalProperties:
                                  description: >-
                                    Each object corresponds to a claims source
                                    and is referenced as a `namespace`.
                                  type: object
                                  properties:
                                    additionalProperties:
                                      description: >-
                                        Each object corresponds to a claim in
                                        the issued credential, and contains
                                        fields that control the mapping logic.
                                      type: object
                                      properties:
                                        mapFrom:
                                          type: string
                                          description: >-
                                            Path to the mapped claim in the
                                            configured claims source:

                                            - When using a URL as a claims namespace
                                            identifier, use bracket notation to
                                            access the claim value (e.g. mapFrom:
                                            "claims['https://example.com/claim-name']").

                                            - `mapForm` is optional when
                                            `defaultValue` is provided, as the
                                            latter will be used for all issued
                                            credentials. This is referred to as a
                                            **static claim**.
                                          example: claims.given_name
                                        type:
                                          type: string
                                          description: >-
                                            Claim data type. `type` is optional when
                                            `defaultValue` is provided.

                                            - `date` must be in YYYY-MM-DD format.

                                            - `dateTime` must be in YYYY-MM-DD
                                            HH:MM:SS format ([ISO
                                            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                                            compliant).

                                            - `org.iso.18013.5.1.driving_privileges`
                                            is a unique type for Mobile Driver
                                            Licences (mDL) and detail the holder's
                                            driving privileges:
                                              - `issue_date`: In YYYY-MM-DD format.
                                              - `expiry_date`: In YYYY-MM-DD format.
                                              - `vehicle_category_code`
                                          example: string
                                          enum:
                                            - boolean
                                            - number
                                            - string
                                            - binary
                                            - date
                                            - dateTime
                                            - array
                                            - object
                                            - org.iso.18013.5.1.driving_privileges
                                        required:
                                          type: boolean
                                          description: >-
                                            Indicates whether the claim is required
                                            (`true`) or not (`false`). When a
                                            required claim is not available,
                                            credential issuance will fail.
                                          default: false
                                        defaultValue:
                                          description: >-
                                            Indicates what value is used if
                                            `required` is set to `false` (field is
                                            optional) and no value is provided by
                                            the claims source. When `defaultValue`
                                            is provided, `mapFrom` and `type` are
                                            optional.
                                          type: string
                            claimSourceId:
                              type: string
                              format: uuid
                              description: >-
                                References the unique identifier of a claims
                                source that can be used to retrieve claims and
                                include them in the issued credential.
                            expiresIn:
                              type: object
                              description: >-
                                Used to determine when will issued credentials
                                expire. Can include any combination of years,
                                months, weeks, days, hours, minutes and seconds.
                                Note that credential issuance will fail if the
                                credential expiry date is later than that of the
                                [Document Signer Certificate (DSC)](#tag/DSC)
                                used to sign it.
                              properties:
                                years:
                                  type: number
                                months:
                                  type: number
                                  example: 1
                                weeks:
                                  type: number
                                days:
                                  type: number
                                hours:
                                  type: number
                                minutes:
                                  type: number
                                seconds:
                                  type: number
                      title: CredentialConfigurationResponse
                title: GetCredentialConfigurationsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Invalid value
                        param: cursor
                        value: abc
    parameters: []
  /v2/credentials/mobile/configurations/{id}:
    parameters:
      - name: id
        in: path
        description: Mobile Credential Configuration ID
        schema:
          type: string
          format: uuid
          example: 3948c40e-6e19-4ffc-933c-91f643f24264
        required: true
    get:
      operationId: getMobileCredentialConfiguration
      tags:
        - Mobile Credential Configuration
      summary: Retrieve a Mobile Credential configuration
      description: >
        Retrieves an existing Mobile Credential Configuration by providing its
        ID.


        ### **Analytic events**

        * MOBILE_CREDENTIAL_CONFIGURATION_RETRIEVE_START

        * MOBILE_CREDENTIAL_CONFIGURATION_RETRIEVE_SUCCESS

        * MOBILE_CREDENTIAL_CONFIGURATION_RETRIEVE_FAIL
      responses:
        '200':
          description: Mobile Credential configuration retrieved
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - expiresIn
                  - claimMappings
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies the created credential
                          configuration. This identifier can be used to create
                          an offer based on this credential configuration, or to
                          retrieve, update or remove the credential
                          configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                      branding:
                        type: object
                        description: Credential branding information
                        example:
                          name: Credential name
                          description: Credential Description
                          backgroundColor: '#FFFFFF'
                          watermarkImage: data:image/png;base64,{image-data}
                          issuerLogo: data:image/png;base64,{image-data}
                          issuerIcon: data:image/svg+xml;base64,{image-data}
                        properties:
                          name:
                            description: >-
                              This string is displayed on the top part of the
                              credential in the holder's digital wallet.
                            type: string
                          description:
                            description: >-
                              This string is displayed below the name field on
                              the credential in the holder's digital wallet.
                            type: string
                          backgroundColor:
                            description: >-
                              Colour hex code used for the credential background
                              color in the holder's digital wallet.
                            type: string
                          watermarkImage:
                            description: >-
                              Watermarks are displayed included as a pattern on
                              the credential in the holder's digital wallet. You
                              can provide either a URL to the image, or a Data
                              URI (base64 encoded) with the following
                              requirements:

                              - URL/URI must be publicly available.

                              - File must be 245x150 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - If no watermark image is provided, a wave
                              pattern is applied to the credentials by default.

                              - The recommended maximum size is 150 KB.
                            type: string
                          issuerLogo:
                            description: >-
                              The issuer logo is displayed on the bottom part of
                              the credential in the holder's digital wallet. You
                              can provide either a URL to the image, or a Data
                              URI (base64 encoded) with the following
                              requirements:

                              - URL/URI must be publicly available.

                              - File must be 140x42 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - Transparencies are allowed for **svg** and
                              **png** files.

                              - The recommended maximum size is 50 KB.

                              - If no logo is provided, the first letter of the
                              issuer name is displayed instead.
                            type: string
                          issuerIcon:
                            description: >-
                              The issuer icon is displayed next to the issuer's
                              logo on the bottom part of the credential in the
                              holder's digital wallet. You can provide either a
                              URL to the image, or a Data URI (base64 encoded)
                              with the following requirements:

                              - URL/URI must be publicly available.

                              - File must be 32x32 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - Transparencies are allowed for **svg** and
                              **png** files.

                              - The recommended maximum size is 15 KB.
                            type: string
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different Mobile
                          credential configurations on your tenant. Thus, its
                          value must:

                          - Be unique across all Mobile credential
                          configurations on your tenant.

                          - Not be `VerifiableCredential`.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: DriverLicence
                      claimMappings:
                        title: ClaimMappings
                        type: object
                        description: >-
                          This is where you specify how to map claims (user
                          attributes) into issued credentials.
                        example:
                          org.iso.18013.5.1:
                            given_name:
                              mapFrom: claims.given_name
                              required: true
                              type: string
                            birth_date:
                              mapFrom: claims.date_of_birth
                              required: true
                              type: dateTime
                        properties:
                          additionalProperties:
                            description: >-
                              Each object corresponds to a claims source and is
                              referenced as a `namespace`.
                            type: object
                            properties:
                              additionalProperties:
                                description: >-
                                  Each object corresponds to a claim in the
                                  issued credential, and contains fields that
                                  control the mapping logic.
                                type: object
                                properties:
                                  mapFrom:
                                    type: string
                                    description: >-
                                      Path to the mapped claim in the configured
                                      claims source:

                                      - When using a URL as a claims namespace
                                      identifier, use bracket notation to access
                                      the claim value (e.g. mapFrom:
                                      "claims['https://example.com/claim-name']").

                                      - `mapForm` is optional when
                                      `defaultValue` is provided, as the latter
                                      will be used for all issued credentials.
                                      This is referred to as a **static claim**.
                                    example: claims.given_name
                                  type:
                                    type: string
                                    description: >-
                                      Claim data type. `type` is optional when
                                      `defaultValue` is provided.

                                      - `date` must be in YYYY-MM-DD format.

                                      - `dateTime` must be in YYYY-MM-DD
                                      HH:MM:SS format ([ISO
                                      8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                                      compliant).

                                      - `org.iso.18013.5.1.driving_privileges`
                                      is a unique type for Mobile Driver
                                      Licences (mDL) and detail the holder's
                                      driving privileges:
                                        - `issue_date`: In YYYY-MM-DD format.
                                        - `expiry_date`: In YYYY-MM-DD format.
                                        - `vehicle_category_code`
                                    example: string
                                    enum:
                                      - boolean
                                      - number
                                      - string
                                      - binary
                                      - date
                                      - dateTime
                                      - array
                                      - object
                                      - org.iso.18013.5.1.driving_privileges
                                  required:
                                    type: boolean
                                    description: >-
                                      Indicates whether the claim is required
                                      (`true`) or not (`false`). When a required
                                      claim is not available, credential
                                      issuance will fail.
                                    default: false
                                  defaultValue:
                                    description: >-
                                      Indicates what value is used if `required`
                                      is set to `false` (field is optional) and
                                      no value is provided by the claims source.
                                      When `defaultValue` is provided, `mapFrom`
                                      and `type` are optional.
                                    type: string
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of years, months, weeks,
                          days, hours, minutes and seconds. Note that credential
                          issuance will fail if the credential expiry date is
                          later than that of the [Document Signer Certificate
                          (DSC)](#tag/DSC) used to sign it.
                        properties:
                          years:
                            type: number
                          months:
                            type: number
                            example: 1
                          weeks:
                            type: number
                          days:
                            type: number
                          hours:
                            type: number
                          minutes:
                            type: number
                          seconds:
                            type: number
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: Mobile Credential configuration Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    put:
      operationId: updateMobileCredentialConfiguration
      tags:
        - Mobile Credential Configuration
      summary: Update a Mobile Credential configuration
      description: |
        Updates an existing Mobile Credential configuration by providing its ID.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_CONFIGURATION_UPDATE_START
        * MOBILE_CREDENTIAL_CONFIGURATION_UPDATE_SUCCESS
        * MOBILE_CREDENTIAL_CONFIGURATION_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - expiresIn
                - claimMappings
              allOf:
                - type: object
                  properties:
                    type:
                      description: >-
                        Used to differentiate between different Mobile
                        credential configurations on your tenant. Thus, its
                        value must:

                        - Be unique across all Mobile credential configurations
                        on your tenant.

                        - Not be `VerifiableCredential`.
                      type: string
                      minLength: 1
                      maxLength: 1024
                      example: DriverLicence
                    claimMappings:
                      title: ClaimMappings
                      type: object
                      description: >-
                        This is where you specify how to map claims (user
                        attributes) into issued credentials.
                      example:
                        org.iso.18013.5.1:
                          given_name:
                            mapFrom: claims.given_name
                            required: true
                            type: string
                          birth_date:
                            mapFrom: claims.date_of_birth
                            required: true
                            type: dateTime
                      properties:
                        additionalProperties:
                          description: >-
                            Each object corresponds to a claims source and is
                            referenced as a `namespace`.
                          type: object
                          properties:
                            additionalProperties:
                              description: >-
                                Each object corresponds to a claim in the issued
                                credential, and contains fields that control the
                                mapping logic.
                              type: object
                              properties:
                                mapFrom:
                                  type: string
                                  description: >-
                                    Path to the mapped claim in the configured
                                    claims source:

                                    - When using a URL as a claims namespace
                                    identifier, use bracket notation to access
                                    the claim value (e.g. mapFrom:
                                    "claims['https://example.com/claim-name']").

                                    - `mapForm` is optional when `defaultValue`
                                    is provided, as the latter will be used for
                                    all issued credentials. This is referred to
                                    as a **static claim**.
                                  example: claims.given_name
                                type:
                                  type: string
                                  description: >-
                                    Claim data type. `type` is optional when
                                    `defaultValue` is provided.

                                    - `date` must be in YYYY-MM-DD format.

                                    - `dateTime` must be in YYYY-MM-DD HH:MM:SS
                                    format ([ISO
                                    8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                                    compliant).

                                    - `org.iso.18013.5.1.driving_privileges` is
                                    a unique type for Mobile Driver Licences
                                    (mDL) and detail the holder's driving
                                    privileges:
                                      - `issue_date`: In YYYY-MM-DD format.
                                      - `expiry_date`: In YYYY-MM-DD format.
                                      - `vehicle_category_code`
                                  example: string
                                  enum:
                                    - boolean
                                    - number
                                    - string
                                    - binary
                                    - date
                                    - dateTime
                                    - array
                                    - object
                                    - org.iso.18013.5.1.driving_privileges
                                required:
                                  type: boolean
                                  description: >-
                                    Indicates whether the claim is required
                                    (`true`) or not (`false`). When a required
                                    claim is not available, credential issuance
                                    will fail.
                                  default: false
                                defaultValue:
                                  description: >-
                                    Indicates what value is used if `required`
                                    is set to `false` (field is optional) and no
                                    value is provided by the claims source. When
                                    `defaultValue` is provided, `mapFrom` and
                                    `type` are optional.
                                  type: string
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of years, months, weeks,
                        days, hours, minutes and seconds. Note that credential
                        issuance will fail if the credential expiry date is
                        later than that of the [Document Signer Certificate
                        (DSC)](#tag/DSC) used to sign it.
                      properties:
                        years:
                          type: number
                        months:
                          type: number
                          example: 1
                        weeks:
                          type: number
                        days:
                          type: number
                        hours:
                          type: number
                        minutes:
                          type: number
                        seconds:
                          type: number
                - type: object
                  properties:
                    branding:
                      type: object
                      description: Used to apply branding to issued credentials.
                      example:
                        name: Credential name
                        description: Credential Description
                        backgroundColor: '#FFFFFF'
                        watermarkImage: data:image/png;base64,{image-data}
                        issuerLogo: https://example-path-to-image-data.com
                        issuerIcon: data:image/svg+xml;base64,{image-data}
                      properties:
                        name:
                          description: >-
                            Insert a meaningful name for the credential. This
                            string is displayed on the top part of the
                            credential in the holder's digital wallet.
                          type: string
                        description:
                          description: >-
                            Insert a meaningful description for the credential.
                            This string is displayed below the name field on the
                            credential in the holder's digital wallet.
                          type: string
                        backgroundColor:
                          description: >-
                            Insert a colour hex code to use for the credential
                            background color in the holder's digital wallet.
                          type: string
                        watermarkImage:
                          description: >-
                            Watermarks are displayed included as a pattern on
                            the credential in the holder's digital wallet. You
                            can provide either a URL to the image, or a Data URI
                            (base64 encoded) with the following requirements:

                            - URL/URI must be publicly available.

                            - File must be 245x150 px in size.

                            - **svg** and **png** files are supported. We
                            recommend using **svg** files to allow proper
                            scaling across the UI and enable optimal
                            performance.

                            - If no watermark image is provided, a wave pattern
                            is applied to the credentials by default.

                            - The recommended maximum size is 150 KB.
                          type: string
                        issuerLogo:
                          description: >-
                            The issuer logo is displayed on the bottom part of
                            the credential in the holder's digital wallet. When
                            not provided, the issuer's name and `issuerIcon` are
                            used instead. You can provide either a URL to the
                            image, or a Data URI (base64 encoded) with the
                            following requirements:

                            - URL/URI must be publicly available.

                            - File must be 140x42 px in size.

                            - **svg** and **png** files are supported. We
                            recommend using **svg** files to allow proper
                            scaling across the UI and enable optimal
                            performance.

                            - Transparencies are allowed for **svg** and **png**
                            files.

                            - The recommended maximum size is 50 KB.

                            - If no logo is provided, the first letter of the
                            issuer name is displayed instead.
                          type: string
                        issuerIcon:
                          description: >-
                            The issuer icon is displayed next to the issuer's
                            name when the credential is offered to the holder.
                            It is also displayed next to the issuer's name on
                            the bottom part of the credential when `issuerLogo`
                            is not provided. When `issuerIcon` is not provided,
                            the first letter from the issuer name is used
                            instead. You can provide either a URL to the image,
                            or a Data URI (base64 encoded) with the following
                            requirements:

                            - URL/URI must be publicly available.

                            - File must be 32x32 px in size.

                            - **svg** and **png** files are supported. We
                            recommend using **svg** files to allow proper
                            scaling across the UI and enable optimal
                            performance.

                            - Transparencies are allowed for **svg** and **png**
                            files.

                            - The recommended maximum size is 15 KB.
                          type: string
              title: CreateCredentialConfigurationRequest
        description: Update a Mobile Credential configuration
      responses:
        '200':
          description: Mobile Credential configuration updated
          content:
            application/json:
              schema:
                required:
                  - id
                  - type
                  - expiresIn
                  - claimMappings
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies the created credential
                          configuration. This identifier can be used to create
                          an offer based on this credential configuration, or to
                          retrieve, update or remove the credential
                          configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                      branding:
                        type: object
                        description: Credential branding information
                        example:
                          name: Credential name
                          description: Credential Description
                          backgroundColor: '#FFFFFF'
                          watermarkImage: data:image/png;base64,{image-data}
                          issuerLogo: data:image/png;base64,{image-data}
                          issuerIcon: data:image/svg+xml;base64,{image-data}
                        properties:
                          name:
                            description: >-
                              This string is displayed on the top part of the
                              credential in the holder's digital wallet.
                            type: string
                          description:
                            description: >-
                              This string is displayed below the name field on
                              the credential in the holder's digital wallet.
                            type: string
                          backgroundColor:
                            description: >-
                              Colour hex code used for the credential background
                              color in the holder's digital wallet.
                            type: string
                          watermarkImage:
                            description: >-
                              Watermarks are displayed included as a pattern on
                              the credential in the holder's digital wallet. You
                              can provide either a URL to the image, or a Data
                              URI (base64 encoded) with the following
                              requirements:

                              - URL/URI must be publicly available.

                              - File must be 245x150 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - If no watermark image is provided, a wave
                              pattern is applied to the credentials by default.

                              - The recommended maximum size is 150 KB.
                            type: string
                          issuerLogo:
                            description: >-
                              The issuer logo is displayed on the bottom part of
                              the credential in the holder's digital wallet. You
                              can provide either a URL to the image, or a Data
                              URI (base64 encoded) with the following
                              requirements:

                              - URL/URI must be publicly available.

                              - File must be 140x42 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - Transparencies are allowed for **svg** and
                              **png** files.

                              - The recommended maximum size is 50 KB.

                              - If no logo is provided, the first letter of the
                              issuer name is displayed instead.
                            type: string
                          issuerIcon:
                            description: >-
                              The issuer icon is displayed next to the issuer's
                              logo on the bottom part of the credential in the
                              holder's digital wallet. You can provide either a
                              URL to the image, or a Data URI (base64 encoded)
                              with the following requirements:

                              - URL/URI must be publicly available.

                              - File must be 32x32 px in size.

                              - **svg** and **png** files are supported. We
                              recommend using **svg** files to allow proper
                              scaling across the UI and enable optimal
                              performance.

                              - Transparencies are allowed for **svg** and
                              **png** files.

                              - The recommended maximum size is 15 KB.
                            type: string
                  - type: object
                    properties:
                      type:
                        description: >-
                          Used to differentiate between different Mobile
                          credential configurations on your tenant. Thus, its
                          value must:

                          - Be unique across all Mobile credential
                          configurations on your tenant.

                          - Not be `VerifiableCredential`.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: DriverLicence
                      claimMappings:
                        title: ClaimMappings
                        type: object
                        description: >-
                          This is where you specify how to map claims (user
                          attributes) into issued credentials.
                        example:
                          org.iso.18013.5.1:
                            given_name:
                              mapFrom: claims.given_name
                              required: true
                              type: string
                            birth_date:
                              mapFrom: claims.date_of_birth
                              required: true
                              type: dateTime
                        properties:
                          additionalProperties:
                            description: >-
                              Each object corresponds to a claims source and is
                              referenced as a `namespace`.
                            type: object
                            properties:
                              additionalProperties:
                                description: >-
                                  Each object corresponds to a claim in the
                                  issued credential, and contains fields that
                                  control the mapping logic.
                                type: object
                                properties:
                                  mapFrom:
                                    type: string
                                    description: >-
                                      Path to the mapped claim in the configured
                                      claims source:

                                      - When using a URL as a claims namespace
                                      identifier, use bracket notation to access
                                      the claim value (e.g. mapFrom:
                                      "claims['https://example.com/claim-name']").

                                      - `mapForm` is optional when
                                      `defaultValue` is provided, as the latter
                                      will be used for all issued credentials.
                                      This is referred to as a **static claim**.
                                    example: claims.given_name
                                  type:
                                    type: string
                                    description: >-
                                      Claim data type. `type` is optional when
                                      `defaultValue` is provided.

                                      - `date` must be in YYYY-MM-DD format.

                                      - `dateTime` must be in YYYY-MM-DD
                                      HH:MM:SS format ([ISO
                                      8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                                      compliant).

                                      - `org.iso.18013.5.1.driving_privileges`
                                      is a unique type for Mobile Driver
                                      Licences (mDL) and detail the holder's
                                      driving privileges:
                                        - `issue_date`: In YYYY-MM-DD format.
                                        - `expiry_date`: In YYYY-MM-DD format.
                                        - `vehicle_category_code`
                                    example: string
                                    enum:
                                      - boolean
                                      - number
                                      - string
                                      - binary
                                      - date
                                      - dateTime
                                      - array
                                      - object
                                      - org.iso.18013.5.1.driving_privileges
                                  required:
                                    type: boolean
                                    description: >-
                                      Indicates whether the claim is required
                                      (`true`) or not (`false`). When a required
                                      claim is not available, credential
                                      issuance will fail.
                                    default: false
                                  defaultValue:
                                    description: >-
                                      Indicates what value is used if `required`
                                      is set to `false` (field is optional) and
                                      no value is provided by the claims source.
                                      When `defaultValue` is provided, `mapFrom`
                                      and `type` are optional.
                                    type: string
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of years, months, weeks,
                          days, hours, minutes and seconds. Note that credential
                          issuance will fail if the credential expiry date is
                          later than that of the [Document Signer Certificate
                          (DSC)](#tag/DSC) used to sign it.
                        properties:
                          years:
                            type: number
                          months:
                            type: number
                            example: 1
                          weeks:
                            type: number
                          days:
                            type: number
                          hours:
                            type: number
                          minutes:
                            type: number
                          seconds:
                            type: number
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: must be a string
                        param: type
        '404':
          description: Mobile Credential configuration not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    delete:
      operationId: deleteMobileCredentialConfiguration
      tags:
        - Mobile Credential Configuration
      summary: Delete a Mobile Credential configuration
      description: |
        Deletes an existing Mobile Credential configuration by providing its ID.

        ### **Analytic events**
        * MOBILE_CREDENTIAL_CONFIGURATION_DELETE_START
        * MOBILE_CREDENTIAL_CONFIGURATION_DELETE_SUCCESS
        * MOBILE_CREDENTIAL_CONFIGURATION_DELETE_FAIL
      responses:
        '204':
          description: Mobile Credential configuration deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: Mobile Credential configuration not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
  /core/v1/users/search:
    post:
      operationId: searchUsers
      tags:
        - Users
      summary: Search users
      description: >-
        Returns a list of users from the tenant that match the provided search
        criteria.


        ### **Analytic events**

        * USER_SEARCH_START

        * USER_SEARCH_SUCCESS

        * USER_SEARCH_FAIL
      requestBody:
        description: The search criteria
        required: true
        content:
          application/json:
            schema:
              properties:
                claims:
                  type: object
                  description: >
                    Filter users by claims. Nestsed objects are supported. Text
                    values must be an exact match.
                  example:
                    given_name: Jamie
                    address:
                      street_name: Queen Street
                authenticationProvider:
                  type: object
                  description: >
                    Filter users by their unique identifier in the configured
                    Authentication Provider.
                  properties:
                    providerId:
                      type: string
                      description: Authentication Provider identifier.
                      example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
                    subjectId:
                      type: string
                      description: >-
                        Unique identifier of the user in the Authentication
                        Provider. Must be an exact match.
                      example: example-university-oauth2|123456789
                limit:
                  type: number
                  description: Range size of returned entries, default 100
                  example: 100
                  maximum: 1000
                  minimum: 1
                cursor:
                  type: string
                  description: Starting point for the range of entries
                  example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    description: Includes all matching user objects.
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: User unique identifier.
                              example: 0c3fad74-a8df-4a2d-8e75-f2d356b413ba
                            claims:
                              type: object
                              description: User claims.
                              example:
                                givenName: Patrick John
                                familyName: Smith
                                dob: '1990-06-01'
                          title: GetUserResponse
                        - type: object
                          properties:
                            authenticationProvider:
                              type: object
                              description: >-
                                Authentication Provider information for the
                                user.
                              properties:
                                url:
                                  type: string
                                  description: Authentication Provider url.
                                  example: https://example-university.au.auth0.com
                                subjectId:
                                  type: string
                                  description: >-
                                    Unique identifier of the user in the
                                    Authentication Provider.
                                  example: example-university-oauth2|123456789
                title: SearchUsersResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: claims
  /core/v1/users:
    get:
      operationId: getUsers
      tags:
        - Users
      summary: Retrieve all users
      description: |
        Returns a list of all users on your tenant.

        ### **Analytic events**
        * USER_RETRIEVE_LIST_START
        * USER_RETRIEVE_LIST_SUCCESS
        * USER_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of entries
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    description: Includes matching user objects.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: User unique identifier.
                          example: 0c3fad74-a8df-4a2d-8e75-f2d356b413ba
                        claims:
                          type: object
                          description: User claims.
                          example:
                            givenName: Patrick John
                            familyName: Smith
                            dob: '1990-06-01'
                      title: GetUserResponse
                title: GetUsersResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Invalid value
                        param: cursor
                        value: abc
    parameters: []
  /core/v1/users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        schema:
          type: string
          format: uuid
          example: 8241400f-de3b-42c5-ad7c-8a380039e796
        required: true
    get:
      operationId: getUser
      tags:
        - Users
      summary: Retrieve a user
      description: |-
        Retrieve an existing user by providing its ID.
        * USER_RETRIEVE_START
        * USER_RETRIEVE_SUCCESS
        * USER_RETRIEVE_FAIL
      responses:
        '200':
          description: User retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: User unique identifier.
                    example: 0c3fad74-a8df-4a2d-8e75-f2d356b413ba
                  claims:
                    type: object
                    description: User claims.
                    example:
                      givenName: Patrick John
                      familyName: Smith
                      dob: '1990-06-01'
                title: GetUserResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: userId
                        value: abc
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                User not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: userId
                        value: 8241400f-de3b-42c5-ad7c-8a380039e796
    put:
      operationId: updateUser
      tags:
        - Users
      summary: Update a User
      description: |-
        Updates an existing user by providing its ID.

        * USER_UPDATE_START
        * USER_UPDATE_SUCCESS
        * USER_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - claims
              properties:
                claims:
                  type: object
                  description: User claims to be updated.
                  example:
                    givenName: Patrick John
                    familyName: Smith
                    dob: '1990-06-01'
              title: UpdateUserRequest
        description: Update a User
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: User unique identifier.
                    example: 0c3fad74-a8df-4a2d-8e75-f2d356b413ba
                  claims:
                    type: object
                    description: User claims.
                    example:
                      givenName: Patrick John
                      familyName: Smith
                      dob: '1990-06-01'
                title: GetUserResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: claims
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                User not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: userId
                        value: 8241400f-de3b-42c5-ad7c-8a380039e796
    delete:
      operationId: deleteUser
      tags:
        - Users
      summary: Delete a user
      description: >-
        Deletes a user and removes any persisted data related to them by
        providing the user ID.


        > Any credentials issued to the user remain valid even after the user is
        deleted.
          
        ### **Analytic events**

        * USER_DELETE_START

        * USER_DELETE_SUCCESS

        * USER_DELETE_FAIL
      responses:
        '204':
          description: User deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Unsupported method:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: xxx
                        msg: Invalid value
                        param: id
                        location: params
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                '404':
                  value:
                    code: NotFound
                    message: Resource Not Found
  /core/v1/users/{userId}/credentials:
    parameters:
      - name: userId
        in: path
        description: User ID
        schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        required: true
    get:
      operationId: getUserCredentials
      tags:
        - Users
      summary: Retrieve all user credentials data
      description: >
        Returns a list of metadata for all the credentials referenced by the
        provided `userId`.
      responses:
        '200':
          description: User credentials retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: >-
                      Includes metadata for all credentials referenced by the
                      provided `Userid`.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Credential unique identifier.
                          example: 552b35fe-a3ed-4c33-8c3c-64810c712323
                        type:
                          type: string
                          description: Credential type.
                          example: CourseCredential
                        profile:
                          type: string
                          enum:
                            - web-semantic
                          description: Credential profile.
                          example: web-semantic
                title: GetUserCredentialsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: userId
                        value: abc
  /core/v1/users/authenticationproviders:
    post:
      operationId: createAuthenticationProvider
      tags:
        - Authentication Provider
      summary: Configure an Authentication Provider
      description: >-
        Configures an Authentication Provider on the tenant.


        An authentication or identity provider (IdP) is a platform that is
        typically used to store and manage user accounts on behalf of an
        organisation or a service provider. MATTR VII uses the authentication
        provider to authenticate end users before issuing them credentials.


        > Only one authentication provider can be configured on a tenant.


        The `/.well-known/openid-configuration` endpoint of the Authentication
        Provider must contain values for the `authorization_endpoint`,
        `token_endpoint` and `scopes_supported`.


        ### **Analytic events**

        * USER_AUTHENTICATION_PROVIDER_CREATE_START

        * USER_AUTHENTICATION_PROVIDER_CREATE_SUCCESS

        * USER_AUTHENTICATION_PROVIDER_CREATE_FAIL
      requestBody:
        description: The Authentication Provider payload
        required: true
        content:
          application/json:
            schema:
              required:
                - clientSecret
                - url
              allOf:
                - type: object
                  allOf:
                    - type: object
                      required:
                        - clientId
                      properties:
                        scope:
                          type: array
                          description: >-
                            OpenID scopes to use during authentication. Each
                            scope returns a set of user attributes which are
                            called claims. Be sure to test that right scopes are
                            added to get all the information you need.
                          example:
                            - email
                          default:
                            - openid
                            - profile
                            - email
                          items:
                            type: string
                        clientId:
                          type: string
                          description: >-
                            The client ID of the application client created on
                            your IdP.
                          example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
                        clientSecret:
                          type: string
                          description: >-
                            The client secret of the application client created
                            on your IdP.
                        tokenEndpointAuthMethod:
                          type: string
                          description: >-
                            Authentication method for your IdP token endpoint:

                            - `client_secret_post`: Your credentials are passed
                            as parameters in the request body.

                            - `client_secret_basic` (default): Your credentials
                            are passed as a base 64 encoded token.
                          example: client_secret_post
                          default: client_secret_basic
                          enum:
                            - client_secret_basic
                            - client_secret_post
                        staticRequestParameters:
                          type: object
                          maxProperties: 1000
                          description: >-
                            Additional parameters (maximum 1000 entries allowed)
                            that will be included in the request to your IdP.
                            These parameters are identical for every request as
                            defined in your configuration. An example would be
                            setting the prompt to be login to let your IdP know
                            it should show the login page every time. Keys must
                            be strings. Values of top-level object keys must
                            stringify to less than 1000 characters.
                          additionalProperties:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                              - type: array
                              - type: object
                          example:
                            prompt: login
                            max_age: 10000
                        forwardedRequestParameters:
                          type: array
                          description: >-
                            In contrast to `staticRequestParameters`, you can
                            provide dynamic parameters that are fetched uniquely
                            for each request to make the user journey more
                            seamless. You can forward params to your IdP like
                            `login_hint` which will pass the email of the user
                            starting the flow. Values are limited to 1000
                            characters each, and cannot override any core
                            [Authorize
                            Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                          examples:
                            - login_hint
                          items:
                            type: string
                            maxLength: 1000
                        claimsToPersist:
                          type: array
                          description: >-
                            List of claims to persist from your IdP to MATTR
                            VII. If you have attributes from the ID token (e.g.
                            email, picture, etc.) that you would like persisted
                            on MATTR VII, add them to this array. By default
                            this array is empty, meaning no claims are persisted
                            on MATTR VII.
                          items:
                            type: string
                          default: []
                          example:
                            - first_name
                            - last_name
                            - email
                    - type: object
                      properties:
                        clientSecret:
                          description: >-
                            The client secret of the application client created
                            on your IdP.
                          example: >-
                            QNwfa4Yi4Im9zy1u_15n7SzWKt-9G5cdH0r1bONRpUPfN-UIRaaXv_90z8V6-OjH
              properties:
                url:
                  type: string
                  format: uri
                  description: >-
                    Base url for your Authentication Provider well-known
                    endpoint:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not contain query parameters. Port and fragment
                    parameters will be dropped.

                    - URL must use https and have a valid public TLD.

                    - Unicode will be converted to ASCII.
                  example: https://example-university.au.auth0.com
      responses:
        '201':
          description: Authentication Provider configured
          content:
            application/json:
              schema:
                required:
                  - clientSecret
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Unique identifier for the configured authentication
                          provider. This identifier can be used to retrieve,
                          update or remove the authentication provider
                          configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                      redirectUrl:
                        type: string
                        format: uri
                        description: >-
                          You will need to add this URL to your IdP's allowed
                          redirects list, to enable it to redirect the user back
                          to the wallet upon successful authentication with your
                          IdP. If you are using Auth0 as your identity provider,
                          [this
                          guide](https://auth0.com/docs/authenticate/login/redirect-users-after-login)
                          shows how to add callback URLs. For others, consult
                          your provider for instructions on adding callback
                          URLs.
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/oauth/authentication/callback
                      url:
                        type: string
                        format: uri
                        description: >-
                          Base url for your Authentication Provider well-known
                          endpoint.
                  - type: object
                    required:
                      - clientId
                    properties:
                      scope:
                        type: array
                        description: >-
                          OpenID scopes to use during authentication. Each scope
                          returns a set of user attributes which are called
                          claims. Be sure to test that right scopes are added to
                          get all the information you need.
                        example:
                          - email
                        default:
                          - openid
                          - profile
                          - email
                        items:
                          type: string
                      clientId:
                        type: string
                        description: >-
                          The client ID of the application client created on
                          your IdP.
                        example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
                      clientSecret:
                        type: string
                        description: >-
                          The client secret of the application client created on
                          your IdP.
                      tokenEndpointAuthMethod:
                        type: string
                        description: >-
                          Authentication method for your IdP token endpoint:

                          - `client_secret_post`: Your credentials are passed as
                          parameters in the request body.

                          - `client_secret_basic` (default): Your credentials
                          are passed as a base 64 encoded token.
                        example: client_secret_post
                        default: client_secret_basic
                        enum:
                          - client_secret_basic
                          - client_secret_post
                      staticRequestParameters:
                        type: object
                        maxProperties: 1000
                        description: >-
                          Additional parameters (maximum 1000 entries allowed)
                          that will be included in the request to your IdP.
                          These parameters are identical for every request as
                          defined in your configuration. An example would be
                          setting the prompt to be login to let your IdP know it
                          should show the login page every time. Keys must be
                          strings. Values of top-level object keys must
                          stringify to less than 1000 characters.
                        additionalProperties:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
                            - type: array
                            - type: object
                        example:
                          prompt: login
                          max_age: 10000
                      forwardedRequestParameters:
                        type: array
                        description: >-
                          In contrast to `staticRequestParameters`, you can
                          provide dynamic parameters that are fetched uniquely
                          for each request to make the user journey more
                          seamless. You can forward params to your IdP like
                          `login_hint` which will pass the email of the user
                          starting the flow. Values are limited to 1000
                          characters each, and cannot override any core
                          [Authorize
                          Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                        examples:
                          - login_hint
                        items:
                          type: string
                          maxLength: 1000
                      claimsToPersist:
                        type: array
                        description: >-
                          List of claims to persist from your IdP to MATTR VII.
                          If you have attributes from the ID token (e.g. email,
                          picture, etc.) that you would like persisted on MATTR
                          VII, add them to this array. By default this array is
                          empty, meaning no claims are persisted on MATTR VII.
                        items:
                          type: string
                        default: []
                        example:
                          - first_name
                          - last_name
                          - email
                  - type: object
                    properties:
                      clientSecret:
                        type: string
                        description: >-
                          Your authentication provider client secret will be
                          masked in the response without revealing the actual
                          secret. If the secret is less than 20 characters it
                          will be completely masked, and if it is over 20 only
                          the last 5 characters are revealed.
                        example: >-
                          ***********************************************************6-OjH
                title: CreateAuthenticationProviderResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
    get:
      operationId: getAuthenticationProviders
      tags:
        - Authentication Provider
      summary: Retrieve all Authentication Providers
      description: |
        Returns a list of all Authentication Providers on your tenant.

        ### **Analytic events**
        * USER_AUTHENTICATION_PROVIDER_RETRIEVE_LIST_START
        * USER_AUTHENTICATION_PROVIDER_RETRIEVE_LIST_SUCCESS
        * USER_AUTHENTICATION_PROVIDER_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of entries
      responses:
        '200':
          description: Authentication Providers retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      required:
                        - clientSecret
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: >-
                                Unique identifier for the configured
                                authentication provider. This identifier can be
                                used to retrieve, update or remove the
                                authentication provider configuration.
                              example: 983c0a86-204f-4431-9371-f5a22e506599
                            redirectUrl:
                              type: string
                              format: uri
                              description: >-
                                You will need to add this URL to your IdP's
                                allowed redirects list, to enable it to redirect
                                the user back to the wallet upon successful
                                authentication with your IdP. If you are using
                                Auth0 as your identity provider, [this
                                guide](https://auth0.com/docs/authenticate/login/redirect-users-after-login)
                                shows how to add callback URLs. For others,
                                consult your provider for instructions on adding
                                callback URLs.
                              example: >-
                                https://tenant.vii.mattr.global/core/v1/oauth/authentication/callback
                            url:
                              type: string
                              format: uri
                              description: >-
                                Base url for your Authentication Provider
                                well-known endpoint.
                        - type: object
                          required:
                            - clientId
                          properties:
                            scope:
                              type: array
                              description: >-
                                OpenID scopes to use during authentication. Each
                                scope returns a set of user attributes which are
                                called claims. Be sure to test that right scopes
                                are added to get all the information you need.
                              example:
                                - email
                              default:
                                - openid
                                - profile
                                - email
                              items:
                                type: string
                            clientId:
                              type: string
                              description: >-
                                The client ID of the application client created
                                on your IdP.
                              example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
                            clientSecret:
                              type: string
                              description: >-
                                The client secret of the application client
                                created on your IdP.
                            tokenEndpointAuthMethod:
                              type: string
                              description: >-
                                Authentication method for your IdP token
                                endpoint:

                                - `client_secret_post`: Your credentials are
                                passed as parameters in the request body.

                                - `client_secret_basic` (default): Your
                                credentials are passed as a base 64 encoded
                                token.
                              example: client_secret_post
                              default: client_secret_basic
                              enum:
                                - client_secret_basic
                                - client_secret_post
                            staticRequestParameters:
                              type: object
                              maxProperties: 1000
                              description: >-
                                Additional parameters (maximum 1000 entries
                                allowed) that will be included in the request to
                                your IdP. These parameters are identical for
                                every request as defined in your configuration.
                                An example would be setting the prompt to be
                                login to let your IdP know it should show the
                                login page every time. Keys must be strings.
                                Values of top-level object keys must stringify
                                to less than 1000 characters.
                              additionalProperties:
                                oneOf:
                                  - type: string
                                  - type: number
                                  - type: boolean
                                  - type: array
                                  - type: object
                              example:
                                prompt: login
                                max_age: 10000
                            forwardedRequestParameters:
                              type: array
                              description: >-
                                In contrast to `staticRequestParameters`, you
                                can provide dynamic parameters that are fetched
                                uniquely for each request to make the user
                                journey more seamless. You can forward params to
                                your IdP like `login_hint` which will pass the
                                email of the user starting the flow. Values are
                                limited to 1000 characters each, and cannot
                                override any core [Authorize
                                Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                              examples:
                                - login_hint
                              items:
                                type: string
                                maxLength: 1000
                            claimsToPersist:
                              type: array
                              description: >-
                                List of claims to persist from your IdP to MATTR
                                VII. If you have attributes from the ID token
                                (e.g. email, picture, etc.) that you would like
                                persisted on MATTR VII, add them to this array.
                                By default this array is empty, meaning no
                                claims are persisted on MATTR VII.
                              items:
                                type: string
                              default: []
                              example:
                                - first_name
                                - last_name
                                - email
                        - type: object
                          properties:
                            clientSecret:
                              type: string
                              description: >-
                                Your authentication provider client secret will
                                be masked in the response without revealing the
                                actual secret. If the secret is less than 20
                                characters it will be completely masked, and if
                                it is over 20 only the last 5 characters are
                                revealed.
                              example: >-
                                ***********************************************************6-OjH
                      title: CreateAuthenticationProviderResponse
                title: GetAuthenticationProvidersResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Invalid value
                        param: cursor
                        value: abc
    parameters: []
  /core/v1/users/authenticationproviders/{id}:
    parameters:
      - name: id
        in: path
        description: Authentication Provider ID
        schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        required: true
    get:
      operationId: getAuthenticationProvider
      tags:
        - Authentication Provider
      summary: Retrieve an Authentication Provider
      description: |-
        Retrieve an existing Authentication Provider by providing its ID.

        ### **Analytic events**
        * USER_AUTHENTICATION_PROVIDER_RETRIEVE_START
        * USER_AUTHENTICATION_PROVIDER_RETRIEVE_SUCCESS
        * USER_AUTHENTICATION_PROVIDER_RETRIEVE_FAIL
      responses:
        '200':
          description: Authentication Provider retrieved
          content:
            application/json:
              schema:
                required:
                  - clientSecret
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Unique identifier for the configured authentication
                          provider. This identifier can be used to retrieve,
                          update or remove the authentication provider
                          configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                      redirectUrl:
                        type: string
                        format: uri
                        description: >-
                          You will need to add this URL to your IdP's allowed
                          redirects list, to enable it to redirect the user back
                          to the wallet upon successful authentication with your
                          IdP. If you are using Auth0 as your identity provider,
                          [this
                          guide](https://auth0.com/docs/authenticate/login/redirect-users-after-login)
                          shows how to add callback URLs. For others, consult
                          your provider for instructions on adding callback
                          URLs.
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/oauth/authentication/callback
                      url:
                        type: string
                        format: uri
                        description: >-
                          Base url for your Authentication Provider well-known
                          endpoint.
                  - type: object
                    required:
                      - clientId
                    properties:
                      scope:
                        type: array
                        description: >-
                          OpenID scopes to use during authentication. Each scope
                          returns a set of user attributes which are called
                          claims. Be sure to test that right scopes are added to
                          get all the information you need.
                        example:
                          - email
                        default:
                          - openid
                          - profile
                          - email
                        items:
                          type: string
                      clientId:
                        type: string
                        description: >-
                          The client ID of the application client created on
                          your IdP.
                        example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
                      clientSecret:
                        type: string
                        description: >-
                          The client secret of the application client created on
                          your IdP.
                      tokenEndpointAuthMethod:
                        type: string
                        description: >-
                          Authentication method for your IdP token endpoint:

                          - `client_secret_post`: Your credentials are passed as
                          parameters in the request body.

                          - `client_secret_basic` (default): Your credentials
                          are passed as a base 64 encoded token.
                        example: client_secret_post
                        default: client_secret_basic
                        enum:
                          - client_secret_basic
                          - client_secret_post
                      staticRequestParameters:
                        type: object
                        maxProperties: 1000
                        description: >-
                          Additional parameters (maximum 1000 entries allowed)
                          that will be included in the request to your IdP.
                          These parameters are identical for every request as
                          defined in your configuration. An example would be
                          setting the prompt to be login to let your IdP know it
                          should show the login page every time. Keys must be
                          strings. Values of top-level object keys must
                          stringify to less than 1000 characters.
                        additionalProperties:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
                            - type: array
                            - type: object
                        example:
                          prompt: login
                          max_age: 10000
                      forwardedRequestParameters:
                        type: array
                        description: >-
                          In contrast to `staticRequestParameters`, you can
                          provide dynamic parameters that are fetched uniquely
                          for each request to make the user journey more
                          seamless. You can forward params to your IdP like
                          `login_hint` which will pass the email of the user
                          starting the flow. Values are limited to 1000
                          characters each, and cannot override any core
                          [Authorize
                          Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                        examples:
                          - login_hint
                        items:
                          type: string
                          maxLength: 1000
                      claimsToPersist:
                        type: array
                        description: >-
                          List of claims to persist from your IdP to MATTR VII.
                          If you have attributes from the ID token (e.g. email,
                          picture, etc.) that you would like persisted on MATTR
                          VII, add them to this array. By default this array is
                          empty, meaning no claims are persisted on MATTR VII.
                        items:
                          type: string
                        default: []
                        example:
                          - first_name
                          - last_name
                          - email
                  - type: object
                    properties:
                      clientSecret:
                        type: string
                        description: >-
                          Your authentication provider client secret will be
                          masked in the response without revealing the actual
                          secret. If the secret is less than 20 characters it
                          will be completely masked, and if it is over 20 only
                          the last 5 characters are revealed.
                        example: >-
                          ***********************************************************6-OjH
                title: CreateAuthenticationProviderResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: authenticationProviderId
                        value: abc
        '404':
          description: Authentication Provider not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Authentication Provider not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: authenticationProviderId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    put:
      operationId: updateAuthenticationProvider
      tags:
        - Authentication Provider
      summary: Update an Authentication Provider
      description: |
        Updates an existing Authentication Provider by providing its ID.

        ### **Analytic events**
        * USER_AUTHENTICATION_PROVIDER_UPDATE_START
        * USER_AUTHENTICATION_PROVIDER_UPDATE_SUCCESS
        * USER_AUTHENTICATION_PROVIDER_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              allOf:
                - type: object
                  required:
                    - clientId
                  properties:
                    scope:
                      type: array
                      description: >-
                        OpenID scopes to use during authentication. Each scope
                        returns a set of user attributes which are called
                        claims. Be sure to test that right scopes are added to
                        get all the information you need.
                      example:
                        - email
                      default:
                        - openid
                        - profile
                        - email
                      items:
                        type: string
                    clientId:
                      type: string
                      description: >-
                        The client ID of the application client created on your
                        IdP.
                      example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
                    clientSecret:
                      type: string
                      description: >-
                        The client secret of the application client created on
                        your IdP.
                    tokenEndpointAuthMethod:
                      type: string
                      description: >-
                        Authentication method for your IdP token endpoint:

                        - `client_secret_post`: Your credentials are passed as
                        parameters in the request body.

                        - `client_secret_basic` (default): Your credentials are
                        passed as a base 64 encoded token.
                      example: client_secret_post
                      default: client_secret_basic
                      enum:
                        - client_secret_basic
                        - client_secret_post
                    staticRequestParameters:
                      type: object
                      maxProperties: 1000
                      description: >-
                        Additional parameters (maximum 1000 entries allowed)
                        that will be included in the request to your IdP. These
                        parameters are identical for every request as defined in
                        your configuration. An example would be setting the
                        prompt to be login to let your IdP know it should show
                        the login page every time. Keys must be strings. Values
                        of top-level object keys must stringify to less than
                        1000 characters.
                      additionalProperties:
                        oneOf:
                          - type: string
                          - type: number
                          - type: boolean
                          - type: array
                          - type: object
                      example:
                        prompt: login
                        max_age: 10000
                    forwardedRequestParameters:
                      type: array
                      description: >-
                        In contrast to `staticRequestParameters`, you can
                        provide dynamic parameters that are fetched uniquely for
                        each request to make the user journey more seamless. You
                        can forward params to your IdP like `login_hint` which
                        will pass the email of the user starting the flow.
                        Values are limited to 1000 characters each, and cannot
                        override any core [Authorize
                        Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                      examples:
                        - login_hint
                      items:
                        type: string
                        maxLength: 1000
                    claimsToPersist:
                      type: array
                      description: >-
                        List of claims to persist from your IdP to MATTR VII. If
                        you have attributes from the ID token (e.g. email,
                        picture, etc.) that you would like persisted on MATTR
                        VII, add them to this array. By default this array is
                        empty, meaning no claims are persisted on MATTR VII.
                      items:
                        type: string
                      default: []
                      example:
                        - first_name
                        - last_name
                        - email
                - type: object
                  properties:
                    clientSecret:
                      description: >-
                        The client secret of the application client created on
                        your IdP.
                      example: >-
                        QNwfa4Yi4Im9zy1u_15n7SzWKt-9G5cdH0r1bONRpUPfN-UIRaaXv_90z8V6-OjH
        description: Update an Authentication Provider
      responses:
        '200':
          description: Authentication Provider updated
          content:
            application/json:
              schema:
                required:
                  - clientSecret
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Unique identifier for the configured authentication
                          provider. This identifier can be used to retrieve,
                          update or remove the authentication provider
                          configuration.
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                      redirectUrl:
                        type: string
                        format: uri
                        description: >-
                          You will need to add this URL to your IdP's allowed
                          redirects list, to enable it to redirect the user back
                          to the wallet upon successful authentication with your
                          IdP. If you are using Auth0 as your identity provider,
                          [this
                          guide](https://auth0.com/docs/authenticate/login/redirect-users-after-login)
                          shows how to add callback URLs. For others, consult
                          your provider for instructions on adding callback
                          URLs.
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/oauth/authentication/callback
                      url:
                        type: string
                        format: uri
                        description: >-
                          Base url for your Authentication Provider well-known
                          endpoint.
                  - type: object
                    required:
                      - clientId
                    properties:
                      scope:
                        type: array
                        description: >-
                          OpenID scopes to use during authentication. Each scope
                          returns a set of user attributes which are called
                          claims. Be sure to test that right scopes are added to
                          get all the information you need.
                        example:
                          - email
                        default:
                          - openid
                          - profile
                          - email
                        items:
                          type: string
                      clientId:
                        type: string
                        description: >-
                          The client ID of the application client created on
                          your IdP.
                        example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
                      clientSecret:
                        type: string
                        description: >-
                          The client secret of the application client created on
                          your IdP.
                      tokenEndpointAuthMethod:
                        type: string
                        description: >-
                          Authentication method for your IdP token endpoint:

                          - `client_secret_post`: Your credentials are passed as
                          parameters in the request body.

                          - `client_secret_basic` (default): Your credentials
                          are passed as a base 64 encoded token.
                        example: client_secret_post
                        default: client_secret_basic
                        enum:
                          - client_secret_basic
                          - client_secret_post
                      staticRequestParameters:
                        type: object
                        maxProperties: 1000
                        description: >-
                          Additional parameters (maximum 1000 entries allowed)
                          that will be included in the request to your IdP.
                          These parameters are identical for every request as
                          defined in your configuration. An example would be
                          setting the prompt to be login to let your IdP know it
                          should show the login page every time. Keys must be
                          strings. Values of top-level object keys must
                          stringify to less than 1000 characters.
                        additionalProperties:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
                            - type: array
                            - type: object
                        example:
                          prompt: login
                          max_age: 10000
                      forwardedRequestParameters:
                        type: array
                        description: >-
                          In contrast to `staticRequestParameters`, you can
                          provide dynamic parameters that are fetched uniquely
                          for each request to make the user journey more
                          seamless. You can forward params to your IdP like
                          `login_hint` which will pass the email of the user
                          starting the flow. Values are limited to 1000
                          characters each, and cannot override any core
                          [Authorize
                          Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                        examples:
                          - login_hint
                        items:
                          type: string
                          maxLength: 1000
                      claimsToPersist:
                        type: array
                        description: >-
                          List of claims to persist from your IdP to MATTR VII.
                          If you have attributes from the ID token (e.g. email,
                          picture, etc.) that you would like persisted on MATTR
                          VII, add them to this array. By default this array is
                          empty, meaning no claims are persisted on MATTR VII.
                        items:
                          type: string
                        default: []
                        example:
                          - first_name
                          - last_name
                          - email
                  - type: object
                    properties:
                      clientSecret:
                        type: string
                        description: >-
                          Your authentication provider client secret will be
                          masked in the response without revealing the actual
                          secret. If the secret is less than 20 characters it
                          will be completely masked, and if it is over 20 only
                          the last 5 characters are revealed.
                        example: >-
                          ***********************************************************6-OjH
                title: CreateAuthenticationProviderResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
        '404':
          description: Authentication Provider not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Authentication Provider not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: authenticationProviderId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    delete:
      operationId: deleteAuthenticationProvider
      tags:
        - Authentication Provider
      summary: Delete an Authentication Provider
      description: |
        Deletes an existing Authentication Provider by providing its ID.

        ### **Analytic events**
        * USER_AUTHENTICATION_PROVIDER_DELETE_START
        * USER_AUTHENTICATION_PROVIDER_DELETE_SUCCESS
        * USER_AUTHENTICATION_PROVIDER_DELETE_FAIL
      responses:
        '204':
          description: Authentication Provider deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: authenticationProviderId
                        value: abc
        '404':
          description: Authentication Provider not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Authentication Provider not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: authenticationProviderId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
  /core/v1/openid/configuration:
    put:
      operationId: updateOpenIdConfiguration
      tags:
        - Interaction Hook
      summary: Configure Interaction Hook
      description: >-
        Configure the Interaction Hook for the OpenID4VCI protocol on your
        tenant.

        Many credential issuance journeys require the issuer to perform custom
        interactions with the user. This could be gathering more information,
        performing additional authentication steps (E.g, 2FA, MFA or biometric
        checks) or communicating the terms of service. To facilitate this
        requirement, you can configure MATTR VII to invoke an interaction hook
        which will redirect the user to a custom component during the credential
        issuance journey. This redirect happens **after** the user is
        authenticated with your configured identity provider but **before** the
        credential is issued to the user. Upon successful completion of the
        interaction hook, your custom component will redirect the user back to
        their digital wallet to complete the credential issuance flow. Your
        interaction hook component can be either a web or native application. 
        We recommend using a web interface because it's more compatible with
        most scenarios.

        > You can only configure one interaction hook on your MATTR VII tenant.
        If you require several custom interactions as part of the credential
        issuance workflow, they should all be linked into a single interaction
        hook component.


        ### **Analytic events**

        * CREDENTIAL_PROVIDER_OPENID_CONFIGURATION_UPDATE_START

        * CREDENTIAL_PROVIDER_OPENID_CONFIGURATION_UPDATE_SUCCESS

        * CREDENTIAL_PROVIDER_OPENID_CONFIGURATION_UPDATE_FAIL
      requestBody:
        description: The Interaction Hook configuration payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interactionHook:
                  type: object
                  description: Interaction Hook configuration.
                  properties:
                    url:
                      type: string
                      format: uri
                      description: >-
                        The interaction hook URL that the user will be
                        redirected to after completing the authentication
                        process:

                        - Must be a valid URL.

                        - Must use the HTTPS protocol.

                        - Must not be an IP address.

                        - Must not include query parameters. Port and fragment
                        parameters will be dropped. 

                        - Must have a valid public TLD.

                        - Unicode will be converted to ASCII.
                      example: https://example-university.com/callback
                    claims:
                      type: array
                      description: >-
                        An array of user attributes that will be returned in the
                        authentication response. These claims are included in
                        the session token that is sent to the interaction hook.
                        Claims can only include alphanumeric characters, ''_'',
                        or ''-''. If the value is empty or not defined, no
                        claims are sent.
                      items:
                        type: string
                      default: []
                      example:
                        - first_name
                        - last_name
                        - email
                    sessionTimeoutInSec:
                      type: number
                      description: >-
                        Interaction hook session duration (in seconds). Once a
                        session expires, the user is shown an error when they
                        are redirected. If not specified, the default
                        environment session duration is applied.
                      example: 1200
                      minimum: 300
                      maximum: 7200
                    disabled:
                      type: boolean
                      description: >-
                        Indicates whether the interactions hook is disabled.
                        When `false`, the interactions hook is **enabled** and
                        users will be redirected to your configured interaction
                        hook component after they've authenticated themselves
                        against your IdP.
                      default: true
                      example: false
                  title: OpenIdConfigurationInteractionHookRequest
              title: UpdateOpenIdConfigurationRequest
      responses:
        '200':
          description: Interaction Hook configured
          content:
            application/json:
              schema:
                type: object
                properties:
                  interactionHook:
                    type: object
                    description: Interaction Hook configuration.
                    allOf:
                      - type: object
                        description: Interaction Hook configuration.
                        properties:
                          url:
                            type: string
                            format: uri
                            description: >-
                              The interaction hook URL that the user will be
                              redirected to after completing the authentication
                              process:

                              - Must be a valid URL.

                              - Must use the HTTPS protocol.

                              - Must not be an IP address.

                              - Must not include query parameters. Port and
                              fragment parameters will be dropped. 

                              - Must have a valid public TLD.

                              - Unicode will be converted to ASCII.
                            example: https://example-university.com/callback
                          claims:
                            type: array
                            description: >-
                              An array of user attributes that will be returned
                              in the authentication response. These claims are
                              included in the session token that is sent to the
                              interaction hook. Claims can only include
                              alphanumeric characters, ''_'', or ''-''. If the
                              value is empty or not defined, no claims are sent.
                            items:
                              type: string
                            default: []
                            example:
                              - first_name
                              - last_name
                              - email
                          sessionTimeoutInSec:
                            type: number
                            description: >-
                              Interaction hook session duration (in seconds).
                              Once a session expires, the user is shown an error
                              when they are redirected. If not specified, the
                              default environment session duration is applied.
                            example: 1200
                            minimum: 300
                            maximum: 7200
                          disabled:
                            type: boolean
                            description: >-
                              Indicates whether the interactions hook is
                              disabled. When `false`, the interactions hook is
                              **enabled** and users will be redirected to your
                              configured interaction hook component after
                              they've authenticated themselves against your IdP.
                            default: true
                            example: false
                        title: OpenIdConfigurationInteractionHookRequest
                      - type: object
                        properties:
                          secret:
                            type: string
                            description: >-
                              A Base64 encoded HMAC secret that must be used by
                              your interaction hook component to sign a new JWT
                              with any additional claims that you may include.
                              Refer to [Use an interaction
                              hook](https://learn.mattr.global/tutorials/offer/openid-credential-provisioning/configure-interaction-hook/use)
                              for more information.
                            example: dGtUrijBOT6UUJ8JO4kAFyGfhahDlVVeIk/sPbWTa7c=
                    title: OpenIdConfigurationInteractionHook
                title: OpenIdConfiguration
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: interactionHook.url
    get:
      operationId: getOpenIdConfiguration
      tags:
        - Interaction Hook
      summary: Retrieve Interaction Hook
      description: |
        Retrieves the Interaction Hook configuration from your tenant.

        ### **Analytic events**
        * CREDENTIAL_PROVIDER_OPENID_CONFIGURATION_RETRIEVE_START
        * CREDENTIAL_PROVIDER_OPENID_CONFIGURATION_RETRIEVE_SUCCESS
        * CREDENTIAL_PROVIDER_OPENID_CONFIGURATION_RETRIEVE_FAIL
      responses:
        '200':
          description: Interaction Hook configuration retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  interactionHook:
                    type: object
                    description: Interaction Hook configuration.
                    allOf:
                      - type: object
                        description: Interaction Hook configuration.
                        properties:
                          url:
                            type: string
                            format: uri
                            description: >-
                              The interaction hook URL that the user will be
                              redirected to after completing the authentication
                              process:

                              - Must be a valid URL.

                              - Must use the HTTPS protocol.

                              - Must not be an IP address.

                              - Must not include query parameters. Port and
                              fragment parameters will be dropped. 

                              - Must have a valid public TLD.

                              - Unicode will be converted to ASCII.
                            example: https://example-university.com/callback
                          claims:
                            type: array
                            description: >-
                              An array of user attributes that will be returned
                              in the authentication response. These claims are
                              included in the session token that is sent to the
                              interaction hook. Claims can only include
                              alphanumeric characters, ''_'', or ''-''. If the
                              value is empty or not defined, no claims are sent.
                            items:
                              type: string
                            default: []
                            example:
                              - first_name
                              - last_name
                              - email
                          sessionTimeoutInSec:
                            type: number
                            description: >-
                              Interaction hook session duration (in seconds).
                              Once a session expires, the user is shown an error
                              when they are redirected. If not specified, the
                              default environment session duration is applied.
                            example: 1200
                            minimum: 300
                            maximum: 7200
                          disabled:
                            type: boolean
                            description: >-
                              Indicates whether the interactions hook is
                              disabled. When `false`, the interactions hook is
                              **enabled** and users will be redirected to your
                              configured interaction hook component after
                              they've authenticated themselves against your IdP.
                            default: true
                            example: false
                        title: OpenIdConfigurationInteractionHookRequest
                      - type: object
                        properties:
                          secret:
                            type: string
                            description: >-
                              A Base64 encoded HMAC secret that must be used by
                              your interaction hook component to sign a new JWT
                              with any additional claims that you may include.
                              Refer to [Use an interaction
                              hook](https://learn.mattr.global/tutorials/offer/openid-credential-provisioning/configure-interaction-hook/use)
                              for more information.
                            example: dGtUrijBOT6UUJ8JO4kAFyGfhahDlVVeIk/sPbWTa7c=
                    title: OpenIdConfigurationInteractionHook
                title: OpenIdConfiguration
  /core/v1/claimsources:
    post:
      operationId: createClaimSource
      tags:
        - Claims Source
      summary: Configure a claims source
      description: >
        Configures a new claims source for your tenant. When issuing a new
        credential, MATTR VII will make either a GET or a POST request to the
        claims source using the configured request parameters and fetch
        available data. This fetched data can then be included in the issued
        credential.


        ### **Analytic event**

        * CLAIM_SOURCE_CREATE_START

        * CLAIM_SOURCE_CREATE_SUCCESS

        * CLAIM_SOURCE_CREATE_FAIL
      requestBody:
        description: The claim source payload
        required: true
        content:
          application/json:
            schema:
              allOf:
                - allOf:
                    - type: object
                      required:
                        - name
                        - url
                        - requestParameters
                      properties:
                        name:
                          type: string
                          description: Claims source name.
                          example: My claims from example.com
                        url:
                          type: string
                          description: |-
                            Claims source URL:
                            - Must be a valid URL.
                            - Must use the HTTPS protocol.
                            - Must not be an IP address.
                            - Must not include query parameters.
                            - Unicode will be converted to ASCII.
                          example: https://example.com
                        requestMethod:
                          type: string
                          description: >-
                            Indicates the request method MATTR VII will use when
                            retrieving data from this claims source. Both the
                            GET and POST method are supported. If no value is
                            provided, GET is used by default.

                            When using POST, all `requestParameters` must be
                            included in the request body in JSON format.
                          enum:
                            - GET
                            - POST
                        requestParameters:
                          description: >-
                            Use this object to define how to map request
                            parameters that are sent to your claims source using
                            the `mapFrom` and `defaultValue` properties:

                            - When only providing `mapFrom`, the request
                            parameter will be mapped from the defined path. If
                            mapping fails, no alternative value is used. You can
                            map data from both the `claims` and
                            `credentialConfiguration` objects.

                            - When providing both `mapFrom` and `defaultValue`,
                            MATTR VII will attempt to map the request parameter
                            from the defined path. If mapping fails, the
                            `defaultValue` is used instead.

                            - When only providing `defaultValue`, its value is
                            used to populate the request parameter, regardless
                            of any available claims values.
                          oneOf:
                            - type: object
                              title: Mapping only
                              required:
                                - mapFrom
                              properties:
                                mapFrom:
                                  type: string
                                  description: Path to map the claim from.
                                  example: claims.accountType
                            - type: object
                              title: Mapping with fallback
                              required:
                                - mapFrom
                                - defaultValue
                              properties:
                                mapFrom:
                                  type: string
                                  description: Path to map the claim from.
                                  example: claims.accountType
                                defaultValue:
                                  description: >-
                                    Static value to be used when `mapFrom` fails
                                    or evaluated to undefined (attribute doesn't
                                    exist).
                                  oneOf:
                                    - type: string
                                    - type: array
                                      items: {}
                                    - type: object
                            - type: object
                              title: Static value
                              required:
                                - defaultValue
                              properties:
                                defaultValue:
                                  description: >-
                                    Static value to be used for all issued
                                    credentials, without querying the claims
                                    source.
                                  oneOf:
                                    - type: string
                                    - type: array
                                      items: {}
                                    - type: object
                    - type: object
                      required:
                        - authorization
                      properties:
                        authorization:
                          required:
                            - clientSecret
                            - value
                          description: >-
                            Authentication method configuration to access the
                            claims source.
                          oneOf:
                            - title: API Key
                              description: >-
                                API Key used to authenticate the request to the
                                claims source server.
                              allOf:
                                - title: API Key
                                  description: API Key for claim source authorization.
                                  type: object
                                  required:
                                    - type
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - api-key
                                      example: api-key
                                    value:
                                      type: string
                                      example: >-
                                        6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                                - type: object
                                  properties:
                                    value:
                                      type: string
                                      description: >-
                                        API key value. Note that MATTR VII does
                                        not validate your input, which means
                                        it's up to you to provide the correct
                                        API key for your claim sources.
                                      example: >-
                                        6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                            - title: OAuth Client Credentials
                              description: >-
                                OAuth client credentials used for getting an
                                access token for the claim source.
                              type: object
                              allOf:
                                - type: object
                                  required:
                                    - type
                                    - tokenEndpoint
                                    - clientId
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - oauth-client-credentials
                                      example:
                                        - oauth-client-credentials
                                    tokenEndpoint:
                                      type: string
                                      description: >-
                                        OAuth 2.0 token endpoint URL for
                                        obtaining an access token for this
                                        claims source.
                                      format: url
                                    clientId:
                                      type: string
                                      description: >-
                                        Your client identifier for this claims
                                        source.
                                    clientSecret:
                                      type: string
                                      description: >-
                                        Your client secret for this claims
                                        source.
                                    tokenEndpointAuthMethod:
                                      type: string
                                      enum:
                                        - client_secret_basic
                                        - client_secret_post
                                      description: >-
                                        Two authentication methods are
                                        available:

                                        - `client_secret_basic` (default):
                                        Credentials are passed as a base 64
                                        encoded basic token.

                                        - `client_secret_post`: Credentials are
                                        passed as parameters within the request
                                        body.
                                    audience:
                                      type: string
                                      description: >-
                                        Optional audience for the claims source
                                        token.
                                - type: object
                                  properties:
                                    clientSecret:
                                      type: string
                                      description: >-
                                        OAuth 2.0 client secret that will be
                                        used for the token endpoint request.
                                      example: 1b41186347e4cc716155155cdecbded07536d0f5
            examples:
              Authorization with x-api-key header:
                value:
                  name: Claims source accepting a x-api-key header
                  url: https://example.com/api/data
                  authorization:
                    type: api-key
                    value: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                  requestParameters:
                    account_type:
                      mapFrom: claims.accountType
                      defaultValue: account.student
                    account_id:
                      mapFrom: claims.accountId
              Authorization with OAuth 2.0 client credentials:
                value:
                  name: Claims source accepting an OAuth 2.0 bearer token
                  url: https://example.com/api/data
                  authorization:
                    type: oauth-client-credentials
                    clientId: afd16fec-8131-4f0c-8f20-1cd5d67f8e29
                    clientSecret: 1b41186347e4cc716155155cdecbded07536d0f5
                    tokenEndpoint: https://example.com/oauth/token
                    tokenEndpointAuthMethod: client_secret_basic
                    audience: example.claim.source
                  requestMethod: POST
                  requestParameters:
                    account_type:
                      mapFrom: claims.accountType
                      defaultValue: account.student
                    account_id:
                      mapFrom: claims.accountId
      responses:
        '201':
          description: Claims source configured
          content:
            application/json:
              schema:
                description: >-
                  Returns the claims source details, including a
                  `claimSourceId`. You will use the this identifier to reference
                  your claims source when creating your credential
                  configuration.
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Claims source unique identifier
                        example: 57fa09e2-82f3-4d3d-9eca-d0253e84a4e6
                  - type: object
                    required:
                      - name
                      - url
                      - requestParameters
                    properties:
                      name:
                        type: string
                        description: Claims source name.
                        example: My claims from example.com
                      url:
                        type: string
                        description: |-
                          Claims source URL:
                          - Must be a valid URL.
                          - Must use the HTTPS protocol.
                          - Must not be an IP address.
                          - Must not include query parameters.
                          - Unicode will be converted to ASCII.
                        example: https://example.com
                      requestMethod:
                        type: string
                        description: >-
                          Indicates the request method MATTR VII will use when
                          retrieving data from this claims source. Both the GET
                          and POST method are supported. If no value is
                          provided, GET is used by default.

                          When using POST, all `requestParameters` must be
                          included in the request body in JSON format.
                        enum:
                          - GET
                          - POST
                      requestParameters:
                        description: >-
                          Use this object to define how to map request
                          parameters that are sent to your claims source using
                          the `mapFrom` and `defaultValue` properties:

                          - When only providing `mapFrom`, the request parameter
                          will be mapped from the defined path. If mapping
                          fails, no alternative value is used. You can map data
                          from both the `claims` and `credentialConfiguration`
                          objects.

                          - When providing both `mapFrom` and `defaultValue`,
                          MATTR VII will attempt to map the request parameter
                          from the defined path. If mapping fails, the
                          `defaultValue` is used instead.

                          - When only providing `defaultValue`, its value is
                          used to populate the request parameter, regardless of
                          any available claims values.
                        oneOf:
                          - type: object
                            title: Mapping only
                            required:
                              - mapFrom
                            properties:
                              mapFrom:
                                type: string
                                description: Path to map the claim from.
                                example: claims.accountType
                          - type: object
                            title: Mapping with fallback
                            required:
                              - mapFrom
                              - defaultValue
                            properties:
                              mapFrom:
                                type: string
                                description: Path to map the claim from.
                                example: claims.accountType
                              defaultValue:
                                description: >-
                                  Static value to be used when `mapFrom` fails
                                  or evaluated to undefined (attribute doesn't
                                  exist).
                                oneOf:
                                  - type: string
                                  - type: array
                                    items: {}
                                  - type: object
                          - type: object
                            title: Static value
                            required:
                              - defaultValue
                            properties:
                              defaultValue:
                                description: >-
                                  Static value to be used for all issued
                                  credentials, without querying the claims
                                  source.
                                oneOf:
                                  - type: string
                                  - type: array
                                    items: {}
                                  - type: object
                  - type: object
                    required:
                      - authorization
                    properties:
                      authorization:
                        description: >-
                          Authentication method configuration to access the
                          claims source.
                        oneOf:
                          - title: API Key
                            description: >-
                              API Key used to authenticate the request to the
                              claims source server.
                            required:
                              - value
                            allOf:
                              - title: API Key
                                description: API Key for claim source authorization.
                                type: object
                                required:
                                  - type
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - api-key
                                    example: api-key
                                  value:
                                    type: string
                                    example: >-
                                      6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                              - type: object
                                properties:
                                  value:
                                    type: string
                                    description: >
                                      Masked API key value. Completely masked if
                                      it is less than 20 characters, while if it
                                      is 20 characters or longer only the last 5
                                      characters are exposed.
                                    example: >-
                                      ****************************************61m1J
                          - title: OAuth Client Credentials
                            description: >-
                              OAuth client credentials used for getting an
                              access token for the claim source.
                            required:
                              - clientSecret
                            allOf:
                              - type: object
                                required:
                                  - type
                                  - tokenEndpoint
                                  - clientId
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - oauth-client-credentials
                                    example:
                                      - oauth-client-credentials
                                  tokenEndpoint:
                                    type: string
                                    description: >-
                                      OAuth 2.0 token endpoint URL for obtaining
                                      an access token for this claims source.
                                    format: url
                                  clientId:
                                    type: string
                                    description: >-
                                      Your client identifier for this claims
                                      source.
                                  clientSecret:
                                    type: string
                                    description: Your client secret for this claims source.
                                  tokenEndpointAuthMethod:
                                    type: string
                                    enum:
                                      - client_secret_basic
                                      - client_secret_post
                                    description: >-
                                      Two authentication methods are available:

                                      - `client_secret_basic` (default):
                                      Credentials are passed as a base 64
                                      encoded basic token.

                                      - `client_secret_post`: Credentials are
                                      passed as parameters within the request
                                      body.
                                  audience:
                                    type: string
                                    description: >-
                                      Optional audience for the claims source
                                      token.
                              - type: object
                                properties:
                                  clientSecret:
                                    type: string
                                    description: >
                                      Masked OAuth 2.0 client secret. Completely
                                      masked if it is less than 20 characters,
                                      while if it is 20 characters or longer
                                      only the last 5 characters are exposed.
                                    example: '***********************************6d0f5'
              examples:
                Authorization with x-api-key header:
                  value:
                    name: Claims source accepting a x-api-key header
                    url: https://example.com/api/data
                    authorization:
                      type: api-key
                      value: '****************************************61m1J'
                    requestParameters:
                      account_type:
                        mapFrom: claims.accountType
                        defaultValue: account.student
                      account_id:
                        mapFrom: claims.accountId
                Authorization with OAuth 2.0 client credentials:
                  value:
                    name: Claims source accepting an OAuth 2.0 bearer token
                    url: https://example.com/api/data
                    authorization:
                      type: oauth-client-credentials
                      clientId: afd16fec-8131-4f0c-8f20-1cd5d67f8e29
                      clientSecret: '***********************************6d0f5'
                      tokenEndpoint: https://example.com/oauth/token
                      tokenEndpointAuthMethod: client_secret_basic
                      audience: example.claim.source
                    requestMethod: POST
                    requestParameters:
                      account_type:
                        mapFrom: claims.accountType
                        defaultValue: account.student
                      account_id:
                        mapFrom: claims.accountId
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
    get:
      operationId: getClaimSources
      tags:
        - Claims Source
      summary: Retrieve all claims sources
      description: |
        Returns a list of all claims sources configured on your tenant.

        ### **Analytic event**
        * CLAIM_SOURCE_RETRIEVE_LIST_START
        * CLAIM_SOURCE_RETRIEVE_LIST_SUCCESS
        * CLAIM_SOURCE_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of entries
      responses:
        '200':
          description: Claims sources retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page.
                  data:
                    type: array
                    items:
                      description: >-
                        Returns the claims source details, including a
                        `claimSourceId`. You will use the this identifier to
                        reference your claims source when creating your
                        credential configuration.
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: Claims source unique identifier
                              example: 57fa09e2-82f3-4d3d-9eca-d0253e84a4e6
                        - type: object
                          required:
                            - name
                            - url
                            - requestParameters
                          properties:
                            name:
                              type: string
                              description: Claims source name.
                              example: My claims from example.com
                            url:
                              type: string
                              description: |-
                                Claims source URL:
                                - Must be a valid URL.
                                - Must use the HTTPS protocol.
                                - Must not be an IP address.
                                - Must not include query parameters.
                                - Unicode will be converted to ASCII.
                              example: https://example.com
                            requestMethod:
                              type: string
                              description: >-
                                Indicates the request method MATTR VII will use
                                when retrieving data from this claims source.
                                Both the GET and POST method are supported. If
                                no value is provided, GET is used by default.

                                When using POST, all `requestParameters` must be
                                included in the request body in JSON format.
                              enum:
                                - GET
                                - POST
                            requestParameters:
                              description: >-
                                Use this object to define how to map request
                                parameters that are sent to your claims source
                                using the `mapFrom` and `defaultValue`
                                properties:

                                - When only providing `mapFrom`, the request
                                parameter will be mapped from the defined path.
                                If mapping fails, no alternative value is used.
                                You can map data from both the `claims` and
                                `credentialConfiguration` objects.

                                - When providing both `mapFrom` and
                                `defaultValue`, MATTR VII will attempt to map
                                the request parameter from the defined path. If
                                mapping fails, the `defaultValue` is used
                                instead.

                                - When only providing `defaultValue`, its value
                                is used to populate the request parameter,
                                regardless of any available claims values.
                              oneOf:
                                - type: object
                                  title: Mapping only
                                  required:
                                    - mapFrom
                                  properties:
                                    mapFrom:
                                      type: string
                                      description: Path to map the claim from.
                                      example: claims.accountType
                                - type: object
                                  title: Mapping with fallback
                                  required:
                                    - mapFrom
                                    - defaultValue
                                  properties:
                                    mapFrom:
                                      type: string
                                      description: Path to map the claim from.
                                      example: claims.accountType
                                    defaultValue:
                                      description: >-
                                        Static value to be used when `mapFrom`
                                        fails or evaluated to undefined
                                        (attribute doesn't exist).
                                      oneOf:
                                        - type: string
                                        - type: array
                                          items: {}
                                        - type: object
                                - type: object
                                  title: Static value
                                  required:
                                    - defaultValue
                                  properties:
                                    defaultValue:
                                      description: >-
                                        Static value to be used for all issued
                                        credentials, without querying the claims
                                        source.
                                      oneOf:
                                        - type: string
                                        - type: array
                                          items: {}
                                        - type: object
                        - type: object
                          required:
                            - authorization
                          properties:
                            authorization:
                              description: >-
                                Authentication method configuration to access
                                the claims source.
                              oneOf:
                                - title: API Key
                                  description: >-
                                    API Key used to authenticate the request to
                                    the claims source server.
                                  required:
                                    - value
                                  allOf:
                                    - title: API Key
                                      description: API Key for claim source authorization.
                                      type: object
                                      required:
                                        - type
                                      properties:
                                        type:
                                          type: string
                                          enum:
                                            - api-key
                                          example: api-key
                                        value:
                                          type: string
                                          example: >-
                                            6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                                    - type: object
                                      properties:
                                        value:
                                          type: string
                                          description: >
                                            Masked API key value. Completely masked
                                            if it is less than 20 characters, while
                                            if it is 20 characters or longer only
                                            the last 5 characters are exposed.
                                          example: >-
                                            ****************************************61m1J
                                - title: OAuth Client Credentials
                                  description: >-
                                    OAuth client credentials used for getting an
                                    access token for the claim source.
                                  required:
                                    - clientSecret
                                  allOf:
                                    - type: object
                                      required:
                                        - type
                                        - tokenEndpoint
                                        - clientId
                                      properties:
                                        type:
                                          type: string
                                          enum:
                                            - oauth-client-credentials
                                          example:
                                            - oauth-client-credentials
                                        tokenEndpoint:
                                          type: string
                                          description: >-
                                            OAuth 2.0 token endpoint URL for
                                            obtaining an access token for this
                                            claims source.
                                          format: url
                                        clientId:
                                          type: string
                                          description: >-
                                            Your client identifier for this claims
                                            source.
                                        clientSecret:
                                          type: string
                                          description: >-
                                            Your client secret for this claims
                                            source.
                                        tokenEndpointAuthMethod:
                                          type: string
                                          enum:
                                            - client_secret_basic
                                            - client_secret_post
                                          description: >-
                                            Two authentication methods are
                                            available:

                                            - `client_secret_basic` (default):
                                            Credentials are passed as a base 64
                                            encoded basic token.

                                            - `client_secret_post`: Credentials are
                                            passed as parameters within the request
                                            body.
                                        audience:
                                          type: string
                                          description: >-
                                            Optional audience for the claims source
                                            token.
                                    - type: object
                                      properties:
                                        clientSecret:
                                          type: string
                                          description: >
                                            Masked OAuth 2.0 client secret.
                                            Completely masked if it is less than 20
                                            characters, while if it is 20 characters
                                            or longer only the last 5 characters are
                                            exposed.
                                          example: '***********************************6d0f5'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Invalid value
                        param: cursor
                        value: abc
    parameters: []
  /core/v1/claimsources/{id}:
    parameters:
      - name: id
        in: path
        description: Claims source ID
        schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        required: true
    get:
      operationId: getClaimSource
      tags:
        - Claims Source
      summary: Retrieve a claims source
      description: |
        Retrieves an existing claims source by providing its `claimSourceID`.

        ### **Analytic event**
        * CLAIM_SOURCE_RETRIEVE_START
        * CLAIM_SOURCE_RETRIEVE_SUCCESS
        * CLAIM_SOURCE_RETRIEVE_FAIL
      responses:
        '200':
          description: Claims source retrieved
          content:
            application/json:
              schema:
                description: >-
                  Returns the claims source details, including a
                  `claimSourceId`. You will use the this identifier to reference
                  your claims source when creating your credential
                  configuration.
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Claims source unique identifier
                        example: 57fa09e2-82f3-4d3d-9eca-d0253e84a4e6
                  - type: object
                    required:
                      - name
                      - url
                      - requestParameters
                    properties:
                      name:
                        type: string
                        description: Claims source name.
                        example: My claims from example.com
                      url:
                        type: string
                        description: |-
                          Claims source URL:
                          - Must be a valid URL.
                          - Must use the HTTPS protocol.
                          - Must not be an IP address.
                          - Must not include query parameters.
                          - Unicode will be converted to ASCII.
                        example: https://example.com
                      requestMethod:
                        type: string
                        description: >-
                          Indicates the request method MATTR VII will use when
                          retrieving data from this claims source. Both the GET
                          and POST method are supported. If no value is
                          provided, GET is used by default.

                          When using POST, all `requestParameters` must be
                          included in the request body in JSON format.
                        enum:
                          - GET
                          - POST
                      requestParameters:
                        description: >-
                          Use this object to define how to map request
                          parameters that are sent to your claims source using
                          the `mapFrom` and `defaultValue` properties:

                          - When only providing `mapFrom`, the request parameter
                          will be mapped from the defined path. If mapping
                          fails, no alternative value is used. You can map data
                          from both the `claims` and `credentialConfiguration`
                          objects.

                          - When providing both `mapFrom` and `defaultValue`,
                          MATTR VII will attempt to map the request parameter
                          from the defined path. If mapping fails, the
                          `defaultValue` is used instead.

                          - When only providing `defaultValue`, its value is
                          used to populate the request parameter, regardless of
                          any available claims values.
                        oneOf:
                          - type: object
                            title: Mapping only
                            required:
                              - mapFrom
                            properties:
                              mapFrom:
                                type: string
                                description: Path to map the claim from.
                                example: claims.accountType
                          - type: object
                            title: Mapping with fallback
                            required:
                              - mapFrom
                              - defaultValue
                            properties:
                              mapFrom:
                                type: string
                                description: Path to map the claim from.
                                example: claims.accountType
                              defaultValue:
                                description: >-
                                  Static value to be used when `mapFrom` fails
                                  or evaluated to undefined (attribute doesn't
                                  exist).
                                oneOf:
                                  - type: string
                                  - type: array
                                    items: {}
                                  - type: object
                          - type: object
                            title: Static value
                            required:
                              - defaultValue
                            properties:
                              defaultValue:
                                description: >-
                                  Static value to be used for all issued
                                  credentials, without querying the claims
                                  source.
                                oneOf:
                                  - type: string
                                  - type: array
                                    items: {}
                                  - type: object
                  - type: object
                    required:
                      - authorization
                    properties:
                      authorization:
                        description: >-
                          Authentication method configuration to access the
                          claims source.
                        oneOf:
                          - title: API Key
                            description: >-
                              API Key used to authenticate the request to the
                              claims source server.
                            required:
                              - value
                            allOf:
                              - title: API Key
                                description: API Key for claim source authorization.
                                type: object
                                required:
                                  - type
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - api-key
                                    example: api-key
                                  value:
                                    type: string
                                    example: >-
                                      6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                              - type: object
                                properties:
                                  value:
                                    type: string
                                    description: >
                                      Masked API key value. Completely masked if
                                      it is less than 20 characters, while if it
                                      is 20 characters or longer only the last 5
                                      characters are exposed.
                                    example: >-
                                      ****************************************61m1J
                          - title: OAuth Client Credentials
                            description: >-
                              OAuth client credentials used for getting an
                              access token for the claim source.
                            required:
                              - clientSecret
                            allOf:
                              - type: object
                                required:
                                  - type
                                  - tokenEndpoint
                                  - clientId
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - oauth-client-credentials
                                    example:
                                      - oauth-client-credentials
                                  tokenEndpoint:
                                    type: string
                                    description: >-
                                      OAuth 2.0 token endpoint URL for obtaining
                                      an access token for this claims source.
                                    format: url
                                  clientId:
                                    type: string
                                    description: >-
                                      Your client identifier for this claims
                                      source.
                                  clientSecret:
                                    type: string
                                    description: Your client secret for this claims source.
                                  tokenEndpointAuthMethod:
                                    type: string
                                    enum:
                                      - client_secret_basic
                                      - client_secret_post
                                    description: >-
                                      Two authentication methods are available:

                                      - `client_secret_basic` (default):
                                      Credentials are passed as a base 64
                                      encoded basic token.

                                      - `client_secret_post`: Credentials are
                                      passed as parameters within the request
                                      body.
                                  audience:
                                    type: string
                                    description: >-
                                      Optional audience for the claims source
                                      token.
                              - type: object
                                properties:
                                  clientSecret:
                                    type: string
                                    description: >
                                      Masked OAuth 2.0 client secret. Completely
                                      masked if it is less than 20 characters,
                                      while if it is 20 characters or longer
                                      only the last 5 characters are exposed.
                                    example: '***********************************6d0f5'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: claimSourceId
                        value: abc
        '404':
          description: Claims source not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Claim Source not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: claimSourceId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    put:
      operationId: updateClaimSource
      tags:
        - Claims Source
      summary: Update a claims source
      description: |
        Updates an existing claim source by providing its `claimSourceID`.

        ### **Analytic event**
        * CLAIM_SOURCE_UPDATE_START
        * CLAIM_SOURCE_UPDATE_SUCCESS
        * CLAIM_SOURCE_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - name
                    - url
                    - requestParameters
                  properties:
                    name:
                      type: string
                      description: Claims source name.
                      example: My claims from example.com
                    url:
                      type: string
                      description: |-
                        Claims source URL:
                        - Must be a valid URL.
                        - Must use the HTTPS protocol.
                        - Must not be an IP address.
                        - Must not include query parameters.
                        - Unicode will be converted to ASCII.
                      example: https://example.com
                    requestMethod:
                      type: string
                      description: >-
                        Indicates the request method MATTR VII will use when
                        retrieving data from this claims source. Both the GET
                        and POST method are supported. If no value is provided,
                        GET is used by default.

                        When using POST, all `requestParameters` must be
                        included in the request body in JSON format.
                      enum:
                        - GET
                        - POST
                    requestParameters:
                      description: >-
                        Use this object to define how to map request parameters
                        that are sent to your claims source using the `mapFrom`
                        and `defaultValue` properties:

                        - When only providing `mapFrom`, the request parameter
                        will be mapped from the defined path. If mapping fails,
                        no alternative value is used. You can map data from both
                        the `claims` and `credentialConfiguration` objects.

                        - When providing both `mapFrom` and `defaultValue`,
                        MATTR VII will attempt to map the request parameter from
                        the defined path. If mapping fails, the `defaultValue`
                        is used instead.

                        - When only providing `defaultValue`, its value is used
                        to populate the request parameter, regardless of any
                        available claims values.
                      oneOf:
                        - type: object
                          title: Mapping only
                          required:
                            - mapFrom
                          properties:
                            mapFrom:
                              type: string
                              description: Path to map the claim from.
                              example: claims.accountType
                        - type: object
                          title: Mapping with fallback
                          required:
                            - mapFrom
                            - defaultValue
                          properties:
                            mapFrom:
                              type: string
                              description: Path to map the claim from.
                              example: claims.accountType
                            defaultValue:
                              description: >-
                                Static value to be used when `mapFrom` fails or
                                evaluated to undefined (attribute doesn't
                                exist).
                              oneOf:
                                - type: string
                                - type: array
                                  items: {}
                                - type: object
                        - type: object
                          title: Static value
                          required:
                            - defaultValue
                          properties:
                            defaultValue:
                              description: >-
                                Static value to be used for all issued
                                credentials, without querying the claims source.
                              oneOf:
                                - type: string
                                - type: array
                                  items: {}
                                - type: object
                - type: object
                  required:
                    - authorization
                  properties:
                    authorization:
                      description: >-
                        Authentication method configuration to access the claims
                        source.
                      oneOf:
                        - title: API Key
                          description: >-
                            API Key used to authenticate the request to the
                            claims source server.
                          allOf:
                            - title: API Key
                              description: API Key for claim source authorization.
                              type: object
                              required:
                                - type
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - api-key
                                  example: api-key
                                value:
                                  type: string
                                  example: >-
                                    6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                            - type: object
                              properties:
                                value:
                                  type: string
                                  description: >-
                                    API key value. Note that MATTR VII does not
                                    validate your input, which means it's up to
                                    you to provide the correct API key for your
                                    claim sources.
                                  example: >-
                                    6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                        - title: OAuth Client Credentials
                          description: >-
                            OAuth client credentials used for getting an access
                            token for the claim source.
                          type: object
                          allOf:
                            - type: object
                              required:
                                - type
                                - tokenEndpoint
                                - clientId
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - oauth-client-credentials
                                  example:
                                    - oauth-client-credentials
                                tokenEndpoint:
                                  type: string
                                  description: >-
                                    OAuth 2.0 token endpoint URL for obtaining
                                    an access token for this claims source.
                                  format: url
                                clientId:
                                  type: string
                                  description: >-
                                    Your client identifier for this claims
                                    source.
                                clientSecret:
                                  type: string
                                  description: Your client secret for this claims source.
                                tokenEndpointAuthMethod:
                                  type: string
                                  enum:
                                    - client_secret_basic
                                    - client_secret_post
                                  description: >-
                                    Two authentication methods are available:

                                    - `client_secret_basic` (default):
                                    Credentials are passed as a base 64 encoded
                                    basic token.

                                    - `client_secret_post`: Credentials are
                                    passed as parameters within the request
                                    body.
                                audience:
                                  type: string
                                  description: >-
                                    Optional audience for the claims source
                                    token.
                            - type: object
                              properties:
                                clientSecret:
                                  type: string
                                  description: >-
                                    OAuth 2.0 client secret that will be used
                                    for the token endpoint request.
                                  example: 1b41186347e4cc716155155cdecbded07536d0f5
        description: The updated claims source payload
      responses:
        '200':
          description: Claims source updated
          content:
            application/json:
              schema:
                description: >-
                  Returns the claims source details, including a
                  `claimSourceId`. You will use the this identifier to reference
                  your claims source when creating your credential
                  configuration.
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Claims source unique identifier
                        example: 57fa09e2-82f3-4d3d-9eca-d0253e84a4e6
                  - type: object
                    required:
                      - name
                      - url
                      - requestParameters
                    properties:
                      name:
                        type: string
                        description: Claims source name.
                        example: My claims from example.com
                      url:
                        type: string
                        description: |-
                          Claims source URL:
                          - Must be a valid URL.
                          - Must use the HTTPS protocol.
                          - Must not be an IP address.
                          - Must not include query parameters.
                          - Unicode will be converted to ASCII.
                        example: https://example.com
                      requestMethod:
                        type: string
                        description: >-
                          Indicates the request method MATTR VII will use when
                          retrieving data from this claims source. Both the GET
                          and POST method are supported. If no value is
                          provided, GET is used by default.

                          When using POST, all `requestParameters` must be
                          included in the request body in JSON format.
                        enum:
                          - GET
                          - POST
                      requestParameters:
                        description: >-
                          Use this object to define how to map request
                          parameters that are sent to your claims source using
                          the `mapFrom` and `defaultValue` properties:

                          - When only providing `mapFrom`, the request parameter
                          will be mapped from the defined path. If mapping
                          fails, no alternative value is used. You can map data
                          from both the `claims` and `credentialConfiguration`
                          objects.

                          - When providing both `mapFrom` and `defaultValue`,
                          MATTR VII will attempt to map the request parameter
                          from the defined path. If mapping fails, the
                          `defaultValue` is used instead.

                          - When only providing `defaultValue`, its value is
                          used to populate the request parameter, regardless of
                          any available claims values.
                        oneOf:
                          - type: object
                            title: Mapping only
                            required:
                              - mapFrom
                            properties:
                              mapFrom:
                                type: string
                                description: Path to map the claim from.
                                example: claims.accountType
                          - type: object
                            title: Mapping with fallback
                            required:
                              - mapFrom
                              - defaultValue
                            properties:
                              mapFrom:
                                type: string
                                description: Path to map the claim from.
                                example: claims.accountType
                              defaultValue:
                                description: >-
                                  Static value to be used when `mapFrom` fails
                                  or evaluated to undefined (attribute doesn't
                                  exist).
                                oneOf:
                                  - type: string
                                  - type: array
                                    items: {}
                                  - type: object
                          - type: object
                            title: Static value
                            required:
                              - defaultValue
                            properties:
                              defaultValue:
                                description: >-
                                  Static value to be used for all issued
                                  credentials, without querying the claims
                                  source.
                                oneOf:
                                  - type: string
                                  - type: array
                                    items: {}
                                  - type: object
                  - type: object
                    required:
                      - authorization
                    properties:
                      authorization:
                        description: >-
                          Authentication method configuration to access the
                          claims source.
                        oneOf:
                          - title: API Key
                            description: >-
                              API Key used to authenticate the request to the
                              claims source server.
                            required:
                              - value
                            allOf:
                              - title: API Key
                                description: API Key for claim source authorization.
                                type: object
                                required:
                                  - type
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - api-key
                                    example: api-key
                                  value:
                                    type: string
                                    example: >-
                                      6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                              - type: object
                                properties:
                                  value:
                                    type: string
                                    description: >
                                      Masked API key value. Completely masked if
                                      it is less than 20 characters, while if it
                                      is 20 characters or longer only the last 5
                                      characters are exposed.
                                    example: >-
                                      ****************************************61m1J
                          - title: OAuth Client Credentials
                            description: >-
                              OAuth client credentials used for getting an
                              access token for the claim source.
                            required:
                              - clientSecret
                            allOf:
                              - type: object
                                required:
                                  - type
                                  - tokenEndpoint
                                  - clientId
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - oauth-client-credentials
                                    example:
                                      - oauth-client-credentials
                                  tokenEndpoint:
                                    type: string
                                    description: >-
                                      OAuth 2.0 token endpoint URL for obtaining
                                      an access token for this claims source.
                                    format: url
                                  clientId:
                                    type: string
                                    description: >-
                                      Your client identifier for this claims
                                      source.
                                  clientSecret:
                                    type: string
                                    description: Your client secret for this claims source.
                                  tokenEndpointAuthMethod:
                                    type: string
                                    enum:
                                      - client_secret_basic
                                      - client_secret_post
                                    description: >-
                                      Two authentication methods are available:

                                      - `client_secret_basic` (default):
                                      Credentials are passed as a base 64
                                      encoded basic token.

                                      - `client_secret_post`: Credentials are
                                      passed as parameters within the request
                                      body.
                                  audience:
                                    type: string
                                    description: >-
                                      Optional audience for the claims source
                                      token.
                              - type: object
                                properties:
                                  clientSecret:
                                    type: string
                                    description: >
                                      Masked OAuth 2.0 client secret. Completely
                                      masked if it is less than 20 characters,
                                      while if it is 20 characters or longer
                                      only the last 5 characters are exposed.
                                    example: '***********************************6d0f5'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
        '404':
          description: Claims source not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Claim Source not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: claimSourceId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    delete:
      operationId: deleteClaimSource
      tags:
        - Claims Source
      summary: Delete a claims source
      description: |
        Deletes an existing claims source by providing its `claimSourceID`.

        ### **Analytic event**
        * CLAIM_SOURCE_DELETE_START
        * CLAIM_SOURCE_DELETE_SUCCESS
        * CLAIM_SOURCE_DELETE_FAIL
      responses:
        '204':
          description: Claims source deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: claimSourceId
                        value: abc
        '404':
          description: Claims source not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Claim Source not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: claimSourceId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
  /core/v1/oauth/authorize:
    get:
      operationId: getOauthAuthorize
      tags:
        - Credential Issuance
      summary: Request authorization for access to resources
      description: >
        This endpoint is used to request authorization from the user for access
        to the requested resources. After the user approves the request, an
        authorization code is returned to the client.

        See
        [https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-authorization-endpoint](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-authorization-endpoint)

        See
        [https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1)


        ### **Analytic events**

        * OPEN_ID_AUTHORIZE_START

        * OPEN_ID_AUTHORIZE_SUCCESS

        * OPEN_ID_AUTHORIZE_FAIL
      security: []
      parameters:
        - name: response_type
          in: query
          description: The response type, which must be 'code'.
          required: true
          schema:
            type: string
            enum:
              - code
        - name: client_id
          in: query
          description: The client identifier.
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: >-
            The URI to which the authorization server will redirect the
            user-agent with the authorization code.
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: The scope of the access request.
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: >-
            An opaque value used by the client to maintain state between the
            request and callback.
          schema:
            type: string
        - name: code_challenge_method
          in: query
          description: The method used to derive the code_challenge, which must be 'S256'.
          required: true
          schema:
            type: string
            enum:
              - S256
        - name: code_challenge
          in: query
          description: A high entropy random challenge generated by the client.
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirection to client application with authorization code
          headers:
            Location:
              description: URL to redirect to with the authorization code
              schema:
                type: string
        '400':
          description: >-
            Bad request. The request was malformed or missing required
            parameters.
        '401':
          description: Unauthorized. The client is not authorized to access this resource.
        '403':
          description: >-
            Forbidden. The authorization server refuses to grant the client
            access to the resource.
        '500':
          description: Internal server error. An unexpected error occurred.
  /core/v1/oauth/token:
    post:
      operationId: postOauthToken
      tags:
        - Credential Issuance
      summary: Exchange authorization code for access token
      description: >
        This endpoint is used to exchange an authorization code for an access
        token. The authorization code is obtained from the authorization
        endpoint after the user has authenticated and granted access.

        See
        [https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-token-endpoint](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-token-endpoint)


        ### **Analytic events**

        * OPEN_ID_TOKEN_START

        * OPEN_ID_TOKEN_SUCCESS

        * OPEN_ID_TOKEN_FAIL
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                  description: The client identifier.
                grant_type:
                  type: string
                  description: The grant type, which must be 'authorization_code'.
                  enum:
                    - authorization_code
                redirect_uri:
                  type: string
                  description: The redirect URI that was used in the authorization request.
                code:
                  type: string
                  description: >-
                    The authorization code obtained from the authorization
                    endpoint.
                code_verifier:
                  type: string
                  description: >-
                    SHA256 hash of the `code_challenge` in the authorization
                    request.
              required:
                - client_id
                - grant_type
                - redirect_uri
                - code
                - code_verifier
      responses:
        '200':
          description: Access token successfully returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The access token.
                  token_type:
                    type: string
                    description: The type of the token, which is always 'Bearer'.
                    enum:
                      - Bearer
                  expires_in:
                    type: integer
                    description: The number of seconds until the token expires.
                  scope:
                    type: string
                    description: The scope of the access token.
        '400':
          description: >-
            Bad request. The request was malformed or missing required
            parameters.
        '401':
          description: Unauthorized. The client is not authorized to access this resource.
        '403':
          description: >-
            Forbidden. The authorization server refuses to grant the client
            access to the resource.
        '500':
          description: Internal server error. An unexpected error occurred.
  /core/v1/openid/credential:
    post:
      operationId: postOpenIdCredential
      summary: Issue a verifiable credential
      tags:
        - Credential Issuance
      description: >-
        Issues a verifiable credential to a subject as part of the OpenID4VCI
        protocol.


        See
        [https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-credential-endpoint](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-credential-endpoint)


        ### **Analytic events**

        * OPEN_ID_CREDENTIAL_START

        * OPEN_ID_CREDENTIAL_SUCCESS

        * OPEN_ID_CREDENTIAL_FAIL
      security:
        - bearerAuthOpenIdCredentials: []
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - title: Web
                  type: object
                  required:
                    - format
                    - credential_definition
                  properties:
                    format:
                      type: string
                      description: >-
                        Credential format, always `ldp_vc` for Web Semantic
                        Credentials.
                      enum:
                        - ldp_vc
                    credential_definition:
                      type: object
                      properties:
                        type:
                          type: array
                          description: >-
                            Credential types, as defined in the credential
                            schema.
                          items:
                            type: string
                        '@context':
                          type: array
                          description: >-
                            Credential contexts, as defined in the credential
                            schema.
                          items:
                            type: string
                      required:
                        - type
                        - '@context'
                    proof:
                      type: object
                      description: >-
                        JSON object containing proof of possession of the key
                        material the issued Credential shall be bound to.
                      properties:
                        proof_type:
                          type: string
                          description: Proof type - must be `jwt`.
                          enum:
                            - jwt
                        jwt:
                          type: string
                          description: The JSON Web Token (JWT) containing the proof data.
                - title: Compact
                  type: object
                  required:
                    - format
                    - type
                  properties:
                    format:
                      type: string
                      description: Credential format, always `cwt` for Compact Credentials.
                      example: cwt
                      enum:
                        - cwt
                    type:
                      type: string
                - title: Compact Semantic
                  type: object
                  required:
                    - format
                    - types
                  properties:
                    format:
                      type: string
                      description: >-
                        Credential format, always `cwt_vc` for Compact Semantic
                        Credentials.
                      enum:
                        - cwt_vc
                    types:
                      type: array
                      items:
                        type: string
                - title: Mobile
                  type: object
                  required:
                    - format
                    - doctype
                  properties:
                    format:
                      type: string
                      description: >-
                        Credential format, always `mso_mdoc` for Mobile
                        Credentials.
                      enum:
                        - mso_mdoc
                    doctype:
                      type: string
                    proof:
                      type: object
                      description: >-
                        JSON object containing proof of possession of the key
                        material the issued credential shall be bound to.
                      properties:
                        proof_type:
                          type: string
                          description: Proof type - must be `jwt`.
                          enum:
                            - jwt
                        jwt:
                          type: string
                          description: The JSON Web Token (JWT) containing the proof data.
            examples:
              web-semantic:
                summary: Request to issue a Web Semantic Credential
                value:
                  format: ldp_vc
                  credential_definition:
                    type:
                      - VerifiableCredential
                      - AlumniCredential
                    '@context':
                      - https://www.w3.org/2018/credentials/v1
                  proof:
                    proof_type: jwt
                    jwt: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
              compact-semantic:
                summary: Request to issue a Compact Semantic Credential
                value:
                  format: cwt_vc
                  types:
                    - VerifiableCredential
                    - AlumniCredential
              compact:
                summary: Request to issue a Compact Credential
                value:
                  format: cwt
                  type: AlumniCredential
              mobile-credential:
                summary: Request to issue a Mobile Credential
                value:
                  format: mso_mdoc
                  doctype: org.iso.18013.5.1.mDL
                  proof:
                    proof_type: jwt
                    jwt: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
      responses:
        '200':
          description: Credential issued
          content:
            application/json:
              schema:
                type: object
                required:
                  - credential
                  - format
                properties:
                  credential:
                    type: object
                    description: The verifiable credential that was issued.
                    properties:
                      '@context':
                        type: array
                        example:
                          - https://www.w3.org/2018/credentials/v1
                          - https://www.w3.org/2018/credentials/examples/v1
                        items:
                          type: string
                          minLength: 1
                          example: >-
                            "https://www.w3.org/2018/credentials/v1",
                            "https://www.w3.org/2018/credentials/examples/v1"
                      type:
                        type: array
                        example:
                          - VerifiableCredential
                          - AlumniCredential
                        items:
                          type: string
                          minLength: 1
                          example: '"AlumniCredential", "VerifiableCredential"'
                      issuer:
                        description: >-
                          Includes Issuer id (DID), domain name and optional
                          branding properties.
                        oneOf:
                          - type: object
                            properties:
                              id:
                                type: string
                                example: did:web:organization.com
                              name:
                                type: string
                                example: Example University
                              logoUrl:
                                type: string
                                example: https://example.edu/img/logo.png
                                description: >-
                                  The location of the logo image. The supported
                                  formats are jpg, png, and svg.
                              iconUrl:
                                type: string
                                example: https://example.edu/img/icon.png
                                description: >-
                                  The location of the icon image. The supported
                                  formats are jpg, png, and svg.
                          - type: string
                      credentialBranding:
                        type: object
                        description: Includes optional credential branding properties.
                        properties:
                          backgroundColor:
                            type: string
                            example: '#B00AA0'
                            description: >-
                              The background colour used for the credential
                              card. The format is "#rrggbb" where "rrggbb" is a
                              hex RGB triplet, such as "#FFCC00".
                          watermarkImageUrl:
                            type: string
                            example: https://example.edu/img/watermark.png
                            description: >-
                              The location of the watermark image. The supported
                              formats are jpg, png, and svg.
                      issuanceDate:
                        type: string
                        format: date-time
                        example: '2020-05-02T12:06:29.156Z'
                      credentialStatus:
                        type: object
                        description: Credential status location information
                        properties:
                          id:
                            type: string
                            description: Unique ID for the credential status
                            example: >-
                              https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                          type:
                            type: string
                            description: >-
                              Indicates that the status contains revocation
                              information
                            example: RevocationList2020Status
                          revocationListIndex:
                            type: integer
                            example: 1
                            description: >-
                              The location within the revocation list for the
                              credential
                          revocationListCredential:
                            type: string
                            description: The location of the revocation list
                            example: >-
                              https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                        title: CredentialStatus
                      credentialSubject:
                        type: object
                        example:
                          givenName: Jamie
                          familyName: Doe
                          alumniOf: Example University
                        properties:
                          givenName:
                            type: string
                            example: Jamie
                          familyName:
                            type: string
                            example: Doe
                          alumniOf:
                            type: string
                            example: Example University
                      proof:
                        type: object
                        properties:
                          type:
                            type: string
                            example: Ed25519Signature2018
                          created:
                            type: string
                            format: date-time
                            example: '2020-05-02T12:06:29Z'
                          jws:
                            type: string
                            description: Compact form of JWS
                            example: >-
                              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                          proofPurpose:
                            type: string
                            example: assertionMethod
                          verificationMethod:
                            type: string
                            example: did:web:organization.com
                        title: ED25519Signature2018
                      name:
                        type: string
                        example: Alumni Credential
                        description: Name of the credential (requires v2 data model)
                      description:
                        type: string
                        example: >-
                          This credential shows that the person has attended the
                          mentioned university.
                        description: Description of the credential (requires v2 data model)
                    required:
                      - '@context'
                      - type
                      - issuanceDate
                      - credentialSubject
                      - proof
                    title: VerifiableCredential
                  format:
                    type: string
                    description: The format of the issued credential.
                    example: ldp_vc
  /core/v1/openid/offers:
    post:
      operationId: postOpenIdOffers
      tags:
        - Credential Issuance
      summary: Create an OpenID4VCI credential offer
      description: >-
        Returns an OpenID4VCI credential offer URI.

        See
        [https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-10.1](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#section-10.1)


        ### **Analytic events**

        * OPEN_ID_OFFER_CREATE_START

        * OPEN_ID_OFFER_CREATE_SUCCESS

        * OPEN_ID_OFFER_CREATE_FAIL
      security:
        - bearerAuthOpenIdCredentials: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - credentials
              properties:
                credentials:
                  type: array
                  items:
                    type: string
                  description: >-
                    This array includes a list of identifiers for credentials
                    that will be included in the credential offer. These
                    identifiers are the `id` elements returned in the response
                    when you create a credential configuration. To issue
                    multiple credential profiles of the same credential in a
                    single flow, include all the required credential
                    configuration id elements in the request payload.
                  example:
                    - 707e920a-f342-443b-ae24-6946b7b5033e
                request_parameters:
                  type: object
                  description: >-
                    Specifies a list of additional request parameters that the
                    wallet can include in the authentication request.
                  properties:
                    login_hint:
                      type: string
                      description: >-
                        Login hints are included in the authentication flow the
                        holder is redirected to after accepting the credential
                        offer. For example, you can include the user's e-mail so
                        that it is already populated in the login screen.
                      example: user@example.com
                    prompt:
                      type: string
                      description: "Prompts are sent to the authentication provider to control the authentication flow. For example, using\_`login`\_would always require the user to authenticate, even if they had already completed login on the same device."
                      example: login
      responses:
        '200':
          description: Credential offer URI created
          content:
            application/json:
              schema:
                type: object
                required:
                  - uri
                properties:
                  uri:
                    type: string
                    description: >-
                      Generated URI that can be sent to a user's digital wallet
                      via a message, a QR code or a deep link. When a
                      multi-format credential offer is created, the generated
                      URI offer is used to issue all the credential profiles in
                      a single workflow.
                    example: >-
                      openid-credential-offer://?credential_offer=%7B%22credential_issuer%22%3A%22https%3A%2F%2Fmyissuer.example.com%22%2C%22credentials%22%3A%5B%22707e920a-f342-443b-ae24-6946b7b5033e%22%5D%2C%22request_parameters%22%3A%7B%22login_hint%22%3A%22user%40example.com%22%2C%22prompt%22%3A%22login%22%7D%7D
  /.well-known/openid-credential-issuer:
    get:
      responses:
        '200':
          description: OpenID4VCI credential issuer metadata retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    format: uri
                  authorization_endpoint:
                    type: string
                    format: uri
                  token_endpoint:
                    type: string
                    format: uri
                  scopes_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - ldp_vc:ExampleCredential
                  response_types_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - code
                  response_modes_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - query
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - authorization_code
                  code_challenge_methods_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - S256
                  credential_issuer:
                    type: string
                    format: uri
                  credential_endpoint:
                    type: string
                    format: uri
                  credentials_supported:
                    type: array
                    items:
                      type: object
                      oneOf:
                        - type: object
                          properties:
                            format:
                              type: string
                            id:
                              type: string
                            scope:
                              type: string
                            '@context':
                              type: array
                              items:
                                type: string
                            type:
                              type: array
                              items:
                                type: string
                            credentialSubject:
                              type: object
                            cryptographic_binding_methods_supported:
                              type: string
                            cryptographic_suites_supported:
                              type: string
                        - type: object
                          properties:
                            format:
                              type: string
                            id:
                              type: string
                            scope:
                              type: string
                            '@context':
                              type: array
                              items:
                                type: string
                            type:
                              type: array
                              items:
                                type: string
                            credentialSubject:
                              type: object
                            cryptographic_binding_methods_supported:
                              type: string
                            cryptographic_suites_supported:
                              type: string
                        - type: object
                          properties:
                            format:
                              type: string
                            id:
                              type: string
                            scope:
                              type: string
                            type:
                              type: string
                            claims:
                              type: object
                            cryptographic_binding_methods_supported:
                              type: string
                            cryptographic_suites_supported:
                              type: string
                        - type: object
                          properties:
                            format:
                              type: string
                              example: mso_mdoc
                            doctype:
                              type: string
                              example: org.iso.18013.5.1.mDL
                            id:
                              type: string
                            cryptographic_binding_methods_supported:
                              type: array
                              example:
                                - mso
                              items:
                                type: string
                            cryptographic_suites_supported:
                              type: array
                              example:
                                - ES256
                              items:
                                type: string
                            claims:
                              type: object
                  mdoc_iacas_uri:
                    type: string
                    format: uri
      description: >-
        Returns OpenID4VCI issuer metadata. This is the standard OpenID4VCI Well
        Known endpoint for your tenant.


        This endpoint is unprotected, public facing and can be deterministically
        found at the root of the tenant subdomain or alias by any party wishing
        to discover the OpenID4VCI capabilities.
      operationId: wellKnownOidcConfig
      security: []
      summary: Retrieve OpenID4VCI issuer metadata
      tags:
        - Credential Issuance
      x-codeSamples:
        - lang: curl
          source: |
            curl --request GET \
              --url https://{tenantName}.{region}.mattr.global/.well-known/openid-credential-issuer \
              --header 'Accept: application/json'
  /v2/credentials/web-semantic/sign:
    post:
      requestBody:
        description: Web Semantic Credential payload to sign
        required: true
        content:
          application/json:
            schema:
              title: SignWebSemanticCredentialRequest
              type: object
              required:
                - payload
              properties:
                payload:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Course credential
                      description: >-
                        Insert a meaningful name for the credential. This string
                        is displayed on the top part of the credential in the
                        holder's digital wallet. Maximum length is 18
                        characters, and additional characters will not be
                        displayed.
                    description:
                      type: string
                      description: >-
                        Insert a meaningful description for the credential. This
                        string is displayed below the `name` field on the
                        credential in the holder's digital wallet. Maximum
                        length is 38 characters, and additional characters will
                        not be displayed.
                      example: >-
                        This credential shows that the person has attended the
                        mention course and attained the relevant awards.
                    '@context':
                      type: array
                      description: >-
                        Optional array of contexts that can be used to expand
                        credential claims and convey their meaning. As part of
                        the credential creation MATTR VII will auto-inject the
                        following contexts, which reference the W3C Verifiable
                        Credential definitions:

                        -
                        https://www.w3.org/2018/credentials/v1https://www.w3.org/2018/credentials/v1

                        -
                        https://mattr.global/contexts/vc-extensions/v2https://mattr.global/contexts/vc-extensions/v2

                        -
                        https://w3id.org/vc-revocation-list-2020/v1https://w3id.org/vc-revocation-list-2020/v1
                        (only for revocable credentials).

                        If you require introducing a different context for your
                        production implementation, please contact us. Referenced
                        contexts must be whitelisted or credential issuance will
                        fail. In-line context definitions would also result in
                        an error.
                      minLength: 1
                      example:
                        - https://optionalschema.example/
                      items:
                        type: string
                        minLength: 0
                    type:
                      description: >-
                        This array of credential types indicates what sort of
                        information a credential holds. This is a unique
                        identifier used to differentiate between various Web
                        Credential types. MATTR VII automatically injects
                        `VerifiableCredential` as the first value of this array,
                        and you must include at least one additional value in
                        the request payload.
                      type: array
                      example:
                        - EducationalOccupationalCredential
                        - AlumniCredential
                      items:
                        type: string
                        minLength: 1
                        description: >-
                          Describes the additional specific types of the claimed
                          data, must be within the scope of @context, resulting
                          credential will always include VerifiableCredential.
                    credentialSubject:
                      type: object
                      description: >-
                        Each value is a claim defined by one of the JSON-LD
                        schemas.
                      minItems: 1
                      example:
                        id: did:example:abcdb1f712ebc6f1c276e12ec21
                        givenName: Jamie
                        familyName: Doe
                        alumniOf: <span lang="en">Example University</span>
                    credentialBranding:
                      type: object
                      description: >-
                        Includes optional credential branding properties. Refer
                        to [this
                        video](https://www.youtube.com/watch?v=Tu8ApHBWG90) for
                        branding best practices.
                      properties:
                        backgroundColor:
                          type: string
                          example: '#B00AA0'
                          description: >-
                            Insert a colour hex code to use for the credential
                            background color in the holder's digital wallet.
                        watermarkImageUrl:
                          type: string
                          example: https://example.edu/img/watermark.png
                          description: >-
                            Insert a URL for a watermark image to be included as
                            a pattern on the credential in the holder's digital
                            wallet:

                            - URL must be publicly available.

                            - Must be 245x150 px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended.
                    issuer:
                      type: object
                      description: Includes Issuer id (DID) and domain name.
                      required:
                        - id
                        - name
                      properties:
                        id:
                          type: string
                          example: did:issuer:abcdb1f712ebc6f1c276e12ec21
                          description: >-
                            Use the DID that identifies the credential's issuer,
                            which attests the claims in the credential. This
                            must be a publicly available and resolvable
                            `did:web` for the credential to be valid and
                            verifiable.
                        name:
                          type: string
                          description: >-
                            Insert a meaningful name to indicate the issuer.
                            This string is used when the credential is offered
                            to the holder. It is also used on the bottom part of
                            the credential when `logoURL` is not provided.
                          example: ABC University
                        logoUrl:
                          type: string
                          description: >-
                            Insert a URL for a logo that is displayed on the
                            bottom part of the credential. If no logo is
                            provided, the issuer's `name` and `iconURL` are used
                            instead. The logo must meet the following criteria:

                            - URL must be publicly available.

                            - Must be 140x42 px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended. Raster images, whilst
                            supported, are currently displayed at 1x resolution
                            and may look pixelated on some devices.

                            - Transparencies are allowed for **svg** or **png**
                            images.

                            - If no logo is provided, the first letter of the
                            issuer name is displayed instead.

                            - The recommended maximum size is 50 KB.
                          example: https://example.edu/img/logo.png
                        iconUrl:
                          type: string
                          example: https://example.edu/img/icon.png
                          description: >-
                            Insert a URL for an icon that is displayed next to
                            the issuer's name when the credential is offered to
                            the holder. It is also displayed next to the
                            issuer's name on the bottom part of the credential
                            when `logoURL` is not provided. When `iconURL` is
                            not provided, the first letter from `name` is used
                            instead. The icon must meet the following criteria:

                            - URL must be publicly available.

                            - Must be 32x32 px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended. Raster images, whilst
                            supported, are currently displayed at 1x resolution
                            and may look pixelated on some devices.

                            - Transparencies are allowed for svg or png images.

                            - The recommended maximum size is 15 KB.
                    expirationDate:
                      type: string
                      example: '2024-02-01T08:12:38.156Z'
                      description: >-
                        Insert the credential expiration date, after which it
                        will not be considered valid and cannot be verified.
                        Expiration date can not be in the past or before
                        `issuanceDate`. When not specified, the credential will
                        not have an expiration date and never expire.
                    issuanceDate:
                      type: string
                      description: >-
                        The timestamp at which the credential becomes valid.
                        This can be used to issue future-dated credentials. Must
                        not be in the past or after `expirationDate`, when the
                        latter is specified. When not specified, `issuanceDate`
                        will default to the current time.
                      example: '2023-02-01T08:12:38.156Z'
                  required:
                    - type
                    - claims
                    - issuer
                    - credentialSubject
                proofType:
                  description: >-
                    This is an _optional_ field which defines the cryptographic
                    algorithm used to sign the credential. The credential
                    Issuer's DID must contain a key that supports the
                    corresponding signing capability. If no `proofType` is
                    provided, the credential will be signed using the key that
                    is available in the Issuer's DID:

                    - If a `Bls12381G2` key is available, the credential will be
                    signed with a `BbsSignature2022` proof. Credentials signed
                    with this proof type support [selective
                    disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                    - If a `Bls12381G2` key is unavailable but a `Ed25519` key
                    is available, the credential will be signed with a
                    `Ed25519Signature2018 proof`. Credentials signed with this
                    proof type **do not** support [selective
                    disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                    - If none of the two suitable keys are available, the
                    request will be rejected and the credential will not be
                    created.
                  type: string
                  enum:
                    - Ed25519Signature2018
                    - BbsSignature2022
                  example: Ed25519Signature2018
                tag:
                  type: string
                  description: >-
                    Insert a case sensitive tag to reference this credential.
                    The gets stored as part of the credential metadata and can
                    be used to search for it in the [credential
                    registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                  example: identifier123
                  minLength: 1
                  maxLength: 1024
                persist:
                  type: boolean
                  description: >-
                    When set to `true`, both the credential and the credential
                    metadata are stored in the [credential
                    registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                    When set to `false`, only the following metadata is stored
                    in the credential registry:

                    - `id`

                    - `tag`

                    - `credentialStatus`

                    - `issuanceDate`

                    > Credentials by nature tend to hold Personally Identifying
                    Information (PII). Before storing credential data,
                    familiarise yourself with compliance to any PII restrictions
                    that may apply to your use-case.
                  default: false
                revocable:
                  type: boolean
                  description: >-
                    When set to `true`, the created credential can later be
                    revoked. When set to `false`, the credential cannot be
                    revoked. When set to `true`,
                    `https://w3id.org/vc-revocation-list-2020/v1` is injected
                    into the credential `@context` object when it is issued.
                    This references the JSON-LD definition of the
                    `credentialStatus` object.
                  default: false
                includeId:
                  type: boolean
                  description: >-
                    When set to `true`, the signed credential identifier is
                    included in both the `credential` object and the credential
                    metadata. When set to `false` it is only included in the
                    credential metadata.
                  default: false
                  example: true
              description: Sign Web Semantic Credential Request
      tags:
        - Web Credentials Issuance
      summary: Sign a Web Semantic Credential
      responses:
        '200':
          description: Web Semantic Credential signed
          content:
            application/json:
              schema:
                title: SignWebSemanticCredentialResponse
                type: object
                x-examples: {}
                properties:
                  id:
                    type: string
                    example: 873277c0-a162-11ea-8a1d-a111119347e6
                    description: Unique identifier of the new web credential.
                  credential:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 873277c0-a162-11ea-8a1d-a111119347e6
                        description: Unique identifier of the new web credential.
                      '@context':
                        type: array
                        description: >-
                          As part of the credential creation MATTR VII will
                          auto-inject the following contexts, which reference
                          the W3C Verifiable Credential definitions:

                          - https://www.w3.org/2018/credentials/v1

                          - https://mattr.global/contexts/vc-extensions/v2

                          - https://w3id.org/vc-revocation-list-2020/v1 (only
                          for revocable credentials).

                          If you require introducing a different context for
                          your production implementation, please [contact
                          us](https://mattr.global/contact). Referenced contexts
                          must be whitelisted or credential issuance will fail.
                          In-line context definitions would also result in an
                          error.
                        example:
                          - https://www.w3.org/2018/credentials/v1
                          - https://mattr.global/contexts/vc-extensions/v2
                          - https://w3id.org/vc-revocation-list-2020/v1
                          - https://optionalschema.example/
                        items:
                          type: string
                          minLength: 1
                          example: >-
                            "https://www.w3.org/2018/credentials/v1","https://mattr.global/contexts/vc-extensions/v2","https://w3id.org/vc-revocation-list-2020/v1","https://optionalschema.example/"
                      type:
                        type: array
                        example:
                          - VerifiableCredential
                          - AlumniCredential
                        items:
                          type: string
                          minLength: 1
                          example: '"AlumniCredential", "VerifiableCredential"'
                      issuer:
                        description: >-
                          Includes issuer id (did) and its domain (inside name
                          parameter)
                        oneOf:
                          - type: object
                            properties:
                              id:
                                type: string
                                example: did:web:organization.com
                              name:
                                type: string
                                example: Example University
                          - type: string
                      issuanceDate:
                        type: string
                        format: date-time
                        example: '2020-05-02T12:06:29.156Z'
                      credentialStatus:
                        type: object
                        description: Credential status location information
                        properties:
                          id:
                            type: string
                            description: Unique ID for the credential status
                            example: >-
                              https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                          type:
                            type: string
                            description: >-
                              Indicates that the status contains revocation
                              information
                            example: RevocationList2020Status
                          revocationListIndex:
                            type: integer
                            example: 1
                            description: >-
                              The location within the revocation list for the
                              credential
                          revocationListCredential:
                            type: string
                            description: The location of the revocation list
                            example: >-
                              https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                        title: CredentialStatus
                      credentialSubject:
                        type: object
                        example:
                          givenName: Jamie
                          familyName: Doe
                          alumniOf: Example University
                        properties:
                          givenName:
                            type: string
                            example: Jamie
                          familyName:
                            type: string
                            example: Doe
                          alumniOf:
                            type: string
                            example: Example University
                      proof:
                        type: object
                        properties:
                          type:
                            type: string
                            example: Ed25519Signature2018
                          created:
                            type: string
                            format: date-time
                            example: '2020-05-02T12:06:29Z'
                          jws:
                            type: string
                            description: Compact form of JWS
                            example: >-
                              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                          proofPurpose:
                            type: string
                            example: assertionMethod
                          verificationMethod:
                            type: string
                            example: did:web:organization.com
                        title: ED25519Signature2018
                      name:
                        type: string
                        example: Alumni Credential
                        description: Name of the credential (requires v2 data model)
                      description:
                        type: string
                        example: >-
                          This credential shows that the person has attended the
                          mentioned university.
                        description: Description of the credential (requires v2 data model)
                    required:
                      - type
                      - issuanceDate
                      - credentialSubject
                      - proof
                    title: VerifiableCredential
                  tag:
                    type: string
                    example: identifier123
                    description: >-
                      Credential tag, as inserted in the request. Can be used to
                      search the [credential
                      registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview)
                  credentialStatus:
                    type: object
                    description: Credential status location information
                    properties:
                      id:
                        type: string
                        description: Unique ID for the credential status
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                      type:
                        type: string
                        description: >-
                          Indicates that the status contains revocation
                          information
                        example: RevocationList2020Status
                      revocationListIndex:
                        type: integer
                        example: 1
                        description: >-
                          The location within the revocation list for the
                          credential
                      revocationListCredential:
                        type: string
                        description: The location of the revocation list
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                    title: CredentialStatus
                  issuanceDate:
                    type: string
                    example: '2020-05-02T12:06:29.156Z'
                required:
                  - id
                  - credential
                  - issuanceDate
                description: Sign Web Semantic Credential response
        '400':
          description: Failed to sign Web Semantic Credential, invalid payload, etc
      operationId: signWebSemanticCredentialV2
      description: >-
        Returns a signed Web Semantic Credential generated from a provided valid
        payload.


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_SIGN_START

        * CREDENTIAL_WEB_SEMANTIC_SIGN_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_SIGN_FAIL
  /v2/credentials/web-semantic:
    get:
      tags:
        - Web Credentials Management
      summary: Retrieve all credential data
      parameters:
        - schema:
            type: string
            example: identifier123
          in: query
          name: tag
          description: Optional tag to filter on.
        - schema:
            type: string
            example: AlumniCredential
          in: query
          name: type
          description: Optional credential type to filter on.
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned credential entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of credential entries
      responses:
        '200':
          description: Credentials data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      type: object
                      x-examples: {}
                      title: WebManifestResponse
                      properties:
                        id:
                          type: string
                          example: 873277c0-a162-11ea-8a1d-a111119347e6
                        credential:
                          type: object
                          properties:
                            '@context':
                              type: array
                              example:
                                - https://www.w3.org/2018/credentials/v1
                                - >-
                                  https://www.w3.org/2018/credentials/examples/v1
                              items:
                                type: string
                                minLength: 1
                                example: >-
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://www.w3.org/2018/credentials/examples/v1"
                            type:
                              type: array
                              example:
                                - VerifiableCredential
                                - AlumniCredential
                              items:
                                type: string
                                minLength: 1
                                example: '"AlumniCredential", "VerifiableCredential"'
                            issuer:
                              description: >-
                                Includes Issuer id (DID), domain name and
                                optional branding properties.
                              oneOf:
                                - type: object
                                  properties:
                                    id:
                                      type: string
                                      example: did:web:organization.com
                                    name:
                                      type: string
                                      example: Example University
                                    logoUrl:
                                      type: string
                                      example: https://example.edu/img/logo.png
                                      description: >-
                                        The location of the logo image. The
                                        supported formats are jpg, png, and svg.
                                    iconUrl:
                                      type: string
                                      example: https://example.edu/img/icon.png
                                      description: >-
                                        The location of the icon image. The
                                        supported formats are jpg, png, and svg.
                                - type: string
                            credentialBranding:
                              type: object
                              description: >-
                                Includes optional credential branding
                                properties.
                              properties:
                                backgroundColor:
                                  type: string
                                  example: '#B00AA0'
                                  description: >-
                                    The background colour used for the
                                    credential card. The format is "#rrggbb"
                                    where "rrggbb" is a hex RGB triplet, such as
                                    "#FFCC00".
                                watermarkImageUrl:
                                  type: string
                                  example: https://example.edu/img/watermark.png
                                  description: >-
                                    The location of the watermark image. The
                                    supported formats are jpg, png, and svg.
                            issuanceDate:
                              type: string
                              format: date-time
                              example: '2020-05-02T12:06:29.156Z'
                            credentialStatus:
                              type: object
                              description: Credential status location information
                              properties:
                                id:
                                  type: string
                                  description: Unique ID for the credential status
                                  example: >-
                                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                                type:
                                  type: string
                                  description: >-
                                    Indicates that the status contains
                                    revocation information
                                  example: RevocationList2020Status
                                revocationListIndex:
                                  type: integer
                                  example: 1
                                  description: >-
                                    The location within the revocation list for
                                    the credential
                                revocationListCredential:
                                  type: string
                                  description: The location of the revocation list
                                  example: >-
                                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                              title: CredentialStatus
                            credentialSubject:
                              type: object
                              example:
                                givenName: Jamie
                                familyName: Doe
                                alumniOf: Example University
                              properties:
                                givenName:
                                  type: string
                                  example: Jamie
                                familyName:
                                  type: string
                                  example: Doe
                                alumniOf:
                                  type: string
                                  example: Example University
                            proof:
                              type: object
                              properties:
                                type:
                                  type: string
                                  example: Ed25519Signature2018
                                created:
                                  type: string
                                  format: date-time
                                  example: '2020-05-02T12:06:29Z'
                                jws:
                                  type: string
                                  description: Compact form of JWS
                                  example: >-
                                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                                proofPurpose:
                                  type: string
                                  example: assertionMethod
                                verificationMethod:
                                  type: string
                                  example: did:web:organization.com
                              title: ED25519Signature2018
                            name:
                              type: string
                              example: Alumni Credential
                              description: Name of the credential (requires v2 data model)
                            description:
                              type: string
                              example: >-
                                This credential shows that the person has
                                attended the mentioned university.
                              description: >-
                                Description of the credential (requires v2 data
                                model)
                          required:
                            - '@context'
                            - type
                            - issuanceDate
                            - credentialSubject
                            - proof
                          title: VerifiableCredential
                        tag:
                          type: string
                          example: identifier123
                        credentialStatus:
                          type: object
                          description: Credential status location information
                          properties:
                            id:
                              type: string
                              description: Unique ID for the credential status
                              example: >-
                                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                            type:
                              type: string
                              description: >-
                                Indicates that the status contains revocation
                                information
                              example: RevocationList2020Status
                            revocationListIndex:
                              type: integer
                              example: 1
                              description: >-
                                The location within the revocation list for the
                                credential
                            revocationListCredential:
                              type: string
                              description: The location of the revocation list
                              example: >-
                                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                          title: CredentialStatus
                        issuanceDate:
                          type: string
                          example: '2020-05-02T12:06:29.156Z'
                      required:
                        - id
                        - issuanceDate
                title: GetCredentialsResponse
              examples:
                List of credential data:
                  value:
                    nextCursor: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    data:
                      - id: 873277c0-a162-11ea-8a1d-a111119347e6
                        credential:
                          '@context':
                            - https://www.w3.org/2018/credentials/v1
                          type:
                            - VerifiableCredential
                            - AlumniCredential
                          issuer:
                            id: >-
                              did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5
                            name: https://tenant.vii.mattr.global
                          issuanceDate: '2020-05-02T12:06:29.156Z'
                          credentialSubject:
                            id: >-
                              did:key:z6Mkvji7zrwyFATXUzGNBSCnrPaZy7H3BWUnihrHvZdkEd9y
                            givenName: Jamie
                            familyName: Doe
                          proof:
                            type: Ed25519Signature2018
                            created: '2020-05-02T12:06:29Z'
                            jws: >-
                              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                            proofPurpose: assertionMethod
                            verificationMethod: >-
                              did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5#z6Mkvji7zrwyFATXUzGNBSCnrPaZy7H3BWUnihrHvZdkEd9y
                        tag: identifier123
                        issuanceDate: '2020-05-02T12:06:29.156Z'
                      - id: 9043aa74-eb08-11ea-adc1-0242ac120002
                        tag: identifier124
                        credentialStatus:
                          id: >-
                            https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                          type: RevocationList2020Status
                          revocationListCredential: >-
                            https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                          revocationListIndex: 1
                        issuanceDate: '2020-10-06T03:21:02.397Z'
        '400':
          description: Bad query parameters in request.
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Cursor not found:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: xxxx
                        msg: id and createdAt is missing
                        param: cursor
                        location: query
                Limit exceeded:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: '1001'
                        msg: Invalid value
                        param: limit
                        location: query
      operationId: retrieveWebSemanticCredentialListV2
      description: >
        Returns all available data for existing credentials:

        - For credentials that were created with the `persist` flag set to
        `true`, the response contains both the credential and its metadata.

        - For credentials that were created with the persist flag set to
        `false`, the response only contains the metadata (`id`, `tag`,
        `credentialStatus`, `issuanceDate`).


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_RETRIEVE_LIST_START

        * CREDENTIAL_WEB_SEMANTIC_RETRIEVE_LIST_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_RETRIEVE_LIST_FAIL
    parameters: []
  /v2/credentials/web-semantic/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Credential ID
    get:
      tags:
        - Web Credentials Management
      summary: Retrieve credential data
      responses:
        '200':
          description: Credential data retrieved
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: WebManifestResponse
                properties:
                  id:
                    type: string
                    example: 873277c0-a162-11ea-8a1d-a111119347e6
                  credential:
                    type: object
                    properties:
                      '@context':
                        type: array
                        example:
                          - https://www.w3.org/2018/credentials/v1
                          - https://www.w3.org/2018/credentials/examples/v1
                        items:
                          type: string
                          minLength: 1
                          example: >-
                            "https://www.w3.org/2018/credentials/v1",
                            "https://www.w3.org/2018/credentials/examples/v1"
                      type:
                        type: array
                        example:
                          - VerifiableCredential
                          - AlumniCredential
                        items:
                          type: string
                          minLength: 1
                          example: '"AlumniCredential", "VerifiableCredential"'
                      issuer:
                        description: >-
                          Includes Issuer id (DID), domain name and optional
                          branding properties.
                        oneOf:
                          - type: object
                            properties:
                              id:
                                type: string
                                example: did:web:organization.com
                              name:
                                type: string
                                example: Example University
                              logoUrl:
                                type: string
                                example: https://example.edu/img/logo.png
                                description: >-
                                  The location of the logo image. The supported
                                  formats are jpg, png, and svg.
                              iconUrl:
                                type: string
                                example: https://example.edu/img/icon.png
                                description: >-
                                  The location of the icon image. The supported
                                  formats are jpg, png, and svg.
                          - type: string
                      credentialBranding:
                        type: object
                        description: Includes optional credential branding properties.
                        properties:
                          backgroundColor:
                            type: string
                            example: '#B00AA0'
                            description: >-
                              The background colour used for the credential
                              card. The format is "#rrggbb" where "rrggbb" is a
                              hex RGB triplet, such as "#FFCC00".
                          watermarkImageUrl:
                            type: string
                            example: https://example.edu/img/watermark.png
                            description: >-
                              The location of the watermark image. The supported
                              formats are jpg, png, and svg.
                      issuanceDate:
                        type: string
                        format: date-time
                        example: '2020-05-02T12:06:29.156Z'
                      credentialStatus:
                        type: object
                        description: Credential status location information
                        properties:
                          id:
                            type: string
                            description: Unique ID for the credential status
                            example: >-
                              https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                          type:
                            type: string
                            description: >-
                              Indicates that the status contains revocation
                              information
                            example: RevocationList2020Status
                          revocationListIndex:
                            type: integer
                            example: 1
                            description: >-
                              The location within the revocation list for the
                              credential
                          revocationListCredential:
                            type: string
                            description: The location of the revocation list
                            example: >-
                              https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                        title: CredentialStatus
                      credentialSubject:
                        type: object
                        example:
                          givenName: Jamie
                          familyName: Doe
                          alumniOf: Example University
                        properties:
                          givenName:
                            type: string
                            example: Jamie
                          familyName:
                            type: string
                            example: Doe
                          alumniOf:
                            type: string
                            example: Example University
                      proof:
                        type: object
                        properties:
                          type:
                            type: string
                            example: Ed25519Signature2018
                          created:
                            type: string
                            format: date-time
                            example: '2020-05-02T12:06:29Z'
                          jws:
                            type: string
                            description: Compact form of JWS
                            example: >-
                              eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                          proofPurpose:
                            type: string
                            example: assertionMethod
                          verificationMethod:
                            type: string
                            example: did:web:organization.com
                        title: ED25519Signature2018
                      name:
                        type: string
                        example: Alumni Credential
                        description: Name of the credential (requires v2 data model)
                      description:
                        type: string
                        example: >-
                          This credential shows that the person has attended the
                          mentioned university.
                        description: Description of the credential (requires v2 data model)
                    required:
                      - '@context'
                      - type
                      - issuanceDate
                      - credentialSubject
                      - proof
                    title: VerifiableCredential
                  tag:
                    type: string
                    example: identifier123
                  credentialStatus:
                    type: object
                    description: Credential status location information
                    properties:
                      id:
                        type: string
                        description: Unique ID for the credential status
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                      type:
                        type: string
                        description: >-
                          Indicates that the status contains revocation
                          information
                        example: RevocationList2020Status
                      revocationListIndex:
                        type: integer
                        example: 1
                        description: >-
                          The location within the revocation list for the
                          credential
                      revocationListCredential:
                        type: string
                        description: The location of the revocation list
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                    title: CredentialStatus
                  issuanceDate:
                    type: string
                    example: '2020-05-02T12:06:29.156Z'
                required:
                  - id
                  - issuanceDate
              examples:
                With persisted credential:
                  value:
                    id: 873277c0-a162-11ea-8a1d-a111119347e6
                    credential:
                      '@context':
                        - https://www.w3.org/2018/credentials/v1
                      type:
                        - VerifiableCredential
                        - AlumniCredential
                      issuer:
                        id: did:web:organization.com
                        name: Example University
                      issuanceDate: '2020-05-02T12:06:29.156Z'
                      credentialStatus:
                        id: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                        type: RevocationList2020Status
                        revocationListCredential: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                        revocationListIndex: 4
                      credentialSubject:
                        givenName: Jamie
                        familyName: Doe
                      proof:
                        type: Ed25519Signature2018
                        created: '2020-05-02T12:06:29Z'
                        jws: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                        proofPurpose: assertionMethod
                        verificationMethod: did:web:organization.com
                    tag: identifier123
                    credentialStatus:
                      id: >-
                        https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                      type: RevocationList2020Status
                      revocationListCredential: >-
                        https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                      revocationListIndex: 4
                    issuanceDate: '2020-05-02T12:06:29.156Z'
                No persisted credential:
                  value:
                    id: 9043aa74-eb08-11ea-adc1-0242ac120002
                    tag: identifier124
                    issuanceDate: '2020-05-02T12:06:29.156Z'
        '400':
          description: Credential ID not in a UUID format
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: retrieveWebSemanticCredentialV2
      description: >-
        Returns all available data for an existing credential that matches the
        provided ID:

        - For credentials that were created with the `persist` flag set to
        `true`, the response contains both the credential and its metadata.

        - For credentials that were created with the persist flag set to
        `false`, the response only contains the metadata (`id`, `tag`,
        `credentialStatus`, `issuanceDate`)


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_RETRIEVE_START

        * CREDENTIAL_WEB_SEMANTIC_RETRIEVE_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_RETRIEVE_FAIL
    delete:
      tags:
        - Web Credentials Management
      summary: Delete credential data
      responses:
        '204':
          description: Credential deleted and revoked if revocable
        '400':
          description: Invalid id parameter format
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Credential ID not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      operationId: removeWebSemanticCredentialV2
      description: >-
        Deletes all stored data for an existing credential that matches the
        provided ID. If the credential is revocable, it will also be permanently
        revoked.


        > Removed credential data cannot be recovered.


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_DELETE_START

        * CREDENTIAL_WEB_SEMANTIC_DELETE_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_DELETE_FAIL
  /v2/credentials/web-semantic/verify:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: VerifyWebSemanticCredentialRequest
              type: object
              description: VerifyWebSemanticCredentialRequest
              required:
                - payload
              properties:
                payload:
                  description: >-
                    Replace with the contents of the credential object from the
                    response obtained when [creating a Web
                    Credential](https://learn.mattr.global/tutorials/create/web-credentials/basic).
                    Make sure you only include the contents of the `credential`
                    object and not the entire response.
                  type: object
                  properties:
                    id:
                      type: string
                      example: 873277c0-a162-11ea-8a1d-a111119347e6
                      description: Unique identifier of the new web credential.
                    '@context':
                      type: array
                      description: >-
                        As part of the credential creation MATTR VII will
                        auto-inject the following contexts, which reference the
                        W3C Verifiable Credential definitions:

                        - https://www.w3.org/2018/credentials/v1

                        - https://mattr.global/contexts/vc-extensions/v2

                        - https://w3id.org/vc-revocation-list-2020/v1 (only for
                        revocable credentials).

                        If you require introducing a different context for your
                        production implementation, please [contact
                        us](https://mattr.global/contact). Referenced contexts
                        must be whitelisted or credential issuance will fail.
                        In-line context definitions would also result in an
                        error.
                      example:
                        - https://www.w3.org/2018/credentials/v1
                        - https://mattr.global/contexts/vc-extensions/v2
                        - https://w3id.org/vc-revocation-list-2020/v1
                        - https://optionalschema.example/
                      items:
                        type: string
                        minLength: 1
                        example: >-
                          "https://www.w3.org/2018/credentials/v1","https://mattr.global/contexts/vc-extensions/v2","https://w3id.org/vc-revocation-list-2020/v1","https://optionalschema.example/"
                    type:
                      type: array
                      example:
                        - VerifiableCredential
                        - AlumniCredential
                      items:
                        type: string
                        minLength: 1
                        example: '"AlumniCredential", "VerifiableCredential"'
                    issuer:
                      description: >-
                        Includes issuer id (did) and its domain (inside name
                        parameter)
                      oneOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              example: did:web:organization.com
                            name:
                              type: string
                              example: Example University
                        - type: string
                    issuanceDate:
                      type: string
                      format: date-time
                      example: '2020-05-02T12:06:29.156Z'
                    credentialStatus:
                      type: object
                      description: Credential status location information
                      properties:
                        id:
                          type: string
                          description: Unique ID for the credential status
                          example: >-
                            https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                        type:
                          type: string
                          description: >-
                            Indicates that the status contains revocation
                            information
                          example: RevocationList2020Status
                        revocationListIndex:
                          type: integer
                          example: 1
                          description: >-
                            The location within the revocation list for the
                            credential
                        revocationListCredential:
                          type: string
                          description: The location of the revocation list
                          example: >-
                            https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                      title: CredentialStatus
                    credentialSubject:
                      type: object
                      example:
                        givenName: Jamie
                        familyName: Doe
                        alumniOf: Example University
                      properties:
                        givenName:
                          type: string
                          example: Jamie
                        familyName:
                          type: string
                          example: Doe
                        alumniOf:
                          type: string
                          example: Example University
                    proof:
                      type: object
                      properties:
                        type:
                          type: string
                          example: Ed25519Signature2018
                        created:
                          type: string
                          format: date-time
                          example: '2020-05-02T12:06:29Z'
                        jws:
                          type: string
                          description: Compact form of JWS
                          example: >-
                            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                        proofPurpose:
                          type: string
                          example: assertionMethod
                        verificationMethod:
                          type: string
                          example: did:web:organization.com
                      title: ED25519Signature2018
                    name:
                      type: string
                      example: Alumni Credential
                      description: Name of the credential (requires v2 data model)
                    description:
                      type: string
                      example: >-
                        This credential shows that the person has attended the
                        mentioned university.
                      description: Description of the credential (requires v2 data model)
                  required:
                    - type
                    - issuanceDate
                    - credentialSubject
                    - proof
                  title: VerifiableCredential
                assertExpiry:
                  type: boolean
                  description: >-
                    When set to `true`, verification will fail when expiration
                    date has passed. This field is deprecated in favour of
                    `assertValidUntil`, and will be disabled from September
                    2024.
                  default: true
                  deprecated: true
                checkRevocation:
                  type: boolean
                  description: >-
                    When set to `true`, verification will fail when the
                    credential has been revoked.
                  default: true
                assertValidFrom:
                  type: boolean
                  description: >-
                    When set to `true`, verification will fail when
                    `issuanceDate` has not been reached.
                  default: true
                assertValidUntil:
                  type: boolean
                  description: >-
                    When set to `true`, verification will fail when
                    `expirationDate` has passed. When specified, this overrides
                    the deprecated `assertExpiry` property.
                  default: false
      tags:
        - Web Credentials Verification
      summary: Verify a Web Semantic Credential
      responses:
        '200':
          description: Verification completed
          content:
            application/json:
              schema:
                title: VerifyWebSemanticCredentialResponse
                type: object
                description: VerifyWebSemanticCredentialResponse
                required:
                  - verified
                properties:
                  verified:
                    type: boolean
                    description: >-
                      Indicates whether the verification status is `true` or
                      `false`. For responses that show the verified status to be
                      `false`, a further error body is returned with more
                      details about the error:

                      - The credential has been revoked.

                      - The Issuer DID cannot be resolved.

                      - The issuer public key is invalid.

                      - The credential JSON-LD context is invalid.

                      - The credential signature is invalid.
                  reason:
                    type: object
                    properties:
                      type:
                        type: string
                      message:
                        type: string
                    required:
                      - type
                      - message
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Payload invalid:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: ...
                        msg: Not Found
                        param: payload.issuer.id
                        location: body
      operationId: verifyWebSemanticCredentialV2
      description: >-
        Verify a Web Semantic Credential by providing its payload. The
        credential is verified against the following criteria:

        - Issuer DID can be resolved, so that the referenced DID Document is
        available and valid and the public key is obtainable.

        - Proof is valid and the credential has not been tampered with.

        - JSON-LD context is valid for subject claims.


        Optional verification checks:

        - If `assertExpiry` is set to `true` and the credential has a set
        expiration date, verification will fail if the expiration date has
        passed.

        - If `checkRevocation` is set to `true` and the provided credential
        contains a revocation status list, verification will fail if the
        credential has been set to `revoked`.


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_VERIFY_START

        * CREDENTIAL_WEB_SEMANTIC_VERIFY_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_VERIFY_FAIL
  /v2/credentials/web-semantic/{id}/revocation-status:
    post:
      tags:
        - Web Credentials Management
      summary: Set credential revocation status
      description: >
        Sets the recovation status of the credential that matches the provided
        ID as `true` (revoked) or `false` (unrevoked).


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_SET_STATUS_START

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_SET_STATUS_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_SET_STATUS_FAIL
      requestBody:
        description: Setting the revocation status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isRevoked:
                  type: boolean
                  description: >-
                    Indicates whether the credential is revoked (`true`) or not
                    (`false`).
                  example: false
              required:
                - isRevoked
              description: ''
              title: SetRevocationStatus
            examples:
              Example:
                value:
                  isRevoked: true
      responses:
        '200':
          description: Revocation status updated
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential not revocable:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: credential not revocable
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Credential does not exist:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: not found
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Revocation list is not found:
                  value:
                    code: string
                    message: string
                    details:
                      - {}
      operationId: setWebSemanticCredentialRevocationStatusV2
    parameters:
      - schema:
          type: string
          format: uuid
          example: a80a5e7e-1972-4be6-8a4e-2adf09badf24
        name: id
        in: path
        required: true
        description: Credential ID
    get:
      tags:
        - Web Credentials Management
      summary: Retrieve credential revocation status
      responses:
        '200':
          description: Credential status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isRevoked:
                    type: boolean
                    description: >-
                      Indicates whether the credential is revoked (`true`) or
                      not (`false`).
                    example: false
                required:
                  - isRevoked
                description: ''
                title: RevocationStatusResponse
              examples:
                Revocation Status:
                  value:
                    isRevoked: false
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential not revocable:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: credential not revocable
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Credential does not exist:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: path
                        msg: not found
                        param: id
                        value: a80a5e7e-1972-4be6-8a4e-2adf09badf24
                Revocation list is not found:
                  value:
                    code: string
                    message: string
                    details:
                      - {}
      operationId: getWebSemanticCredentialRevocationStatusV2
      description: >-
        Returns the revocation status of the credential matching the provided
        ID.


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_RETRIEVE_START

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_RETRIEVE_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_RETRIEVE_FAIL
  /v2/revocation-lists/{id}:
    get:
      tags:
        - Web Credentials Management
      summary: Retrieve revocation list
      responses:
        '200':
          description: Revocation list retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  '@context':
                    type: array
                    example:
                      - https://www.w3.org/2018/credentials/v1
                      - https://www.w3.org/2018/credentials/examples/v1
                    items:
                      type: string
                      minLength: 1
                      example: >-
                        "https://www.w3.org/2018/credentials/v1",
                        "https://www.w3.org/2018/credentials/examples/v1"
                  type:
                    type: array
                    example:
                      - VerifiableCredential
                      - AlumniCredential
                    items:
                      type: string
                      minLength: 1
                      example: '"AlumniCredential", "VerifiableCredential"'
                  issuer:
                    description: >-
                      Includes Issuer id (DID), domain name and optional
                      branding properties.
                    oneOf:
                      - type: object
                        properties:
                          id:
                            type: string
                            example: did:web:organization.com
                          name:
                            type: string
                            example: Example University
                          logoUrl:
                            type: string
                            example: https://example.edu/img/logo.png
                            description: >-
                              The location of the logo image. The supported
                              formats are jpg, png, and svg.
                          iconUrl:
                            type: string
                            example: https://example.edu/img/icon.png
                            description: >-
                              The location of the icon image. The supported
                              formats are jpg, png, and svg.
                      - type: string
                  credentialBranding:
                    type: object
                    description: Includes optional credential branding properties.
                    properties:
                      backgroundColor:
                        type: string
                        example: '#B00AA0'
                        description: >-
                          The background colour used for the credential card.
                          The format is "#rrggbb" where "rrggbb" is a hex RGB
                          triplet, such as "#FFCC00".
                      watermarkImageUrl:
                        type: string
                        example: https://example.edu/img/watermark.png
                        description: >-
                          The location of the watermark image. The supported
                          formats are jpg, png, and svg.
                  issuanceDate:
                    type: string
                    format: date-time
                    example: '2020-05-02T12:06:29.156Z'
                  credentialStatus:
                    type: object
                    description: Credential status location information
                    properties:
                      id:
                        type: string
                        description: Unique ID for the credential status
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                      type:
                        type: string
                        description: >-
                          Indicates that the status contains revocation
                          information
                        example: RevocationList2020Status
                      revocationListIndex:
                        type: integer
                        example: 1
                        description: >-
                          The location within the revocation list for the
                          credential
                      revocationListCredential:
                        type: string
                        description: The location of the revocation list
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                    title: CredentialStatus
                  credentialSubject:
                    type: object
                    example:
                      givenName: Jamie
                      familyName: Doe
                      alumniOf: Example University
                    properties:
                      givenName:
                        type: string
                        example: Jamie
                      familyName:
                        type: string
                        example: Doe
                      alumniOf:
                        type: string
                        example: Example University
                  proof:
                    type: object
                    properties:
                      type:
                        type: string
                        example: Ed25519Signature2018
                      created:
                        type: string
                        format: date-time
                        example: '2020-05-02T12:06:29Z'
                      jws:
                        type: string
                        description: Compact form of JWS
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      proofPurpose:
                        type: string
                        example: assertionMethod
                      verificationMethod:
                        type: string
                        example: did:web:organization.com
                    title: ED25519Signature2018
                  name:
                    type: string
                    example: Alumni Credential
                    description: Name of the credential (requires v2 data model)
                  description:
                    type: string
                    example: >-
                      This credential shows that the person has attended the
                      mentioned university.
                    description: Description of the credential (requires v2 data model)
                required:
                  - '@context'
                  - type
                  - issuanceDate
                  - credentialSubject
                  - proof
                title: VerifiableCredential
              examples:
                Revocation List:
                  value:
                    id: >-
                      https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                    '@context':
                      - https://www.w3.org/2018/credentials/v1
                      - https://w3id.org/vc-revocation-list-2020/v1
                    type:
                      - VerifiableCredential
                      - RevocationList2020Credential
                    issuer: did:web:organization.com
                    issuanceDate: '2020-05-02T12:06:29.156Z'
                    credentialSubject:
                      type: RevocationList2020
                      encodedList: >-
                        H4sIAAAAAAAAA-3BMQEAAADCoPVPbQwfoAAAAAAAAAAAAAAAAAAAAIC3AYbSVKsAQAAA
                    proof:
                      type: Ed25519Signature2018
                      created: '2020-05-02T12:06:29Z'
                      jws: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      proofPurpose: assertionMethod
                      verificationMethod: did:web:organization.com#CU6dJt9p8t
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Revocation list is not found:
                  value:
                    code: NotFound
                    message: Resource Not Found
      operationId: retrieveWebSemanticCredentialRevocationListV2
      security: []
      description: Returns the revocation list matching the provided ID.
    parameters:
      - schema:
          type: string
          format: uuid
          example: cc641396-3750-43c8-b8b8-f30d74eb3fb3
        name: id
        in: path
        required: true
        description: >-
          Revocation list ID. This value can be found within the credential you
          created. Look at the value for
          `Credentential.credential.credentialStatus.id`, the string after
          `https://tenant.vii.mattr.global/core/v1/revocation-lists/` is what
          you're looking for
  /v2/credentials/web-semantic/{id}/revocation-status/notification:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 873277c0-a162-11ea-8a1d-a111119347e6
        description: Unique identifier for the credential whose status has changed.
    post:
      summary: Create a revocation message payload
      operationId: createWebSemanticCredentialRevNotificationV2
      responses:
        '201':
          description: Revocation message payload created
          content:
            application/json:
              schema:
                title: RevocationStatusNotification
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  type:
                    type: string
                    minLength: 1
                  to:
                    type: array
                    items:
                      required:
                        - string
                      properties: {}
                    example:
                      - did:key:subjectDid1
                      - did:key:subjectDid2
                      - did:key:subjectDid3
                  from:
                    type: string
                    minLength: 1
                    example: did:web:organization.com
                  created_time:
                    type: number
                  body:
                    type: object
                    properties:
                      revocationListCredential:
                        type: string
                        minLength: 1
                      revocationListIndex:
                        type: string
                        minLength: 1
                      isRevoked:
                        type: boolean
                    required:
                      - revocationListCredential
                      - revocationListIndex
                      - isRevoked
                required:
                  - id
                  - type
                  - to
                  - from
                  - created_time
                  - body
      description: >-
        Returns a message in JWM format that can be used to notify subjects
        based on their credential revocation status change.


        To send a notification to the Subject DID holder, use the returned
        payload with the [encrypt](#operation/encryptMessage) and
        [send](#operation/sendMessage) endpoints.


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_MESSAGE_PAYLOAD_CREATE_START

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_MESSAGE_PAYLOAD_CREATE_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_REVOCATION_MESSAGE_PAYLOAD_CREATE_FAIL
      requestBody:
        content:
          application/json:
            schema:
              description: Create a payload
              type: object
              properties:
                from:
                  type: string
                  minLength: 1
                  description: >-
                    The sender's DID URL, obtained from the `id` field of the
                    first `keyAgreement` entry of the DID document. This must be
                    a DID with a key type suitable for messaging (not a BLS key
                    type).
                  example: did:web:organization.com
                to:
                  type: array
                  description: The intended recipients DID URL.
                  items:
                    type: string
                  example:
                    - did:key:subjectDid1
                    - did:key:subjectDid2
                    - did:key:subjectDid3
              required:
                - from
                - to
              title: CreatePayloadRequest
        description: Create a JWM message payload
      tags:
        - Web Credentials Management
  /v2/credentials/web-semantic/presentations/templates:
    post:
      operationId: createPresTemplateV2
      tags:
        - Web Credentials Verification
      summary: Create a presentation template
      description: >-
        Creates a presentation template defining what type of credential is
        required for a particular verification workflow. Presentation templates
        are used to create presentation requests that are shared with a specific
        holder.


        ### **Analytic events**

        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_CREATE_START

        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_CREATE_SUCCESS

        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_CREATE_FAIL
      requestBody:
        description: The template
        required: true
        content:
          application/json:
            schema:
              type: object
              title: CreatePresentationTemplate
              description: ''
              properties:
                domain:
                  type: string
                  description: >-
                    Informs the wallet holder what domain is the verification
                    request coming from. The value must match your tenant URL or
                    your custom domain (if you have one set up). If the domain
                    validation is unsuccessful, the wallet will not let the user
                    proceed with the verification workflow.


                    > If you set up a custom domain later, any previous
                    templates created where the domain is your tenant URL will
                    become invalid. You will need to change any prior templates
                    to use the custom domain.
                name:
                  type: string
                  description: >-
                    Unique value that is used internally to manage your
                    templates. It must be unique across all presentation
                    templates on your tenant, but is not shown to the holder.
                query:
                  type: array
                  description: >-
                    Indicates what type of query method would be used by
                    presentation requests created from this presentation
                    template:

                    - QueryByExample: This query method uses the credential
                    `type` and `trustedIssuer` to only accept verifiable
                    presentations that match these parameters.

                    - QueryByFrame: This query method is used to create
                    presentation requests that wonly require specific claims in
                    the verifiable presentations and thus enable [selective
                    disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                    - DidAuth: This query method id used to authenticate with
                    the tenant and provide the holder's DID.

                    You can request multiple credentials in one request by
                    adding additioanl `credentialQuery` objects to the `query`
                    array.
                  items:
                    anyOf:
                      - type: object
                        x-examples: {}
                        title: CreatePresentationQueryByExample
                        properties:
                          type:
                            type: string
                            example: QueryByExample
                            description: >-
                              Indicates what type of query method would be used
                              by presentation requests created from this
                              presentation template. For basic presentation
                              templates you must use `QueryByExample`.
                          credentialQuery:
                            type: array
                            uniqueItems: true
                            minItems: 1
                            items:
                              type: object
                              minProperties: 1
                              properties:
                                required:
                                  type: boolean
                                  description: >-
                                    When set to `true`, the verification
                                    workflow will fail if a matching credential
                                    is not provided in the verifiable
                                    presentation response. You can only change
                                    this to `false` when your templates has
                                    multiple `credentialQuery` objects.
                                reason:
                                  type: string
                                  description: >-
                                    This value is displayed in the mobile wallet
                                    to provide the holder with context around
                                    why a credential is being requested. Ensure
                                    that this is written exactly as you would
                                    like it to appear to the user.
                                example:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      '@context':
                                        type: array
                                        description: >-
                                          This is the JSON-LD schema used to
                                          expand the `example` in the `query`.
                                          Only matched credentials will be
                                          included in the presentation response.
                                          In case the credential uses a specific
                                          JSON-LD schema, you must add that schema
                                          into the `@context` array so that the
                                          credential could be matched against the
                                          presentation request.
                                        items: {}
                                      type:
                                        description: >-
                                          The credential type that the mobile
                                          wallet will use to return matching
                                          credentials. Upon the holder's consent,
                                          the wallet would only return credentials
                                          that match this type and have been
                                          issued by the issuers included in the
                                          `trustedIssuer` object. When you include
                                          multiple credential types, the wallet
                                          will only return credentials that match
                                          **all** of the included types.
                                        oneOf:
                                          - type: string
                                            example: AlumniCredential
                                          - type: array
                                            example:
                                              - '[AlumniCredential]'
                                            items:
                                              type: string
                                      trustedIssuer:
                                        type: array
                                        description: >-
                                          This array is used to determine what
                                          credential issuers to accept in this
                                          verification workflow.
                                        items:
                                          type: object
                                          properties:
                                            required:
                                              type: boolean
                                              description: >-
                                                Indicates whether this issuer is
                                                required for a credential to be accepted
                                                in this workflow.
                                            issuer:
                                              type: string
                                              description: Issuer's DID.
                                          required:
                                            - required
                                            - issuer
                                    required:
                                      - '@context'
                                      - type
                                      - trustedIssuer
                              required:
                                - required
                                - example
                        required:
                          - type
                          - credentialQuery
                      - type: object
                        title: CreatePresentationQueryByFrame
                        properties:
                          type:
                            type: string
                            description: >-
                              Indicates what type of query method would be used
                              by presentation requests created from this
                              presentation template. For selective-disclosure
                              presentation templates you must use
                              `QueryByFrame`.
                          credentialQuery:
                            type: array
                            uniqueItems: true
                            minItems: 1
                            items:
                              type: object
                              properties:
                                reason:
                                  type: string
                                  description: >-
                                    This value is displayed in the mobile wallet
                                    to provide the holder with context around
                                    why a credential is being requested. Ensure
                                    that this is written exactly as you would
                                    like it to appear to the user.
                                frame:
                                  type: object
                                  required:
                                    - '@context'
                                    - type
                                    - credentialSubject
                                  properties:
                                    '@context':
                                      type: array
                                      description: >-
                                        This is the JSON-LD schema used to
                                        expand the `credentialSubject`.
                                      items:
                                        type: object
                                    type:
                                      description: >-
                                        The credential type that the mobile
                                        wallet will use to return matching
                                        credentials. Upon the holder's consent,
                                        the wallet would only return credentials
                                        that match this type and have been
                                        issued by the issuers included in the
                                        `trustedIssuer` object. When you include
                                        multiple credential types, the wallet
                                        will only return credentials that match
                                        **all** of the included types.
                                      oneOf:
                                        - type: string
                                          example: VerifiableCredential
                                          description: The value must be VerifiableCredential
                                        - type: array
                                          example:
                                            - '[VerifiableCredential, AlumniCredential]'
                                          items:
                                            type: string
                                            description: >-
                                              VerifiableCredential must be the first
                                              value
                                    credentialSubject:
                                      type: object
                                      description: >-
                                        This object details what claims are
                                        required for this verification workflow.
                                        Only claims included in this object will
                                        be included in the verifiable
                                        presentation, as long as you set
                                        `@explicit` to `true`.
                                      required:
                                        - '@explicit'
                                        - educationalCredentialAwarded
                                        - familyName
                                      properties:
                                        '@explicit':
                                          type: boolean
                                        educationalCredentialAwarded:
                                          type: object
                                        familyName:
                                          type: object
                                trustedIssuer:
                                  type: array
                                  description: >-
                                    This array is used to determine what
                                    credential issuers to accept in this
                                    verification workflow. If you want to accept
                                    credentials from any issuer as long as they
                                    match the defined credential `type`, leave
                                    this array empty.
                                  uniqueItems: true
                                  minItems: 0
                                  items:
                                    type: object
                                    properties:
                                      required:
                                        type: boolean
                                        description: >-
                                          Indicates whether this issuer is
                                          required for a credential to be accepted
                                          in this workflow.
                                      issuer:
                                        type: string
                                        description: >-
                                          Issuer's DID, must include a BLS key
                                          type.
                                    required:
                                      - required
                                      - issuer
                              required:
                                - reason
                                - frame
                                - trustedIssuer
                        required:
                          - type
                          - credentialQuery
                      - type: object
                        title: CreatePresentationDidAuthTemplate
                        properties:
                          type:
                            type: string
                            description: DIDAuth
                            example: DIDAuth
                        required:
                          - type
              required:
                - domain
                - name
                - query
            examples:
              Query by Example:
                value:
                  domain: tenant.vii.mattr.global
                  name: alumni_credential_request
                  query:
                    - type: QueryByExample
                      credentialQuery:
                        - required: true
                          reason: We need you to prove your alumni membership.
                          example:
                            '@context':
                              - https://optionalschema.example/
                            type: AlumniCredential
                            trustedIssuer:
                              - required: true
                                issuer: >-
                                  did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5
              Query by Frame:
                value:
                  domain: tenant.vii.mattr.global
                  name: zkp-certificate-presentation
                  query:
                    - type: QueryByFrame
                      credentialQuery:
                        - reason: >-
                            Please provide your educational award and surname
                            from your Certificate
                          frame:
                            '@context':
                              - https://www.w3.org/2018/credentials/v1
                              - https://w3id.org/vc-revocation-list-2020/v1
                              - https://optionalschema.example/
                            type:
                              - VerifiableCredential
                              - AlumniCredential
                            credentialSubject:
                              '@explicit': true
                              educationalCredentialAwarded: {}
                              familyName: {}
                          trustedIssuer:
                            - issuer: >-
                                did:key:zUC7KmMGXt7fs9URk9EDqWLfpCjVTtfFMexViLLkPPUfm9j4heqvk9JkLarva3sP54FGjFNLpwc63ZTef2aR2cPssFbyDj75kopYqWL16j7JigA2BAvJcwnaKvKPUybxbroRg1v
                              required: true
                          required: true
              DID Auth:
                value:
                  name: did-auth
                  domain: tenant.vii.mattr.global
                  query:
                    - type: DIDAuth
      responses:
        '201':
          description: Presentation template created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 64e45290-9980-11ea-b872-f1bee5fb328f
                    description: >-
                      Unique identifier for this presentation template. You will
                      need it to [create a presentation
                      request](#operation/createPresRequestV2) based on this
                      template. You can also use it to
                      [retrieve](#operation/retrievePresTemplateV2),
                      [update](#operation/updatePresTemplateV2) or
                      [remove](#operation/removePresTemplateV2) this
                      presentation template.
                  domain:
                    type: string
                    example: tenant.vii.mattr.global
                  name:
                    type: string
                    example: alumni_credential_request
                  query:
                    type: array
                    items:
                      anyOf:
                        - type: object
                          x-examples: {}
                          title: CreatePresentationQueryByExample
                          properties:
                            type:
                              type: string
                              example: QueryByExample
                              description: >-
                                Indicates what type of query method would be
                                used by presentation requests created from this
                                presentation template. For basic presentation
                                templates you must use `QueryByExample`.
                            credentialQuery:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                minProperties: 1
                                properties:
                                  required:
                                    type: boolean
                                    description: >-
                                      When set to `true`, the verification
                                      workflow will fail if a matching
                                      credential is not provided in the
                                      verifiable presentation response. You can
                                      only change this to `false` when your
                                      templates has multiple `credentialQuery`
                                      objects.
                                  reason:
                                    type: string
                                    description: >-
                                      This value is displayed in the mobile
                                      wallet to provide the holder with context
                                      around why a credential is being
                                      requested. Ensure that this is written
                                      exactly as you would like it to appear to
                                      the user.
                                  example:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        '@context':
                                          type: array
                                          description: >-
                                            This is the JSON-LD schema used to
                                            expand the `example` in the `query`.
                                            Only matched credentials will be
                                            included in the presentation response.
                                            In case the credential uses a specific
                                            JSON-LD schema, you must add that schema
                                            into the `@context` array so that the
                                            credential could be matched against the
                                            presentation request.
                                          items: {}
                                        type:
                                          description: >-
                                            The credential type that the mobile
                                            wallet will use to return matching
                                            credentials. Upon the holder's consent,
                                            the wallet would only return credentials
                                            that match this type and have been
                                            issued by the issuers included in the
                                            `trustedIssuer` object. When you include
                                            multiple credential types, the wallet
                                            will only return credentials that match
                                            **all** of the included types.
                                          oneOf:
                                            - type: string
                                              example: AlumniCredential
                                            - type: array
                                              example:
                                                - '[AlumniCredential]'
                                              items:
                                                type: string
                                        trustedIssuer:
                                          type: array
                                          description: >-
                                            This array is used to determine what
                                            credential issuers to accept in this
                                            verification workflow.
                                          items:
                                            type: object
                                            properties:
                                              required:
                                                type: boolean
                                                description: >-
                                                  Indicates whether this issuer is
                                                  required for a credential to be accepted
                                                  in this workflow.
                                              issuer:
                                                type: string
                                                description: Issuer's DID.
                                            required:
                                              - required
                                              - issuer
                                      required:
                                        - '@context'
                                        - type
                                        - trustedIssuer
                                required:
                                  - required
                                  - example
                          required:
                            - type
                            - credentialQuery
                        - type: object
                          title: CreatePresentationQueryByFrame
                          properties:
                            type:
                              type: string
                              description: >-
                                Indicates what type of query method would be
                                used by presentation requests created from this
                                presentation template. For selective-disclosure
                                presentation templates you must use
                                `QueryByFrame`.
                            credentialQuery:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  reason:
                                    type: string
                                    description: >-
                                      This value is displayed in the mobile
                                      wallet to provide the holder with context
                                      around why a credential is being
                                      requested. Ensure that this is written
                                      exactly as you would like it to appear to
                                      the user.
                                  frame:
                                    type: object
                                    required:
                                      - '@context'
                                      - type
                                      - credentialSubject
                                    properties:
                                      '@context':
                                        type: array
                                        description: >-
                                          This is the JSON-LD schema used to
                                          expand the `credentialSubject`.
                                        items:
                                          type: object
                                      type:
                                        description: >-
                                          The credential type that the mobile
                                          wallet will use to return matching
                                          credentials. Upon the holder's consent,
                                          the wallet would only return credentials
                                          that match this type and have been
                                          issued by the issuers included in the
                                          `trustedIssuer` object. When you include
                                          multiple credential types, the wallet
                                          will only return credentials that match
                                          **all** of the included types.
                                        oneOf:
                                          - type: string
                                            example: VerifiableCredential
                                            description: The value must be VerifiableCredential
                                          - type: array
                                            example:
                                              - '[VerifiableCredential, AlumniCredential]'
                                            items:
                                              type: string
                                              description: >-
                                                VerifiableCredential must be the first
                                                value
                                      credentialSubject:
                                        type: object
                                        description: >-
                                          This object details what claims are
                                          required for this verification workflow.
                                          Only claims included in this object will
                                          be included in the verifiable
                                          presentation, as long as you set
                                          `@explicit` to `true`.
                                        required:
                                          - '@explicit'
                                          - educationalCredentialAwarded
                                          - familyName
                                        properties:
                                          '@explicit':
                                            type: boolean
                                          educationalCredentialAwarded:
                                            type: object
                                          familyName:
                                            type: object
                                  trustedIssuer:
                                    type: array
                                    description: >-
                                      This array is used to determine what
                                      credential issuers to accept in this
                                      verification workflow. If you want to
                                      accept credentials from any issuer as long
                                      as they match the defined credential
                                      `type`, leave this array empty.
                                    uniqueItems: true
                                    minItems: 0
                                    items:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                          description: >-
                                            Indicates whether this issuer is
                                            required for a credential to be accepted
                                            in this workflow.
                                        issuer:
                                          type: string
                                          description: >-
                                            Issuer's DID, must include a BLS key
                                            type.
                                      required:
                                        - required
                                        - issuer
                                required:
                                  - reason
                                  - frame
                                  - trustedIssuer
                          required:
                            - type
                            - credentialQuery
                        - type: object
                          title: CreatePresentationDidAuthTemplate
                          properties:
                            type:
                              type: string
                              description: DIDAuth
                              example: DIDAuth
                          required:
                            - type
                required:
                  - id
                  - domain
                  - name
                  - query
                title: PresentationTemplateResponse
              examples:
                Created:
                  value:
                    id: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                    domain: tenant.vii.mattr.global
                    name: alumni_credential_request
                    query:
                      - type: QueryByExample
                        credentialQuery:
                          - required: true
                            reason: We need you to prove your alumni membership.
                            example:
                              '@context':
                                - https://optionalschema.example/
                              type: AlumniCredential
                              trustedIssuer:
                                - required: true
                                  issuer: >-
                                    did:key:z6MkjBWPPa1njEKygyr3LR3pRKkqv714vyTkfnUdP6ToFSH5
        '400':
          description: Bad request, Invalid request body
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    get:
      operationId: retrievePresTemplatesV2
      tags:
        - Web Credentials Verification
      summary: Retrieve all presentation templates
      description: |-
        Returns a list of all presentation templates on your tenant.

        ### **Analytic events**
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_RETRIEVE_LIST_START
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_RETRIEVE_LIST_SUCCESS
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_RETRIEVE_LIST_FAIL
      responses:
        '200':
          description: Presentation templates retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 64e45290-9980-11ea-b872-f1bee5fb328f
                          description: >-
                            Unique identifier for this presentation template.
                            You will need it to [create a presentation
                            request](#operation/createPresRequestV2) based on
                            this template. You can also use it to
                            [retrieve](#operation/retrievePresTemplateV2),
                            [update](#operation/updatePresTemplateV2) or
                            [remove](#operation/removePresTemplateV2) this
                            presentation template.
                        domain:
                          type: string
                          example: tenant.vii.mattr.global
                        name:
                          type: string
                          example: alumni_credential_request
                        query:
                          type: array
                          items:
                            anyOf:
                              - type: object
                                x-examples: {}
                                title: CreatePresentationQueryByExample
                                properties:
                                  type:
                                    type: string
                                    example: QueryByExample
                                    description: >-
                                      Indicates what type of query method would
                                      be used by presentation requests created
                                      from this presentation template. For basic
                                      presentation templates you must use
                                      `QueryByExample`.
                                  credentialQuery:
                                    type: array
                                    uniqueItems: true
                                    minItems: 1
                                    items:
                                      type: object
                                      minProperties: 1
                                      properties:
                                        required:
                                          type: boolean
                                          description: >-
                                            When set to `true`, the verification
                                            workflow will fail if a matching
                                            credential is not provided in the
                                            verifiable presentation response. You
                                            can only change this to `false` when
                                            your templates has multiple
                                            `credentialQuery` objects.
                                        reason:
                                          type: string
                                          description: >-
                                            This value is displayed in the mobile
                                            wallet to provide the holder with
                                            context around why a credential is being
                                            requested. Ensure that this is written
                                            exactly as you would like it to appear
                                            to the user.
                                        example:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              '@context':
                                                type: array
                                                description: >-
                                                  This is the JSON-LD schema used to
                                                  expand the `example` in the `query`.
                                                  Only matched credentials will be
                                                  included in the presentation response.
                                                  In case the credential uses a specific
                                                  JSON-LD schema, you must add that schema
                                                  into the `@context` array so that the
                                                  credential could be matched against the
                                                  presentation request.
                                                items: {}
                                              type:
                                                description: >-
                                                  The credential type that the mobile
                                                  wallet will use to return matching
                                                  credentials. Upon the holder's consent,
                                                  the wallet would only return credentials
                                                  that match this type and have been
                                                  issued by the issuers included in the
                                                  `trustedIssuer` object. When you include
                                                  multiple credential types, the wallet
                                                  will only return credentials that match
                                                  **all** of the included types.
                                                oneOf:
                                                  - type: string
                                                    example: AlumniCredential
                                                  - type: array
                                                    example:
                                                      - '[AlumniCredential]'
                                                    items:
                                                      type: string
                                              trustedIssuer:
                                                type: array
                                                description: >-
                                                  This array is used to determine what
                                                  credential issuers to accept in this
                                                  verification workflow.
                                                items:
                                                  type: object
                                                  properties:
                                                    required:
                                                      type: boolean
                                                      description: >-
                                                        Indicates whether this issuer is
                                                        required for a credential to be accepted
                                                        in this workflow.
                                                    issuer:
                                                      type: string
                                                      description: Issuer's DID.
                                                  required:
                                                    - required
                                                    - issuer
                                            required:
                                              - '@context'
                                              - type
                                              - trustedIssuer
                                      required:
                                        - required
                                        - example
                                required:
                                  - type
                                  - credentialQuery
                              - type: object
                                title: CreatePresentationQueryByFrame
                                properties:
                                  type:
                                    type: string
                                    description: >-
                                      Indicates what type of query method would
                                      be used by presentation requests created
                                      from this presentation template. For
                                      selective-disclosure presentation
                                      templates you must use `QueryByFrame`.
                                  credentialQuery:
                                    type: array
                                    uniqueItems: true
                                    minItems: 1
                                    items:
                                      type: object
                                      properties:
                                        reason:
                                          type: string
                                          description: >-
                                            This value is displayed in the mobile
                                            wallet to provide the holder with
                                            context around why a credential is being
                                            requested. Ensure that this is written
                                            exactly as you would like it to appear
                                            to the user.
                                        frame:
                                          type: object
                                          required:
                                            - '@context'
                                            - type
                                            - credentialSubject
                                          properties:
                                            '@context':
                                              type: array
                                              description: >-
                                                This is the JSON-LD schema used to
                                                expand the `credentialSubject`.
                                              items:
                                                type: object
                                            type:
                                              description: >-
                                                The credential type that the mobile
                                                wallet will use to return matching
                                                credentials. Upon the holder's consent,
                                                the wallet would only return credentials
                                                that match this type and have been
                                                issued by the issuers included in the
                                                `trustedIssuer` object. When you include
                                                multiple credential types, the wallet
                                                will only return credentials that match
                                                **all** of the included types.
                                              oneOf:
                                                - type: string
                                                  example: VerifiableCredential
                                                  description: The value must be VerifiableCredential
                                                - type: array
                                                  example:
                                                    - '[VerifiableCredential, AlumniCredential]'
                                                  items:
                                                    type: string
                                                    description: >-
                                                      VerifiableCredential must be the first
                                                      value
                                            credentialSubject:
                                              type: object
                                              description: >-
                                                This object details what claims are
                                                required for this verification workflow.
                                                Only claims included in this object will
                                                be included in the verifiable
                                                presentation, as long as you set
                                                `@explicit` to `true`.
                                              required:
                                                - '@explicit'
                                                - educationalCredentialAwarded
                                                - familyName
                                              properties:
                                                '@explicit':
                                                  type: boolean
                                                educationalCredentialAwarded:
                                                  type: object
                                                familyName:
                                                  type: object
                                        trustedIssuer:
                                          type: array
                                          description: >-
                                            This array is used to determine what
                                            credential issuers to accept in this
                                            verification workflow. If you want to
                                            accept credentials from any issuer as
                                            long as they match the defined
                                            credential `type`, leave this array
                                            empty.
                                          uniqueItems: true
                                          minItems: 0
                                          items:
                                            type: object
                                            properties:
                                              required:
                                                type: boolean
                                                description: >-
                                                  Indicates whether this issuer is
                                                  required for a credential to be accepted
                                                  in this workflow.
                                              issuer:
                                                type: string
                                                description: >-
                                                  Issuer's DID, must include a BLS key
                                                  type.
                                            required:
                                              - required
                                              - issuer
                                      required:
                                        - reason
                                        - frame
                                        - trustedIssuer
                                required:
                                  - type
                                  - credentialQuery
                              - type: object
                                title: CreatePresentationDidAuthTemplate
                                properties:
                                  type:
                                    type: string
                                    description: DIDAuth
                                    example: DIDAuth
                                required:
                                  - type
                      required:
                        - id
                        - domain
                        - name
                        - query
                      title: PresentationTemplateResponse
                title: PresentationTemplateArrayResponse
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
            default: 100
          in: query
          name: limit
          description: Range size of the list, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the list
    parameters: []
  /v2/credentials/web-semantic/presentations/templates/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Presentation template ID
        schema:
          type: string
    get:
      operationId: retrievePresTemplateV2
      tags:
        - Web Credentials Verification
      summary: Retrieve a presentation template
      description: |-
        Retrieve an existing presentation template by its ID.

        ### **Analytic events**
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_RETRIEVE_START
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_RETRIEVE_SUCCESS
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_RETRIEVE_FAIL
      responses:
        '200':
          description: Presentation template retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 64e45290-9980-11ea-b872-f1bee5fb328f
                    description: >-
                      Unique identifier for this presentation template. You will
                      need it to [create a presentation
                      request](#operation/createPresRequestV2) based on this
                      template. You can also use it to
                      [retrieve](#operation/retrievePresTemplateV2),
                      [update](#operation/updatePresTemplateV2) or
                      [remove](#operation/removePresTemplateV2) this
                      presentation template.
                  domain:
                    type: string
                    example: tenant.vii.mattr.global
                  name:
                    type: string
                    example: alumni_credential_request
                  query:
                    type: array
                    items:
                      anyOf:
                        - type: object
                          x-examples: {}
                          title: CreatePresentationQueryByExample
                          properties:
                            type:
                              type: string
                              example: QueryByExample
                              description: >-
                                Indicates what type of query method would be
                                used by presentation requests created from this
                                presentation template. For basic presentation
                                templates you must use `QueryByExample`.
                            credentialQuery:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                minProperties: 1
                                properties:
                                  required:
                                    type: boolean
                                    description: >-
                                      When set to `true`, the verification
                                      workflow will fail if a matching
                                      credential is not provided in the
                                      verifiable presentation response. You can
                                      only change this to `false` when your
                                      templates has multiple `credentialQuery`
                                      objects.
                                  reason:
                                    type: string
                                    description: >-
                                      This value is displayed in the mobile
                                      wallet to provide the holder with context
                                      around why a credential is being
                                      requested. Ensure that this is written
                                      exactly as you would like it to appear to
                                      the user.
                                  example:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        '@context':
                                          type: array
                                          description: >-
                                            This is the JSON-LD schema used to
                                            expand the `example` in the `query`.
                                            Only matched credentials will be
                                            included in the presentation response.
                                            In case the credential uses a specific
                                            JSON-LD schema, you must add that schema
                                            into the `@context` array so that the
                                            credential could be matched against the
                                            presentation request.
                                          items: {}
                                        type:
                                          description: >-
                                            The credential type that the mobile
                                            wallet will use to return matching
                                            credentials. Upon the holder's consent,
                                            the wallet would only return credentials
                                            that match this type and have been
                                            issued by the issuers included in the
                                            `trustedIssuer` object. When you include
                                            multiple credential types, the wallet
                                            will only return credentials that match
                                            **all** of the included types.
                                          oneOf:
                                            - type: string
                                              example: AlumniCredential
                                            - type: array
                                              example:
                                                - '[AlumniCredential]'
                                              items:
                                                type: string
                                        trustedIssuer:
                                          type: array
                                          description: >-
                                            This array is used to determine what
                                            credential issuers to accept in this
                                            verification workflow.
                                          items:
                                            type: object
                                            properties:
                                              required:
                                                type: boolean
                                                description: >-
                                                  Indicates whether this issuer is
                                                  required for a credential to be accepted
                                                  in this workflow.
                                              issuer:
                                                type: string
                                                description: Issuer's DID.
                                            required:
                                              - required
                                              - issuer
                                      required:
                                        - '@context'
                                        - type
                                        - trustedIssuer
                                required:
                                  - required
                                  - example
                          required:
                            - type
                            - credentialQuery
                        - type: object
                          title: CreatePresentationQueryByFrame
                          properties:
                            type:
                              type: string
                              description: >-
                                Indicates what type of query method would be
                                used by presentation requests created from this
                                presentation template. For selective-disclosure
                                presentation templates you must use
                                `QueryByFrame`.
                            credentialQuery:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  reason:
                                    type: string
                                    description: >-
                                      This value is displayed in the mobile
                                      wallet to provide the holder with context
                                      around why a credential is being
                                      requested. Ensure that this is written
                                      exactly as you would like it to appear to
                                      the user.
                                  frame:
                                    type: object
                                    required:
                                      - '@context'
                                      - type
                                      - credentialSubject
                                    properties:
                                      '@context':
                                        type: array
                                        description: >-
                                          This is the JSON-LD schema used to
                                          expand the `credentialSubject`.
                                        items:
                                          type: object
                                      type:
                                        description: >-
                                          The credential type that the mobile
                                          wallet will use to return matching
                                          credentials. Upon the holder's consent,
                                          the wallet would only return credentials
                                          that match this type and have been
                                          issued by the issuers included in the
                                          `trustedIssuer` object. When you include
                                          multiple credential types, the wallet
                                          will only return credentials that match
                                          **all** of the included types.
                                        oneOf:
                                          - type: string
                                            example: VerifiableCredential
                                            description: The value must be VerifiableCredential
                                          - type: array
                                            example:
                                              - '[VerifiableCredential, AlumniCredential]'
                                            items:
                                              type: string
                                              description: >-
                                                VerifiableCredential must be the first
                                                value
                                      credentialSubject:
                                        type: object
                                        description: >-
                                          This object details what claims are
                                          required for this verification workflow.
                                          Only claims included in this object will
                                          be included in the verifiable
                                          presentation, as long as you set
                                          `@explicit` to `true`.
                                        required:
                                          - '@explicit'
                                          - educationalCredentialAwarded
                                          - familyName
                                        properties:
                                          '@explicit':
                                            type: boolean
                                          educationalCredentialAwarded:
                                            type: object
                                          familyName:
                                            type: object
                                  trustedIssuer:
                                    type: array
                                    description: >-
                                      This array is used to determine what
                                      credential issuers to accept in this
                                      verification workflow. If you want to
                                      accept credentials from any issuer as long
                                      as they match the defined credential
                                      `type`, leave this array empty.
                                    uniqueItems: true
                                    minItems: 0
                                    items:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                          description: >-
                                            Indicates whether this issuer is
                                            required for a credential to be accepted
                                            in this workflow.
                                        issuer:
                                          type: string
                                          description: >-
                                            Issuer's DID, must include a BLS key
                                            type.
                                      required:
                                        - required
                                        - issuer
                                required:
                                  - reason
                                  - frame
                                  - trustedIssuer
                          required:
                            - type
                            - credentialQuery
                        - type: object
                          title: CreatePresentationDidAuthTemplate
                          properties:
                            type:
                              type: string
                              description: DIDAuth
                              example: DIDAuth
                          required:
                            - type
                required:
                  - id
                  - domain
                  - name
                  - query
                title: PresentationTemplateResponse
        '400':
          description: Invalid templateId parameter format
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    delete:
      operationId: removePresTemplateV2
      tags:
        - Web Credentials Verification
      summary: Delete a presentation template
      description: |-
        Deletes an existing presentation template by its ID.

        ### **Analytic events**
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_DELETE_START
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_DELETE_SUCCESS
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_DELETE_FAIL
      responses:
        '204':
          description: Presentation template deleted
        '400':
          description: Invalid templateId parameter format.
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    put:
      summary: Update a presentation template
      operationId: updatePresTemplateV2
      tags:
        - Web Credentials Verification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 64e45290-9980-11ea-b872-f1bee5fb328f
                    description: >-
                      Unique identifier for this presentation template. You will
                      need it to [create a presentation
                      request](#operation/createPresRequestV2) based on this
                      template. You can also use it to
                      [retrieve](#operation/retrievePresTemplateV2),
                      [update](#operation/updatePresTemplateV2) or
                      [remove](#operation/removePresTemplateV2) this
                      presentation template.
                  domain:
                    type: string
                    example: tenant.vii.mattr.global
                  name:
                    type: string
                    example: alumni_credential_request
                  query:
                    type: array
                    items:
                      anyOf:
                        - type: object
                          x-examples: {}
                          title: CreatePresentationQueryByExample
                          properties:
                            type:
                              type: string
                              example: QueryByExample
                              description: >-
                                Indicates what type of query method would be
                                used by presentation requests created from this
                                presentation template. For basic presentation
                                templates you must use `QueryByExample`.
                            credentialQuery:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                minProperties: 1
                                properties:
                                  required:
                                    type: boolean
                                    description: >-
                                      When set to `true`, the verification
                                      workflow will fail if a matching
                                      credential is not provided in the
                                      verifiable presentation response. You can
                                      only change this to `false` when your
                                      templates has multiple `credentialQuery`
                                      objects.
                                  reason:
                                    type: string
                                    description: >-
                                      This value is displayed in the mobile
                                      wallet to provide the holder with context
                                      around why a credential is being
                                      requested. Ensure that this is written
                                      exactly as you would like it to appear to
                                      the user.
                                  example:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        '@context':
                                          type: array
                                          description: >-
                                            This is the JSON-LD schema used to
                                            expand the `example` in the `query`.
                                            Only matched credentials will be
                                            included in the presentation response.
                                            In case the credential uses a specific
                                            JSON-LD schema, you must add that schema
                                            into the `@context` array so that the
                                            credential could be matched against the
                                            presentation request.
                                          items: {}
                                        type:
                                          description: >-
                                            The credential type that the mobile
                                            wallet will use to return matching
                                            credentials. Upon the holder's consent,
                                            the wallet would only return credentials
                                            that match this type and have been
                                            issued by the issuers included in the
                                            `trustedIssuer` object. When you include
                                            multiple credential types, the wallet
                                            will only return credentials that match
                                            **all** of the included types.
                                          oneOf:
                                            - type: string
                                              example: AlumniCredential
                                            - type: array
                                              example:
                                                - '[AlumniCredential]'
                                              items:
                                                type: string
                                        trustedIssuer:
                                          type: array
                                          description: >-
                                            This array is used to determine what
                                            credential issuers to accept in this
                                            verification workflow.
                                          items:
                                            type: object
                                            properties:
                                              required:
                                                type: boolean
                                                description: >-
                                                  Indicates whether this issuer is
                                                  required for a credential to be accepted
                                                  in this workflow.
                                              issuer:
                                                type: string
                                                description: Issuer's DID.
                                            required:
                                              - required
                                              - issuer
                                      required:
                                        - '@context'
                                        - type
                                        - trustedIssuer
                                required:
                                  - required
                                  - example
                          required:
                            - type
                            - credentialQuery
                        - type: object
                          title: CreatePresentationQueryByFrame
                          properties:
                            type:
                              type: string
                              description: >-
                                Indicates what type of query method would be
                                used by presentation requests created from this
                                presentation template. For selective-disclosure
                                presentation templates you must use
                                `QueryByFrame`.
                            credentialQuery:
                              type: array
                              uniqueItems: true
                              minItems: 1
                              items:
                                type: object
                                properties:
                                  reason:
                                    type: string
                                    description: >-
                                      This value is displayed in the mobile
                                      wallet to provide the holder with context
                                      around why a credential is being
                                      requested. Ensure that this is written
                                      exactly as you would like it to appear to
                                      the user.
                                  frame:
                                    type: object
                                    required:
                                      - '@context'
                                      - type
                                      - credentialSubject
                                    properties:
                                      '@context':
                                        type: array
                                        description: >-
                                          This is the JSON-LD schema used to
                                          expand the `credentialSubject`.
                                        items:
                                          type: object
                                      type:
                                        description: >-
                                          The credential type that the mobile
                                          wallet will use to return matching
                                          credentials. Upon the holder's consent,
                                          the wallet would only return credentials
                                          that match this type and have been
                                          issued by the issuers included in the
                                          `trustedIssuer` object. When you include
                                          multiple credential types, the wallet
                                          will only return credentials that match
                                          **all** of the included types.
                                        oneOf:
                                          - type: string
                                            example: VerifiableCredential
                                            description: The value must be VerifiableCredential
                                          - type: array
                                            example:
                                              - '[VerifiableCredential, AlumniCredential]'
                                            items:
                                              type: string
                                              description: >-
                                                VerifiableCredential must be the first
                                                value
                                      credentialSubject:
                                        type: object
                                        description: >-
                                          This object details what claims are
                                          required for this verification workflow.
                                          Only claims included in this object will
                                          be included in the verifiable
                                          presentation, as long as you set
                                          `@explicit` to `true`.
                                        required:
                                          - '@explicit'
                                          - educationalCredentialAwarded
                                          - familyName
                                        properties:
                                          '@explicit':
                                            type: boolean
                                          educationalCredentialAwarded:
                                            type: object
                                          familyName:
                                            type: object
                                  trustedIssuer:
                                    type: array
                                    description: >-
                                      This array is used to determine what
                                      credential issuers to accept in this
                                      verification workflow. If you want to
                                      accept credentials from any issuer as long
                                      as they match the defined credential
                                      `type`, leave this array empty.
                                    uniqueItems: true
                                    minItems: 0
                                    items:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                          description: >-
                                            Indicates whether this issuer is
                                            required for a credential to be accepted
                                            in this workflow.
                                        issuer:
                                          type: string
                                          description: >-
                                            Issuer's DID, must include a BLS key
                                            type.
                                      required:
                                        - required
                                        - issuer
                                required:
                                  - reason
                                  - frame
                                  - trustedIssuer
                          required:
                            - type
                            - credentialQuery
                        - type: object
                          title: CreatePresentationDidAuthTemplate
                          properties:
                            type:
                              type: string
                              description: DIDAuth
                              example: DIDAuth
                          required:
                            - type
                required:
                  - id
                  - domain
                  - name
                  - query
                title: PresentationTemplateResponse
      description: |-
        Updates an existing presentation template by its ID.

        ### **Analytic events**
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_UPDATE_START
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_UPDATE_SUCCESS
        * PRESENTATION_WEB_SEMANTIC_TEMPLATE_UPDATE_FAIL
      requestBody:
        content:
          application/json:
            schema:
              title: UpdatePresentationTemplate
              allOf:
                - type: object
                  properties:
                    id:
                      type: string
                - type: object
                  title: CreatePresentationTemplate
                  description: ''
                  properties:
                    domain:
                      type: string
                      description: >-
                        Informs the wallet holder what domain is the
                        verification request coming from. The value must match
                        your tenant URL or your custom domain (if you have one
                        set up). If the domain validation is unsuccessful, the
                        wallet will not let the user proceed with the
                        verification workflow.


                        > If you set up a custom domain later, any previous
                        templates created where the domain is your tenant URL
                        will become invalid. You will need to change any prior
                        templates to use the custom domain.
                    name:
                      type: string
                      description: >-
                        Unique value that is used internally to manage your
                        templates. It must be unique across all presentation
                        templates on your tenant, but is not shown to the
                        holder.
                    query:
                      type: array
                      description: >-
                        Indicates what type of query method would be used by
                        presentation requests created from this presentation
                        template:

                        - QueryByExample: This query method uses the credential
                        `type` and `trustedIssuer` to only accept verifiable
                        presentations that match these parameters.

                        - QueryByFrame: This query method is used to create
                        presentation requests that wonly require specific claims
                        in the verifiable presentations and thus enable
                        [selective
                        disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                        - DidAuth: This query method id used to authenticate
                        with the tenant and provide the holder's DID.

                        You can request multiple credentials in one request by
                        adding additioanl `credentialQuery` objects to the
                        `query` array.
                      items:
                        anyOf:
                          - type: object
                            x-examples: {}
                            title: CreatePresentationQueryByExample
                            properties:
                              type:
                                type: string
                                example: QueryByExample
                                description: >-
                                  Indicates what type of query method would be
                                  used by presentation requests created from
                                  this presentation template. For basic
                                  presentation templates you must use
                                  `QueryByExample`.
                              credentialQuery:
                                type: array
                                uniqueItems: true
                                minItems: 1
                                items:
                                  type: object
                                  minProperties: 1
                                  properties:
                                    required:
                                      type: boolean
                                      description: >-
                                        When set to `true`, the verification
                                        workflow will fail if a matching
                                        credential is not provided in the
                                        verifiable presentation response. You
                                        can only change this to `false` when
                                        your templates has multiple
                                        `credentialQuery` objects.
                                    reason:
                                      type: string
                                      description: >-
                                        This value is displayed in the mobile
                                        wallet to provide the holder with
                                        context around why a credential is being
                                        requested. Ensure that this is written
                                        exactly as you would like it to appear
                                        to the user.
                                    example:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          '@context':
                                            type: array
                                            description: >-
                                              This is the JSON-LD schema used to
                                              expand the `example` in the `query`.
                                              Only matched credentials will be
                                              included in the presentation response.
                                              In case the credential uses a specific
                                              JSON-LD schema, you must add that schema
                                              into the `@context` array so that the
                                              credential could be matched against the
                                              presentation request.
                                            items: {}
                                          type:
                                            description: >-
                                              The credential type that the mobile
                                              wallet will use to return matching
                                              credentials. Upon the holder's consent,
                                              the wallet would only return credentials
                                              that match this type and have been
                                              issued by the issuers included in the
                                              `trustedIssuer` object. When you include
                                              multiple credential types, the wallet
                                              will only return credentials that match
                                              **all** of the included types.
                                            oneOf:
                                              - type: string
                                                example: AlumniCredential
                                              - type: array
                                                example:
                                                  - '[AlumniCredential]'
                                                items:
                                                  type: string
                                          trustedIssuer:
                                            type: array
                                            description: >-
                                              This array is used to determine what
                                              credential issuers to accept in this
                                              verification workflow.
                                            items:
                                              type: object
                                              properties:
                                                required:
                                                  type: boolean
                                                  description: >-
                                                    Indicates whether this issuer is
                                                    required for a credential to be accepted
                                                    in this workflow.
                                                issuer:
                                                  type: string
                                                  description: Issuer's DID.
                                              required:
                                                - required
                                                - issuer
                                        required:
                                          - '@context'
                                          - type
                                          - trustedIssuer
                                  required:
                                    - required
                                    - example
                            required:
                              - type
                              - credentialQuery
                          - type: object
                            title: CreatePresentationQueryByFrame
                            properties:
                              type:
                                type: string
                                description: >-
                                  Indicates what type of query method would be
                                  used by presentation requests created from
                                  this presentation template. For
                                  selective-disclosure presentation templates
                                  you must use `QueryByFrame`.
                              credentialQuery:
                                type: array
                                uniqueItems: true
                                minItems: 1
                                items:
                                  type: object
                                  properties:
                                    reason:
                                      type: string
                                      description: >-
                                        This value is displayed in the mobile
                                        wallet to provide the holder with
                                        context around why a credential is being
                                        requested. Ensure that this is written
                                        exactly as you would like it to appear
                                        to the user.
                                    frame:
                                      type: object
                                      required:
                                        - '@context'
                                        - type
                                        - credentialSubject
                                      properties:
                                        '@context':
                                          type: array
                                          description: >-
                                            This is the JSON-LD schema used to
                                            expand the `credentialSubject`.
                                          items:
                                            type: object
                                        type:
                                          description: >-
                                            The credential type that the mobile
                                            wallet will use to return matching
                                            credentials. Upon the holder's consent,
                                            the wallet would only return credentials
                                            that match this type and have been
                                            issued by the issuers included in the
                                            `trustedIssuer` object. When you include
                                            multiple credential types, the wallet
                                            will only return credentials that match
                                            **all** of the included types.
                                          oneOf:
                                            - type: string
                                              example: VerifiableCredential
                                              description: The value must be VerifiableCredential
                                            - type: array
                                              example:
                                                - '[VerifiableCredential, AlumniCredential]'
                                              items:
                                                type: string
                                                description: >-
                                                  VerifiableCredential must be the first
                                                  value
                                        credentialSubject:
                                          type: object
                                          description: >-
                                            This object details what claims are
                                            required for this verification workflow.
                                            Only claims included in this object will
                                            be included in the verifiable
                                            presentation, as long as you set
                                            `@explicit` to `true`.
                                          required:
                                            - '@explicit'
                                            - educationalCredentialAwarded
                                            - familyName
                                          properties:
                                            '@explicit':
                                              type: boolean
                                            educationalCredentialAwarded:
                                              type: object
                                            familyName:
                                              type: object
                                    trustedIssuer:
                                      type: array
                                      description: >-
                                        This array is used to determine what
                                        credential issuers to accept in this
                                        verification workflow. If you want to
                                        accept credentials from any issuer as
                                        long as they match the defined
                                        credential `type`, leave this array
                                        empty.
                                      uniqueItems: true
                                      minItems: 0
                                      items:
                                        type: object
                                        properties:
                                          required:
                                            type: boolean
                                            description: >-
                                              Indicates whether this issuer is
                                              required for a credential to be accepted
                                              in this workflow.
                                          issuer:
                                            type: string
                                            description: >-
                                              Issuer's DID, must include a BLS key
                                              type.
                                        required:
                                          - required
                                          - issuer
                                  required:
                                    - reason
                                    - frame
                                    - trustedIssuer
                            required:
                              - type
                              - credentialQuery
                          - type: object
                            title: CreatePresentationDidAuthTemplate
                            properties:
                              type:
                                type: string
                                description: DIDAuth
                                example: DIDAuth
                            required:
                              - type
                  required:
                    - domain
                    - name
                    - query
        description: ''
  /v2/credentials/web-semantic/presentations/requests:
    post:
      operationId: createPresRequestV2
      tags:
        - Web Credentials Verification
      summary: Create a presentation request
      description: >-
        Creates a short lived presentation request based on an existing
        presentation template. The request is returned in the form of a JWM
        message and must be [signed](#operation/signMessage) and sent to the
        holder via one of the following methods:

        - QR code.

        - Deeplink.

        - [Encrypted](#operation/encryptMessage) and
        [sent](#operation/sendMessage) as a wallet notification.


        ### **Analytic events**

        * PRESENTATION_WEB_SEMANTIC_REQUEST_CREATE_START

        * PRESENTATION_WEB_SEMANTIC_REQUEST_CREATE_SUCCESS

        * PRESENTATION_WEB_SEMANTIC_REQUEST_CREATE_FAIL
      requestBody:
        description: The presentation request payload
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - challenge
                - templateId
                - did
                - callbackUrl
              properties:
                challenge:
                  type: string
                  description: >-
                    This unique identifier will be used to validate the
                    presentation response sent to the configured `callbackUrl`.
                    By comparing `challenge` with the `challengeId` value in the
                    response, you can ensure it was sent by the intended MATTR
                    VII tenant.
                  example: 64e45290-9980-11ea-b872-f1bee5fb328f
                did:
                  type: string
                  description: >-
                    This is the DID associated with the verifier. It must be
                    available on the tenant and have a key type that is able to
                    be used for messaging (e.g. a ed25519 key type).
                  example: did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr
                templateId:
                  type: string
                  description: >-
                    The `id` value of an existing presentation template that
                    will be used to create the presentation request.
                  example: 64e45290-9980-11ea-b872-f1bee5fb328f
                expiresTime:
                  type: number
                  description: >-
                    Once the time (Unix time) is reached the presentation
                    corresponding to the challenge will not be accepted. For the
                    purpose of testing you may wish to extend this out. Value
                    cannot be more than 30 minutes (1800000ms) in the future,
                    which is the maximal expiry period for a presentation
                    request. Defaults to five minutes if no value is provided.
                  example: 1592955632103
                callbackUrl:
                  type: string
                  format: uri
                  description: >-
                    This is the path that you want MATTR VII to message (in the
                    form of a JSON body) once it has received and processed the
                    verifiable presentation from the mobile wallet holder:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not include query parameters.

                    - Must be available, accept POST requests and respond with a
                    200 OK.

                    > The callback URL will not be present directly in the
                    signed presentation request. We highly recommend protecting
                    the callback endpoint by including a unique identifier in
                    the URL to create a unique callback URL for each request,
                    which would make it hard to guess.

                    > We recommend the callback endpoint always responds with a
                    404 header to any unsuccessful calls.
                  example: https://your-website.com/api/callback
              title: CreatePresentationRequestRequest
      responses:
        '201':
          description: Presentation request created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Presentation Request id
                    example: c74128a0-9949-11ea-9554-b5a630b3c119
                  callbackUrl:
                    type: string
                    format: uri
                    description: Endpoint that will receive the Verifiable Presentation
                    example: https://your-website.com/api/callback
                  request:
                    type: object
                    description: Presentation Request Details
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Presentation Request id
                        example: c74128a0-9949-11ea-9554-b5a630b3c119
                      type:
                        type: string
                        format: uri
                        description: Presentation Request schema
                        example: >-
                          https://mattr.global/schemas/verifiable-presentation/request/QueryByExample
                      from:
                        type: string
                        description: Verifier DID
                        example: >-
                          did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                      created_time:
                        type: number
                        description: Creation time
                        example: 1606709582907
                      expires_time:
                        type: number
                        description: Expiry time
                        example: 2594859115000
                      reply_url:
                        type: string
                        description: Endpoint that will receive the Verifiable Presentation
                        example: https://your-website.com/api/callback
                      reply_to:
                        type: array
                        description: Verifier DID
                        items:
                          type: string
                          example: >-
                            did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                      body:
                        description: >-
                          Definition of what type of Credential is being
                          requested
                        allOf:
                          - type: object
                            properties:
                              id:
                                type: string
                                example: 64e45290-9980-11ea-b872-f1bee5fb328f
                                description: >-
                                  Unique identifier for this presentation
                                  template. You will need it to [create a
                                  presentation
                                  request](#operation/createPresRequestV2) based
                                  on this template. You can also use it to
                                  [retrieve](#operation/retrievePresTemplateV2),
                                  [update](#operation/updatePresTemplateV2) or
                                  [remove](#operation/removePresTemplateV2) this
                                  presentation template.
                              domain:
                                type: string
                                example: tenant.vii.mattr.global
                              name:
                                type: string
                                example: alumni_credential_request
                              query:
                                type: array
                                items:
                                  anyOf:
                                    - type: object
                                      x-examples: {}
                                      title: CreatePresentationQueryByExample
                                      properties:
                                        type:
                                          type: string
                                          example: QueryByExample
                                          description: >-
                                            Indicates what type of query method
                                            would be used by presentation requests
                                            created from this presentation template.
                                            For basic presentation templates you
                                            must use `QueryByExample`.
                                        credentialQuery:
                                          type: array
                                          uniqueItems: true
                                          minItems: 1
                                          items:
                                            type: object
                                            minProperties: 1
                                            properties:
                                              required:
                                                type: boolean
                                                description: >-
                                                  When set to `true`, the verification
                                                  workflow will fail if a matching
                                                  credential is not provided in the
                                                  verifiable presentation response. You
                                                  can only change this to `false` when
                                                  your templates has multiple
                                                  `credentialQuery` objects.
                                              reason:
                                                type: string
                                                description: >-
                                                  This value is displayed in the mobile
                                                  wallet to provide the holder with
                                                  context around why a credential is being
                                                  requested. Ensure that this is written
                                                  exactly as you would like it to appear
                                                  to the user.
                                              example:
                                                type: array
                                                items:
                                                  type: object
                                                  properties:
                                                    '@context':
                                                      type: array
                                                      description: >-
                                                        This is the JSON-LD schema used to
                                                        expand the `example` in the `query`.
                                                        Only matched credentials will be
                                                        included in the presentation response.
                                                        In case the credential uses a specific
                                                        JSON-LD schema, you must add that schema
                                                        into the `@context` array so that the
                                                        credential could be matched against the
                                                        presentation request.
                                                      items: {}
                                                    type:
                                                      description: >-
                                                        The credential type that the mobile
                                                        wallet will use to return matching
                                                        credentials. Upon the holder's consent,
                                                        the wallet would only return credentials
                                                        that match this type and have been
                                                        issued by the issuers included in the
                                                        `trustedIssuer` object. When you include
                                                        multiple credential types, the wallet
                                                        will only return credentials that match
                                                        **all** of the included types.
                                                      oneOf:
                                                        - type: string
                                                          example: AlumniCredential
                                                        - type: array
                                                          example:
                                                            - '[AlumniCredential]'
                                                          items:
                                                            type: string
                                                    trustedIssuer:
                                                      type: array
                                                      description: >-
                                                        This array is used to determine what
                                                        credential issuers to accept in this
                                                        verification workflow.
                                                      items:
                                                        type: object
                                                        properties:
                                                          required:
                                                            type: boolean
                                                            description: >-
                                                              Indicates whether this issuer is
                                                              required for a credential to be accepted
                                                              in this workflow.
                                                          issuer:
                                                            type: string
                                                            description: Issuer's DID.
                                                        required:
                                                          - required
                                                          - issuer
                                                  required:
                                                    - '@context'
                                                    - type
                                                    - trustedIssuer
                                            required:
                                              - required
                                              - example
                                      required:
                                        - type
                                        - credentialQuery
                                    - type: object
                                      title: CreatePresentationQueryByFrame
                                      properties:
                                        type:
                                          type: string
                                          description: >-
                                            Indicates what type of query method
                                            would be used by presentation requests
                                            created from this presentation template.
                                            For selective-disclosure presentation
                                            templates you must use `QueryByFrame`.
                                        credentialQuery:
                                          type: array
                                          uniqueItems: true
                                          minItems: 1
                                          items:
                                            type: object
                                            properties:
                                              reason:
                                                type: string
                                                description: >-
                                                  This value is displayed in the mobile
                                                  wallet to provide the holder with
                                                  context around why a credential is being
                                                  requested. Ensure that this is written
                                                  exactly as you would like it to appear
                                                  to the user.
                                              frame:
                                                type: object
                                                required:
                                                  - '@context'
                                                  - type
                                                  - credentialSubject
                                                properties:
                                                  '@context':
                                                    type: array
                                                    description: >-
                                                      This is the JSON-LD schema used to
                                                      expand the `credentialSubject`.
                                                    items:
                                                      type: object
                                                  type:
                                                    description: >-
                                                      The credential type that the mobile
                                                      wallet will use to return matching
                                                      credentials. Upon the holder's consent,
                                                      the wallet would only return credentials
                                                      that match this type and have been
                                                      issued by the issuers included in the
                                                      `trustedIssuer` object. When you include
                                                      multiple credential types, the wallet
                                                      will only return credentials that match
                                                      **all** of the included types.
                                                    oneOf:
                                                      - type: string
                                                        example: VerifiableCredential
                                                        description: The value must be VerifiableCredential
                                                      - type: array
                                                        example:
                                                          - '[VerifiableCredential, AlumniCredential]'
                                                        items:
                                                          type: string
                                                          description: >-
                                                            VerifiableCredential must be the first
                                                            value
                                                  credentialSubject:
                                                    type: object
                                                    description: >-
                                                      This object details what claims are
                                                      required for this verification workflow.
                                                      Only claims included in this object will
                                                      be included in the verifiable
                                                      presentation, as long as you set
                                                      `@explicit` to `true`.
                                                    required:
                                                      - '@explicit'
                                                      - educationalCredentialAwarded
                                                      - familyName
                                                    properties:
                                                      '@explicit':
                                                        type: boolean
                                                      educationalCredentialAwarded:
                                                        type: object
                                                      familyName:
                                                        type: object
                                              trustedIssuer:
                                                type: array
                                                description: >-
                                                  This array is used to determine what
                                                  credential issuers to accept in this
                                                  verification workflow. If you want to
                                                  accept credentials from any issuer as
                                                  long as they match the defined
                                                  credential `type`, leave this array
                                                  empty.
                                                uniqueItems: true
                                                minItems: 0
                                                items:
                                                  type: object
                                                  properties:
                                                    required:
                                                      type: boolean
                                                      description: >-
                                                        Indicates whether this issuer is
                                                        required for a credential to be accepted
                                                        in this workflow.
                                                    issuer:
                                                      type: string
                                                      description: >-
                                                        Issuer's DID, must include a BLS key
                                                        type.
                                                  required:
                                                    - required
                                                    - issuer
                                            required:
                                              - reason
                                              - frame
                                              - trustedIssuer
                                      required:
                                        - type
                                        - credentialQuery
                                    - type: object
                                      title: CreatePresentationDidAuthTemplate
                                      properties:
                                        type:
                                          type: string
                                          description: DIDAuth
                                          example: DIDAuth
                                      required:
                                        - type
                            required:
                              - id
                              - domain
                              - name
                              - query
                            title: PresentationTemplateResponse
                          - type: object
                            properties:
                              challenge:
                                type: string
                                format: uuid
                                description: Challenge to match the response to a request
                                example: e1b35ae0-9e0e-11ea-9bbf-a387b27c9e60
                  didcommUri:
                    type: string
                    format: uri
                    description: >-
                      A DIDComm URI that is pointing to a shortened presentation
                      request JWS message
                title: CreatePresentationRequestResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: callbackUrl
    parameters: []
  /v2/credentials/web-semantic/presentations/verify:
    post:
      summary: Verify a verifiable presentation
      operationId: verifyPresV2
      responses:
        '200':
          description: Presentation verification completed
          content:
            application/json:
              schema:
                title: VerifyPresentation
                type: object
                properties:
                  verified:
                    type: boolean
                    description: >-
                      Set to `true` if the presentation passed all checks, and
                      `false` otherwise.
                  reason:
                    type: string
                    description: >-
                      When `verified` is `false`, details why the verification
                      had failed.
                required:
                  - verified
              examples:
                Verified:
                  value:
                    verified: true
                Invalid:
                  value:
                    verified: false
                    reason: Credential is invalid
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - msg: Invalid value
                        param: presentation.proof
                        location: body
                      - msg: Invalid value
                        param: presentation.@context
                        location: body
                      - msg: Invalid value
                        param: presentation.type
                        location: body
      tags:
        - Web Credentials Verification
      description: >-
        Verifies a provided verifiable presentation that adheres to the [W3C
        Verifiable Credential Data
        Model](https://www.w3.org/TR/vc-data-model/#presentations):

        - Ensures the presentation conforms to the VC Data model.

        - For each `verifiableCredential` objects:
          - Issuer DID can be resolved.
          - JSON-LD context is valid for subject claims.
          - Proof is valid & the credential has not been tampered with.
          - Is not in a `revoked` status on a `RevocationList2020`.
          - The proof is valid for each subjectDID to prove ownership.
          - Valid proof exists for the presentation `holderDID`.

        The request must include a `presentation` object that adheres to the
        [W3C Verifiable Credential Data
        Model](https://www.w3.org/TR/vc-data-model/#presentations).


        If a `challenge` and/or `domain` is provided they are used for
        credential verification. Otherwise, the `challenge` and/or `domain`
        within the presentation proof is used instead.


        ### **Analytic events**

        * PRESENTATION_WEB_SEMANTIC_VERIFY_START

        * PRESENTATION_WEB_SEMANTIC_VERIFY_SUCCESS

        * PRESENTATION_WEB_SEMANTIC_VERIFY_FAIL
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples: {}
              title: VerifiablePresentation
              properties:
                presentation:
                  type: object
                  required:
                    - '@context'
                    - type
                    - verifiableCredential
                    - id
                    - holder
                    - proof
                  properties:
                    '@context':
                      type: array
                      items:
                        type: object
                    type:
                      type: array
                      items:
                        type: object
                    verifiableCredential:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        type: object
                        properties:
                          '@context':
                            type: array
                            example:
                              - https://www.w3.org/2018/credentials/v1
                              - https://www.w3.org/2018/credentials/examples/v1
                            items:
                              type: string
                              minLength: 1
                              example: >-
                                "https://www.w3.org/2018/credentials/v1",
                                "https://www.w3.org/2018/credentials/examples/v1"
                          type:
                            type: array
                            example:
                              - VerifiableCredential
                              - AlumniCredential
                            items:
                              type: string
                              minLength: 1
                              example: '"AlumniCredential", "VerifiableCredential"'
                          issuer:
                            description: >-
                              Includes Issuer id (DID), domain name and optional
                              branding properties.
                            oneOf:
                              - type: object
                                properties:
                                  id:
                                    type: string
                                    example: did:web:organization.com
                                  name:
                                    type: string
                                    example: Example University
                                  logoUrl:
                                    type: string
                                    example: https://example.edu/img/logo.png
                                    description: >-
                                      The location of the logo image. The
                                      supported formats are jpg, png, and svg.
                                  iconUrl:
                                    type: string
                                    example: https://example.edu/img/icon.png
                                    description: >-
                                      The location of the icon image. The
                                      supported formats are jpg, png, and svg.
                              - type: string
                          credentialBranding:
                            type: object
                            description: Includes optional credential branding properties.
                            properties:
                              backgroundColor:
                                type: string
                                example: '#B00AA0'
                                description: >-
                                  The background colour used for the credential
                                  card. The format is "#rrggbb" where "rrggbb"
                                  is a hex RGB triplet, such as "#FFCC00".
                              watermarkImageUrl:
                                type: string
                                example: https://example.edu/img/watermark.png
                                description: >-
                                  The location of the watermark image. The
                                  supported formats are jpg, png, and svg.
                          issuanceDate:
                            type: string
                            format: date-time
                            example: '2020-05-02T12:06:29.156Z'
                          credentialStatus:
                            type: object
                            description: Credential status location information
                            properties:
                              id:
                                type: string
                                description: Unique ID for the credential status
                                example: >-
                                  https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                              type:
                                type: string
                                description: >-
                                  Indicates that the status contains revocation
                                  information
                                example: RevocationList2020Status
                              revocationListIndex:
                                type: integer
                                example: 1
                                description: >-
                                  The location within the revocation list for
                                  the credential
                              revocationListCredential:
                                type: string
                                description: The location of the revocation list
                                example: >-
                                  https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                            title: CredentialStatus
                          credentialSubject:
                            type: object
                            example:
                              givenName: Jamie
                              familyName: Doe
                              alumniOf: Example University
                            properties:
                              givenName:
                                type: string
                                example: Jamie
                              familyName:
                                type: string
                                example: Doe
                              alumniOf:
                                type: string
                                example: Example University
                          proof:
                            type: object
                            properties:
                              type:
                                type: string
                                example: Ed25519Signature2018
                              created:
                                type: string
                                format: date-time
                                example: '2020-05-02T12:06:29Z'
                              jws:
                                type: string
                                description: Compact form of JWS
                                example: >-
                                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                              proofPurpose:
                                type: string
                                example: assertionMethod
                              verificationMethod:
                                type: string
                                example: did:web:organization.com
                            title: ED25519Signature2018
                          name:
                            type: string
                            example: Alumni Credential
                            description: Name of the credential (requires v2 data model)
                          description:
                            type: string
                            example: >-
                              This credential shows that the person has attended
                              the mentioned university.
                            description: >-
                              Description of the credential (requires v2 data
                              model)
                        required:
                          - '@context'
                          - type
                          - issuanceDate
                          - credentialSubject
                          - proof
                        title: VerifiableCredential
                    id:
                      type: string
                      minLength: 1
                    holder:
                      type: string
                      minLength: 1
                    proof:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            minLength: 1
                          created:
                            type: string
                            minLength: 1
                          challenge:
                            type: string
                            minLength: 1
                          domain:
                            type: string
                            minLength: 1
                          jws:
                            type: string
                            minLength: 1
                          proofPurpose:
                            type: string
                            minLength: 1
                          verificationMethod:
                            type: string
                            minLength: 1
                        required:
                          - type
                          - created
                          - challenge
                          - domain
                          - jws
                          - proofPurpose
                          - verificationMethod
                challenge:
                  type: string
                  example: 3182bdea-63d9-11ea-b6de-3b7c1404d57f
                domain:
                  type: string
                  example: example.com
              required:
                - presentation
        description: Presentation to verify
    parameters: []
  /v2/credentials/web-semantic/linkeddata/convert:
    post:
      operationId: linkedDataConvertV2
      tags:
        - Web Credentials Issuance
      summary: Convert linked-data documents
      description: >-
        > Compressed Web credentials are currently marked as 'Retired' as per
        our [Service Level
        Agreement](https://learn.mattr.global/docs/terms/service-level-agreement).
        This capability is no longer actively enhanced or supported and will be
        removed from the MATTR VII platform on 19 Aug 2024. It is highly
        recommended to issue [Compact Semantic
        Credentials](https://learn.mattr.global/tutorials/create/compact-credentials/create-semantic-compact)
        instead.

        Convert a document like a JSON-LD Credential or a Verifiable
        Presentation into a CBOR-LD document, and vice versa.


        The Convert operation can accept JSON-LD documents as an input and
        convert them to a CBOR-LD document represented in Base64. 

        CBOR-LD documents can represent the same information in a smaller size
        that is more friendly for offline use-cases, such as embedding into a QR
        code printed onto physical media or a PDF.


        Documents can also be converted from CBOR-LD in Base64 format to
        JSON-LD, the response can either be encoded in Base 64 or plain JSON.
        This is useful for accepting compressed Credentials or Verifiable
        Presentations and converting them for use on other operations like
        [Verify a Credential](#operation/verify-credential) or [Verify a
        Presentation](#operation/verifyPres).


        **Wallet Presentations**  

        The MATTR mobile wallet can create verifiable presentations from a
        single credential in a CBOR-LD format and encode this into a QR, a
        further layer of GZip compression is performed.


        **Limitations**  

        Calculating the exact size of a credential/document that can be encoded
        into a QR and safely read by a camera is not straightforward. Larger
        credentials are unlikely to work, including those with embedded images
        (photos), large nested claims, or credentials with large signatures like
        BBS, it is generally best to confirm by testing across a range of
        devices.


        Deeply nested JSON-LD structures are currently unable to be converted to
        CBOR-LD due to limitations of the library, so it is possible to see
        errors.


        We are aware that inline contexts may affect the performance for CBOR-LD
        compression. The Create Credential endpoint uses an inline `@vocab`
        context, this may change in the future.


        ### **Analytic events**

        * LINKED_DATA_CONVERT_STARTLINKED_DATA_CONVERT_START

        * LINKED_DATA_CONVERT_STARTLINKED_DATA_CONVERT_SUCCESS

        * LINKED_DATA_CONVERT_STARTLINKED_DATA_CONVERT_FAIL
      requestBody:
        description: The request document data and options
        required: true
        content:
          application/json:
            schema:
              type: object
              description: >
                Request to convert into a CBOR-LD document

                JSON-LD input encoding defaults to none, while CBOR-LD input
                encoding defaults to base64
              properties:
                options:
                  type: object
                  required:
                    - inputFormat
                    - outputFormat
                  properties:
                    inputFormat:
                      type: string
                      enum:
                        - jsonld
                        - cborld
                    outputFormat:
                      type: string
                      enum:
                        - jsonld
                        - cborld
                    outputEncoding:
                      type: string
                      description: >
                        When output format is `cborld`, the output encoding is
                        `base64`. 

                        If output format is `jsonld`, the output encoding can be
                        either `none` (object) or `base64` (string)
                      default: base64
                      enum:
                        - base64
                        - none
                data:
                  oneOf:
                    - type: string
                      description: The payload CBOR-LD or JSON-LD base64 string
                    - type: object
                      description: The payload JSON-LD object
              required:
                - options
                - data
            examples:
              Convert a JSON-LD document to CBOR-LD:
                value:
                  options:
                    inputFormat: jsonld
                    outputFormat: cborld
                    outputEncoding: base64
                  data:
                    '@context': https://optionalschema.example/
                    '@type': Person
                    name: Jane Doe
                    jobTitle: Professor
                    telephone: (425) 123-4567
                    url: http://www.janedoe.com
              Convert a CBOR-LD document to JSON-LD:
                value:
                  options:
                    inputFormat: cborld
                    outputFormat: jsonld
                    outputEncoding: none
                  data: >-
                    2QUBpgBzaHR0cHM6Ly9zY2hlbWEub3JnLwIZBz4ZEJppUHJvZmVzc29yGRGSaEphbmUgRG9lGRUobig0MjUpIDEyMy00NTY3GRWsggFvd3d3LmphbmVkb2UuY29t
      responses:
        '200':
          description: CBOR-LD/JSON-LD document is converted
          content:
            application/json:
              schema:
                type: object
                x-examples: {}
                title: ''
                properties:
                  metadata:
                    type: object
                    properties:
                      encoding:
                        type: string
                        description: the encoding applied on top of actual result
                        enum:
                          - base64
                          - none
                      format:
                        type: string
                        enum:
                          - cborld
                          - jsonld
                  data:
                    oneOf:
                      - type: string
                        description: The output CBOR-LD or JSON-LD base64 string
                      - type: object
                        description: The output JSON-LD object
              examples:
                CBOR-LD document output:
                  value:
                    metadata:
                      encoding: base64
                      format: cborld
                    data: >-
                      2QUBpgBzaHR0cHM6Ly9zY2hlbWEub3JnLwIZBz4ZEJppUHJvZmVzc29yGRGSaEphbmUgRG9lGRUobig0MjUpIDEyMy00NTY3GRWsggFvd3d3LmphbmVkb2UuY29t
                JSON-LD document output:
                  value:
                    metadata:
                      encoding: none
                      format: jsonld
                    data:
                      '@context': https://optionalschema.example/
                      '@type': Person
                      jobTitle: Professor
                      name: Jane Doe
                      telephone: (425) 123-4567
                      url: http://www.janedoe.com
        '400':
          description: Bad request, Invalid request body
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
    parameters: []
  /core/v2/credentials/web-semantic/configurations:
    post:
      operationId: createWebSemanticCredentialConfiguration
      tags:
        - Web Credentials Configuration
      summary: Create a Web Credential configuration
      description: >
        Creates a new Web Credential configuration, a specific set of rules and
        parameters that are used to create and validate a particular type of
        verifiable credential. These rules and parameters define how the
        credential is structured and what data it contains when issued.


        ### **Analytic events**

        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_CREATE_START

        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_CREATE_SUCCESS

        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_CREATE_FAIL
      requestBody:
        description: The Credential Configuration payload
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - type
                - issuer
              allOf:
                - type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                      maxLength: 1024
                      description: >-
                        Insert a meaningful name for the credential. This string
                        is displayed on the top part of the credential in the
                        holder's digital wallet. It is recommended to limit this
                        value to 18 characters as any additional characters are
                        not displayed on the credential.
                      example: Course credential
                    description:
                      type: string
                      maxLength: 1024
                      description: >-
                        Insert a meaningful description for the credential. This
                        string is displayed below the name field on the
                        credential in the holder's digital wallet. It is
                        recommended to limist this value to 38 characters as any
                        additional characters are not displayed on the
                        credential.
                      example: >-
                        This credential shows that the person has attended a
                        course.
                    type:
                      description: >-
                        Used to differentiate between different Web credential
                        configurations on your tenant. Thus, its value must:

                        - Be unique across all Web credential configurations on
                        your tenant.

                        - Not be `VerifiableCredential`.
                      type: string
                      minLength: 1
                      maxLength: 1024
                      example: CourseCredential
                    additionalTypes:
                      description: >-
                        Additional credential types that can be referenced. Each
                        entry must be 1-1024 characters long, with no
                        whitespaces allowed.
                      type: array
                      example:
                        - AlumniCredential
                        - EducationCredential
                      items:
                        type: string
                        maxLength: 1024
                    contexts:
                      type: array
                      description: >-
                        Additional JSON-LD contexts to be included in the
                        credential. As part of the credential issuance MATTR VII
                        will auto-inject the following contexts, which reference
                        the W3C Verifiable Credential definitions:

                        - https://www.w3.org/2018/credentials/v1

                        - https://mattr.global/contexts/vc-extensions/v2

                        - https://w3id.org/vc-revocation-list-2020/v1

                        If you require introducing a different context for your
                        production implementation, please [contact
                        us](https://mattr.global/contact). Referenced contexts
                        must be whitelisted or credential issuance will fail.
                      example:
                        - https://optionalschema.example/
                      items:
                        type: string
                        description: Must be an HTTPS URL.
                    issuer:
                      type: object
                      description: >-
                        Issuer details and branding for issued credentials.
                        Refer to this
                        [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                        learn more about branding best practices.
                      required:
                        - name
                      properties:
                        name:
                          type: string
                          description: >-
                            Insert a meaningful name to indicate the issuer.
                            This string is used when the credential is offered
                            to the holder. It is also used on the bottom part of
                            the credential when `logoURL` is not provided.
                          example: ABC University
                        logoUrl:
                          type: string
                          description: >-
                            Insert a URL for a logo that is displayed on the
                            bottom part of the credential. If no logo is
                            provided, the issuer's `name` and `iconURL` are used
                            instead. The logo must meet the following criteria:

                            - URL must be publicly available.

                            - Must be 140x42 px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended. Raster images, whilst
                            supported, are currently displayed at 1x resolution
                            and may look pixelated on some devices.

                            - Transparencies are allowed for **svg** or **png**
                            images.

                            - If no logo is provided, the first letter of the
                            issuer name is displayed instead.

                            - The recommended maximum size is 50 KB.
                          example: https://example.edu/img/logo.png
                        iconUrl:
                          type: string
                          example: https://example.edu/img/icon.png
                          description: >-
                            Insert a URL for an icon that is displayed next to
                            the issuer's name when the credential is offered to
                            the holder. It is also displayed next to the
                            issuer's name on the bottom part of the credential
                            when `logoURL` is not provided. When `iconURL` is
                            not provided, the first letter from `name` is used
                            instead. The icon must meet the following criteria:

                            - URL must be publicly available.

                            - Must be 32x32 px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended. Raster images, whilst
                            supported, are currently displayed at 1x resolution
                            and may look pixelated on some devices.

                            - Transparencies are allowed for svg or png images.

                            - The recommended maximum size is 15 KB.
                    proofType:
                      description: >-
                        This is an _optional_ field which defines the
                        cryptographic algorithm used to sign the credential. The
                        credential Issuer's DID must contain a key that supports
                        the corresponding signing capability. If no `proofType`
                        is provided, the credential will be signed using the key
                        that is available in the Issuer's DID:

                        - If a `Bls12381G2` key is available, the credential
                        will be signed with a `BbsSignature2022` proof.
                        Credentials signed with this proof type support
                        [selective
                        disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                        - If a `Bls12381G2` key is unavailable and a `Ed25519`
                        key is available, the credential will be signed with a
                        `Ed25519Signature2018` proof. Credentials signed with
                        this proof type do not support [selective
                        disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                        - If none of the two suitable keys are available, the
                        request will be rejected and the credential will not be
                        created.
                      type: string
                      enum:
                        - Ed25519Signature2018
                        - BbsSignature2022
                      example: Ed25519Signature2018
                    credentialBranding:
                      type: object
                      description: >-
                        Additional branding that will be applied to issued
                        credentials. Refer to this
                        [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                        learn more about branding best practices.
                      properties:
                        backgroundColor:
                          type: string
                          example: '#B00AA0'
                          description: >-
                            Insert a colour hex code to use for the credential
                            background color in the holder's digital wallet.
                        watermarkImageUrl:
                          type: string
                          example: https://example.edu/img/watermark.png
                          description: >-
                            Insert a URL for a watermark image to be included as
                            a pattern on the credential in the holder's digital
                            wallet:

                            - URL must be publicly available.

                            - Must be 245x150px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended.

                            - If no watermark image is provided, a wave pattern
                            is applied to the credentials by default.

                            - The recommended maximum size is 150 KB.
                    claimMappings:
                      type: object
                      description: >
                        This is where you specify how to map claims (user
                        attributes) into issued credentials. Each field in the
                        object corresponds to a claim in the issued credential,
                        and contains one or more from the following attributes:

                        - `mapFrom`: References the path in the user object
                        where the claim is available.
                          - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                          - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                        - `defaultValue`: Indicates what value is used if
                        required is set to `false` (field is optional) and no
                        value is provided by the claims source. When
                        `defaultValue` is provided, `mapFrom` is optional.

                        - `required`: Indicates whether the claim is required
                        (default: `false`). When a required claim cannot be
                        retrieved and no `defaultValue` is available, credential
                        issuance will fail.

                        **Example source context object**

                        ```json

                        {
                          "claims": {
                            "given_name": "Jamie",
                            "family_name": "Doe",
                            "address": {
                              "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                            }
                          },
                          "authenticationProvider": {
                            "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                            "url": "https://accounts.google.com"
                          }
                        }

                        ```
                      example:
                        firstName:
                          mapFrom: claims.given_name
                          required: true
                        address:
                          mapFrom: claims.address.formatted
                        picture:
                          mapFrom: claims.picture
                          defaultValue: http://example.edu/img/placeholder.png
                        badge:
                          defaultValue: http://example.edu/img/badge.png
                        providerSubjectId:
                          mapFrom: authenticationProvider.subjectId
                      additionalProperties:
                        type: object
                        properties:
                          mapFrom:
                            type: string
                            description: >-
                              The path of the property in the source context
                              object.
                          required:
                            type: boolean
                            description: >-
                              Indicates whether value of the property must be
                              resolvable. If set to true and does not map to a
                              value, issuance will fail.
                          defaultValue:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                              - type: array
                              - type: object
                            description: >-
                              Default value to be used when unable to resolve
                              from the supplied context object. Required when
                              `mapFrom` is not defined.
                    persist:
                      type: boolean
                      default: false
                      description: >-
                        When set to `true`, both the issued credential and its
                        metadata are stored in the [credential
                        registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                        When set to `false` (default) only the following
                        metadata is stored:

                        - `id`

                        - `tag`

                        - `credentialStatus`

                        - `issuanceDate`
                    revocable:
                      type: boolean
                      default: true
                      description: >-
                        When set to `true` (default), the created credential can
                        later be revoked. When set to `false`, the credential
                        cannot be revoked. When set to `true`,
                        `https://w3id.org/vc-revocation-list-2020/v1` is
                        injected into the credential `@context` object when it
                        is issued. This references the JSON-LD definition of the
                        `credentialStatus` object used to manage revocation
                        status.
                    includeId:
                      type: boolean
                      description: >-
                        When set to `true`, the signed credential identifier is
                        included in both the `credential` object and the
                        credential metadata. When set to `false` it is only
                        included in the credential metadata.
                      default: false
                      example: true
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of `years`, `months`,
                        `weeks`, `days`, `hours`, `minutes` and `seconds`.
                      properties:
                        years:
                          type: number
                        months:
                          type: number
                          example: 3
                        weeks:
                          type: number
                        days:
                          type: number
                        hours:
                          type: number
                        minutes:
                          type: number
                        seconds:
                          type: number
              title: CreateCredentialConfigurationRequest
      responses:
        '201':
          description: Web Credential configuration created
          content:
            application/json:
              schema:
                required:
                  - id
                  - name
                  - type
                  - issuer
                  - persist
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Credential Configuration ID
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 1024
                        description: >-
                          Insert a meaningful name for the credential. This
                          string is displayed on the top part of the credential
                          in the holder's digital wallet. It is recommended to
                          limit this value to 18 characters as any additional
                          characters are not displayed on the credential.
                        example: Course credential
                      description:
                        type: string
                        maxLength: 1024
                        description: >-
                          Insert a meaningful description for the credential.
                          This string is displayed below the name field on the
                          credential in the holder's digital wallet. It is
                          recommended to limist this value to 38 characters as
                          any additional characters are not displayed on the
                          credential.
                        example: >-
                          This credential shows that the person has attended a
                          course.
                      type:
                        description: >-
                          Used to differentiate between different Web credential
                          configurations on your tenant. Thus, its value must:

                          - Be unique across all Web credential configurations
                          on your tenant.

                          - Not be `VerifiableCredential`.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      additionalTypes:
                        description: >-
                          Additional credential types that can be referenced.
                          Each entry must be 1-1024 characters long, with no
                          whitespaces allowed.
                        type: array
                        example:
                          - AlumniCredential
                          - EducationCredential
                        items:
                          type: string
                          maxLength: 1024
                      contexts:
                        type: array
                        description: >-
                          Additional JSON-LD contexts to be included in the
                          credential. As part of the credential issuance MATTR
                          VII will auto-inject the following contexts, which
                          reference the W3C Verifiable Credential definitions:

                          - https://www.w3.org/2018/credentials/v1

                          - https://mattr.global/contexts/vc-extensions/v2

                          - https://w3id.org/vc-revocation-list-2020/v1

                          If you require introducing a different context for
                          your production implementation, please [contact
                          us](https://mattr.global/contact). Referenced contexts
                          must be whitelisted or credential issuance will fail.
                        example:
                          - https://optionalschema.example/
                        items:
                          type: string
                          description: Must be an HTTPS URL.
                      issuer:
                        type: object
                        description: >-
                          Issuer details and branding for issued credentials.
                          Refer to this
                          [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                          to learn more about branding best practices.
                        required:
                          - name
                        properties:
                          name:
                            type: string
                            description: >-
                              Insert a meaningful name to indicate the issuer.
                              This string is used when the credential is offered
                              to the holder. It is also used on the bottom part
                              of the credential when `logoURL` is not provided.
                            example: ABC University
                          logoUrl:
                            type: string
                            description: >-
                              Insert a URL for a logo that is displayed on the
                              bottom part of the credential. If no logo is
                              provided, the issuer's `name` and `iconURL` are
                              used instead. The logo must meet the following
                              criteria:

                              - URL must be publicly available.

                              - Must be 140x42 px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended. Raster
                              images, whilst supported, are currently displayed
                              at 1x resolution and may look pixelated on some
                              devices.

                              - Transparencies are allowed for **svg** or
                              **png** images.

                              - If no logo is provided, the first letter of the
                              issuer name is displayed instead.

                              - The recommended maximum size is 50 KB.
                            example: https://example.edu/img/logo.png
                          iconUrl:
                            type: string
                            example: https://example.edu/img/icon.png
                            description: >-
                              Insert a URL for an icon that is displayed next to
                              the issuer's name when the credential is offered
                              to the holder. It is also displayed next to the
                              issuer's name on the bottom part of the credential
                              when `logoURL` is not provided. When `iconURL` is
                              not provided, the first letter from `name` is used
                              instead. The icon must meet the following
                              criteria:

                              - URL must be publicly available.

                              - Must be 32x32 px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended. Raster
                              images, whilst supported, are currently displayed
                              at 1x resolution and may look pixelated on some
                              devices.

                              - Transparencies are allowed for svg or png
                              images.

                              - The recommended maximum size is 15 KB.
                      proofType:
                        description: >-
                          This is an _optional_ field which defines the
                          cryptographic algorithm used to sign the credential.
                          The credential Issuer's DID must contain a key that
                          supports the corresponding signing capability. If no
                          `proofType` is provided, the credential will be signed
                          using the key that is available in the Issuer's DID:

                          - If a `Bls12381G2` key is available, the credential
                          will be signed with a `BbsSignature2022` proof.
                          Credentials signed with this proof type support
                          [selective
                          disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                          - If a `Bls12381G2` key is unavailable and a `Ed25519`
                          key is available, the credential will be signed with a
                          `Ed25519Signature2018` proof. Credentials signed with
                          this proof type do not support [selective
                          disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                          - If none of the two suitable keys are available, the
                          request will be rejected and the credential will not
                          be created.
                        type: string
                        enum:
                          - Ed25519Signature2018
                          - BbsSignature2022
                        example: Ed25519Signature2018
                      credentialBranding:
                        type: object
                        description: >-
                          Additional branding that will be applied to issued
                          credentials. Refer to this
                          [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                          to learn more about branding best practices.
                        properties:
                          backgroundColor:
                            type: string
                            example: '#B00AA0'
                            description: >-
                              Insert a colour hex code to use for the credential
                              background color in the holder's digital wallet.
                          watermarkImageUrl:
                            type: string
                            example: https://example.edu/img/watermark.png
                            description: >-
                              Insert a URL for a watermark image to be included
                              as a pattern on the credential in the holder's
                              digital wallet:

                              - URL must be publicly available.

                              - Must be 245x150px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended.

                              - If no watermark image is provided, a wave
                              pattern is applied to the credentials by default.

                              - The recommended maximum size is 150 KB.
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      persist:
                        type: boolean
                        default: false
                        description: >-
                          When set to `true`, both the issued credential and its
                          metadata are stored in the [credential
                          registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                          When set to `false` (default) only the following
                          metadata is stored:

                          - `id`

                          - `tag`

                          - `credentialStatus`

                          - `issuanceDate`
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to `true` (default), the created credential
                          can later be revoked. When set to `false`, the
                          credential cannot be revoked. When set to `true`,
                          `https://w3id.org/vc-revocation-list-2020/v1` is
                          injected into the credential `@context` object when it
                          is issued. This references the JSON-LD definition of
                          the `credentialStatus` object used to manage
                          revocation status.
                      includeId:
                        type: boolean
                        description: >-
                          When set to `true`, the signed credential identifier
                          is included in both the `credential` object and the
                          credential metadata. When set to `false` it is only
                          included in the credential metadata.
                        default: false
                        example: true
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                          months:
                            type: number
                            example: 3
                          weeks:
                            type: number
                          days:
                            type: number
                          hours:
                            type: number
                          minutes:
                            type: number
                          seconds:
                            type: number
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
    get:
      operationId: getWebSemanticCredentialConfigurations
      tags:
        - Web Credentials Configuration
      summary: Retrieve all Web Credential configurations
      description: |
        Returns a list of all Web Credential Configurations on your tenant.

        ### **Analytic events**
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_START
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_SUCCESS
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of entries
        - schema:
            type: string
            example: AlumniCredential
          in: query
          name: type
          description: The optional credential type to filter on
      responses:
        '200':
          description: Web Credential configurations retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    type: array
                    items:
                      required:
                        - id
                        - name
                        - type
                        - issuer
                        - persist
                        - revocable
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              description: Credential Configuration ID
                              example: 983c0a86-204f-4431-9371-f5a22e506599
                        - type: object
                          properties:
                            name:
                              type: string
                              minLength: 1
                              maxLength: 1024
                              description: >-
                                Insert a meaningful name for the credential.
                                This string is displayed on the top part of the
                                credential in the holder's digital wallet. It is
                                recommended to limit this value to 18 characters
                                as any additional characters are not displayed
                                on the credential.
                              example: Course credential
                            description:
                              type: string
                              maxLength: 1024
                              description: >-
                                Insert a meaningful description for the
                                credential. This string is displayed below the
                                name field on the credential in the holder's
                                digital wallet. It is recommended to limist this
                                value to 38 characters as any additional
                                characters are not displayed on the credential.
                              example: >-
                                This credential shows that the person has
                                attended a course.
                            type:
                              description: >-
                                Used to differentiate between different Web
                                credential configurations on your tenant. Thus,
                                its value must:

                                - Be unique across all Web credential
                                configurations on your tenant.

                                - Not be `VerifiableCredential`.
                              type: string
                              minLength: 1
                              maxLength: 1024
                              example: CourseCredential
                            additionalTypes:
                              description: >-
                                Additional credential types that can be
                                referenced. Each entry must be 1-1024 characters
                                long, with no whitespaces allowed.
                              type: array
                              example:
                                - AlumniCredential
                                - EducationCredential
                              items:
                                type: string
                                maxLength: 1024
                            contexts:
                              type: array
                              description: >-
                                Additional JSON-LD contexts to be included in
                                the credential. As part of the credential
                                issuance MATTR VII will auto-inject the
                                following contexts, which reference the W3C
                                Verifiable Credential definitions:

                                - https://www.w3.org/2018/credentials/v1

                                - https://mattr.global/contexts/vc-extensions/v2

                                - https://w3id.org/vc-revocation-list-2020/v1

                                If you require introducing a different context
                                for your production implementation, please
                                [contact us](https://mattr.global/contact).
                                Referenced contexts must be whitelisted or
                                credential issuance will fail.
                              example:
                                - https://optionalschema.example/
                              items:
                                type: string
                                description: Must be an HTTPS URL.
                            issuer:
                              type: object
                              description: >-
                                Issuer details and branding for issued
                                credentials. Refer to this
                                [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                                to learn more about branding best practices.
                              required:
                                - name
                              properties:
                                name:
                                  type: string
                                  description: >-
                                    Insert a meaningful name to indicate the
                                    issuer. This string is used when the
                                    credential is offered to the holder. It is
                                    also used on the bottom part of the
                                    credential when `logoURL` is not provided.
                                  example: ABC University
                                logoUrl:
                                  type: string
                                  description: >-
                                    Insert a URL for a logo that is displayed on
                                    the bottom part of the credential. If no
                                    logo is provided, the issuer's `name` and
                                    `iconURL` are used instead. The logo must
                                    meet the following criteria:

                                    - URL must be publicly available.

                                    - Must be 140x42 px in size.

                                    - **svg**, **png** and **jpg** files are
                                    supported, but **svg** is recommended.
                                    Raster images, whilst supported, are
                                    currently displayed at 1x resolution and may
                                    look pixelated on some devices.

                                    - Transparencies are allowed for **svg** or
                                    **png** images.

                                    - If no logo is provided, the first letter
                                    of the issuer name is displayed instead.

                                    - The recommended maximum size is 50 KB.
                                  example: https://example.edu/img/logo.png
                                iconUrl:
                                  type: string
                                  example: https://example.edu/img/icon.png
                                  description: >-
                                    Insert a URL for an icon that is displayed
                                    next to the issuer's name when the
                                    credential is offered to the holder. It is
                                    also displayed next to the issuer's name on
                                    the bottom part of the credential when
                                    `logoURL` is not provided. When `iconURL` is
                                    not provided, the first letter from `name`
                                    is used instead. The icon must meet the
                                    following criteria:

                                    - URL must be publicly available.

                                    - Must be 32x32 px in size.

                                    - **svg**, **png** and **jpg** files are
                                    supported, but **svg** is recommended.
                                    Raster images, whilst supported, are
                                    currently displayed at 1x resolution and may
                                    look pixelated on some devices.

                                    - Transparencies are allowed for svg or png
                                    images.

                                    - The recommended maximum size is 15 KB.
                            proofType:
                              description: >-
                                This is an _optional_ field which defines the
                                cryptographic algorithm used to sign the
                                credential. The credential Issuer's DID must
                                contain a key that supports the corresponding
                                signing capability. If no `proofType` is
                                provided, the credential will be signed using
                                the key that is available in the Issuer's DID:

                                - If a `Bls12381G2` key is available, the
                                credential will be signed with a
                                `BbsSignature2022` proof. Credentials signed
                                with this proof type support [selective
                                disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                                - If a `Bls12381G2` key is unavailable and a
                                `Ed25519` key is available, the credential will
                                be signed with a `Ed25519Signature2018` proof.
                                Credentials signed with this proof type do not
                                support [selective
                                disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                                - If none of the two suitable keys are
                                available, the request will be rejected and the
                                credential will not be created.
                              type: string
                              enum:
                                - Ed25519Signature2018
                                - BbsSignature2022
                              example: Ed25519Signature2018
                            credentialBranding:
                              type: object
                              description: >-
                                Additional branding that will be applied to
                                issued credentials. Refer to this
                                [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                                to learn more about branding best practices.
                              properties:
                                backgroundColor:
                                  type: string
                                  example: '#B00AA0'
                                  description: >-
                                    Insert a colour hex code to use for the
                                    credential background color in the holder's
                                    digital wallet.
                                watermarkImageUrl:
                                  type: string
                                  example: https://example.edu/img/watermark.png
                                  description: >-
                                    Insert a URL for a watermark image to be
                                    included as a pattern on the credential in
                                    the holder's digital wallet:

                                    - URL must be publicly available.

                                    - Must be 245x150px in size.

                                    - **svg**, **png** and **jpg** files are
                                    supported, but **svg** is recommended.

                                    - If no watermark image is provided, a wave
                                    pattern is applied to the credentials by
                                    default.

                                    - The recommended maximum size is 150 KB.
                            claimMappings:
                              type: object
                              description: >
                                This is where you specify how to map claims
                                (user attributes) into issued credentials. Each
                                field in the object corresponds to a claim in
                                the issued credential, and contains one or more
                                from the following attributes:

                                - `mapFrom`: References the path in the user
                                object where the claim is available.
                                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                                - `defaultValue`: Indicates what value is used
                                if required is set to `false` (field is
                                optional) and no value is provided by the claims
                                source. When `defaultValue` is provided,
                                `mapFrom` is optional.

                                - `required`: Indicates whether the claim is
                                required (default: `false`). When a required
                                claim cannot be retrieved and no `defaultValue`
                                is available, credential issuance will fail.

                                **Example source context object**

                                ```json

                                {
                                  "claims": {
                                    "given_name": "Jamie",
                                    "family_name": "Doe",
                                    "address": {
                                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                                    }
                                  },
                                  "authenticationProvider": {
                                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                                    "url": "https://accounts.google.com"
                                  }
                                }

                                ```
                              example:
                                firstName:
                                  mapFrom: claims.given_name
                                  required: true
                                address:
                                  mapFrom: claims.address.formatted
                                picture:
                                  mapFrom: claims.picture
                                  defaultValue: http://example.edu/img/placeholder.png
                                badge:
                                  defaultValue: http://example.edu/img/badge.png
                                providerSubjectId:
                                  mapFrom: authenticationProvider.subjectId
                              additionalProperties:
                                type: object
                                properties:
                                  mapFrom:
                                    type: string
                                    description: >-
                                      The path of the property in the source
                                      context object.
                                  required:
                                    type: boolean
                                    description: >-
                                      Indicates whether value of the property
                                      must be resolvable. If set to true and
                                      does not map to a value, issuance will
                                      fail.
                                  defaultValue:
                                    oneOf:
                                      - type: string
                                      - type: number
                                      - type: boolean
                                      - type: array
                                      - type: object
                                    description: >-
                                      Default value to be used when unable to
                                      resolve from the supplied context object.
                                      Required when `mapFrom` is not defined.
                            persist:
                              type: boolean
                              default: false
                              description: >-
                                When set to `true`, both the issued credential
                                and its metadata are stored in the [credential
                                registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                                When set to `false` (default) only the following
                                metadata is stored:

                                - `id`

                                - `tag`

                                - `credentialStatus`

                                - `issuanceDate`
                            revocable:
                              type: boolean
                              default: true
                              description: >-
                                When set to `true` (default), the created
                                credential can later be revoked. When set to
                                `false`, the credential cannot be revoked. When
                                set to `true`,
                                `https://w3id.org/vc-revocation-list-2020/v1` is
                                injected into the credential `@context` object
                                when it is issued. This references the JSON-LD
                                definition of the `credentialStatus` object used
                                to manage revocation status.
                            includeId:
                              type: boolean
                              description: >-
                                When set to `true`, the signed credential
                                identifier is included in both the `credential`
                                object and the credential metadata. When set to
                                `false` it is only included in the credential
                                metadata.
                              default: false
                              example: true
                            claimSourceId:
                              type: string
                              format: uuid
                              description: >-
                                References the unique identifier of a claims
                                source that can be used to retrieve claims and
                                include them in the issued credential.
                            expiresIn:
                              type: object
                              description: >-
                                Used to determine when will issued credentials
                                expire. Can include any combination of `years`,
                                `months`, `weeks`, `days`, `hours`, `minutes`
                                and `seconds`.
                              properties:
                                years:
                                  type: number
                                months:
                                  type: number
                                  example: 3
                                weeks:
                                  type: number
                                days:
                                  type: number
                                hours:
                                  type: number
                                minutes:
                                  type: number
                                seconds:
                                  type: number
                      title: CredentialConfigurationResponse
                title: GetCredentialConfigurationsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Invalid value
                        param: cursor
                        value: abc
    parameters: []
  /core/v2/credentials/web-semantic/configurations/{id}:
    parameters:
      - name: id
        in: path
        description: Web Credential configuration unique identifier
        schema:
          type: string
          format: uuid
          example: 3948c40e-6e19-4ffc-933c-91f643f24264
        required: true
    get:
      operationId: getWebSemanticCredentialConfiguration
      tags:
        - Web Credentials Configuration
      summary: Retrieve a Web Credential configuration
      description: |-
        Retrieve a Web Credential configuration by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_START
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_SUCCESS
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_RETRIEVE_FAIL
      responses:
        '200':
          description: Web Credential configuration retrieved
          content:
            application/json:
              schema:
                required:
                  - id
                  - name
                  - type
                  - issuer
                  - persist
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Credential Configuration ID
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 1024
                        description: >-
                          Insert a meaningful name for the credential. This
                          string is displayed on the top part of the credential
                          in the holder's digital wallet. It is recommended to
                          limit this value to 18 characters as any additional
                          characters are not displayed on the credential.
                        example: Course credential
                      description:
                        type: string
                        maxLength: 1024
                        description: >-
                          Insert a meaningful description for the credential.
                          This string is displayed below the name field on the
                          credential in the holder's digital wallet. It is
                          recommended to limist this value to 38 characters as
                          any additional characters are not displayed on the
                          credential.
                        example: >-
                          This credential shows that the person has attended a
                          course.
                      type:
                        description: >-
                          Used to differentiate between different Web credential
                          configurations on your tenant. Thus, its value must:

                          - Be unique across all Web credential configurations
                          on your tenant.

                          - Not be `VerifiableCredential`.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      additionalTypes:
                        description: >-
                          Additional credential types that can be referenced.
                          Each entry must be 1-1024 characters long, with no
                          whitespaces allowed.
                        type: array
                        example:
                          - AlumniCredential
                          - EducationCredential
                        items:
                          type: string
                          maxLength: 1024
                      contexts:
                        type: array
                        description: >-
                          Additional JSON-LD contexts to be included in the
                          credential. As part of the credential issuance MATTR
                          VII will auto-inject the following contexts, which
                          reference the W3C Verifiable Credential definitions:

                          - https://www.w3.org/2018/credentials/v1

                          - https://mattr.global/contexts/vc-extensions/v2

                          - https://w3id.org/vc-revocation-list-2020/v1

                          If you require introducing a different context for
                          your production implementation, please [contact
                          us](https://mattr.global/contact). Referenced contexts
                          must be whitelisted or credential issuance will fail.
                        example:
                          - https://optionalschema.example/
                        items:
                          type: string
                          description: Must be an HTTPS URL.
                      issuer:
                        type: object
                        description: >-
                          Issuer details and branding for issued credentials.
                          Refer to this
                          [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                          to learn more about branding best practices.
                        required:
                          - name
                        properties:
                          name:
                            type: string
                            description: >-
                              Insert a meaningful name to indicate the issuer.
                              This string is used when the credential is offered
                              to the holder. It is also used on the bottom part
                              of the credential when `logoURL` is not provided.
                            example: ABC University
                          logoUrl:
                            type: string
                            description: >-
                              Insert a URL for a logo that is displayed on the
                              bottom part of the credential. If no logo is
                              provided, the issuer's `name` and `iconURL` are
                              used instead. The logo must meet the following
                              criteria:

                              - URL must be publicly available.

                              - Must be 140x42 px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended. Raster
                              images, whilst supported, are currently displayed
                              at 1x resolution and may look pixelated on some
                              devices.

                              - Transparencies are allowed for **svg** or
                              **png** images.

                              - If no logo is provided, the first letter of the
                              issuer name is displayed instead.

                              - The recommended maximum size is 50 KB.
                            example: https://example.edu/img/logo.png
                          iconUrl:
                            type: string
                            example: https://example.edu/img/icon.png
                            description: >-
                              Insert a URL for an icon that is displayed next to
                              the issuer's name when the credential is offered
                              to the holder. It is also displayed next to the
                              issuer's name on the bottom part of the credential
                              when `logoURL` is not provided. When `iconURL` is
                              not provided, the first letter from `name` is used
                              instead. The icon must meet the following
                              criteria:

                              - URL must be publicly available.

                              - Must be 32x32 px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended. Raster
                              images, whilst supported, are currently displayed
                              at 1x resolution and may look pixelated on some
                              devices.

                              - Transparencies are allowed for svg or png
                              images.

                              - The recommended maximum size is 15 KB.
                      proofType:
                        description: >-
                          This is an _optional_ field which defines the
                          cryptographic algorithm used to sign the credential.
                          The credential Issuer's DID must contain a key that
                          supports the corresponding signing capability. If no
                          `proofType` is provided, the credential will be signed
                          using the key that is available in the Issuer's DID:

                          - If a `Bls12381G2` key is available, the credential
                          will be signed with a `BbsSignature2022` proof.
                          Credentials signed with this proof type support
                          [selective
                          disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                          - If a `Bls12381G2` key is unavailable and a `Ed25519`
                          key is available, the credential will be signed with a
                          `Ed25519Signature2018` proof. Credentials signed with
                          this proof type do not support [selective
                          disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                          - If none of the two suitable keys are available, the
                          request will be rejected and the credential will not
                          be created.
                        type: string
                        enum:
                          - Ed25519Signature2018
                          - BbsSignature2022
                        example: Ed25519Signature2018
                      credentialBranding:
                        type: object
                        description: >-
                          Additional branding that will be applied to issued
                          credentials. Refer to this
                          [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                          to learn more about branding best practices.
                        properties:
                          backgroundColor:
                            type: string
                            example: '#B00AA0'
                            description: >-
                              Insert a colour hex code to use for the credential
                              background color in the holder's digital wallet.
                          watermarkImageUrl:
                            type: string
                            example: https://example.edu/img/watermark.png
                            description: >-
                              Insert a URL for a watermark image to be included
                              as a pattern on the credential in the holder's
                              digital wallet:

                              - URL must be publicly available.

                              - Must be 245x150px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended.

                              - If no watermark image is provided, a wave
                              pattern is applied to the credentials by default.

                              - The recommended maximum size is 150 KB.
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      persist:
                        type: boolean
                        default: false
                        description: >-
                          When set to `true`, both the issued credential and its
                          metadata are stored in the [credential
                          registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                          When set to `false` (default) only the following
                          metadata is stored:

                          - `id`

                          - `tag`

                          - `credentialStatus`

                          - `issuanceDate`
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to `true` (default), the created credential
                          can later be revoked. When set to `false`, the
                          credential cannot be revoked. When set to `true`,
                          `https://w3id.org/vc-revocation-list-2020/v1` is
                          injected into the credential `@context` object when it
                          is issued. This references the JSON-LD definition of
                          the `credentialStatus` object used to manage
                          revocation status.
                      includeId:
                        type: boolean
                        description: >-
                          When set to `true`, the signed credential identifier
                          is included in both the `credential` object and the
                          credential metadata. When set to `false` it is only
                          included in the credential metadata.
                        default: false
                        example: true
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                          months:
                            type: number
                            example: 3
                          weeks:
                            type: number
                          days:
                            type: number
                          hours:
                            type: number
                          minutes:
                            type: number
                          seconds:
                            type: number
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: The Credential Configuration is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    put:
      operationId: updateWebSemanticCredentialConfiguration
      tags:
        - Web Credentials Configuration
      summary: Update a Web Credential configuration
      description: |
        Updates an existing Web Credential configuration by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_UPDATE_START
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_UPDATE_SUCCESS
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - type
                - issuer
              allOf:
                - type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                      maxLength: 1024
                      description: >-
                        Insert a meaningful name for the credential. This string
                        is displayed on the top part of the credential in the
                        holder's digital wallet. It is recommended to limit this
                        value to 18 characters as any additional characters are
                        not displayed on the credential.
                      example: Course credential
                    description:
                      type: string
                      maxLength: 1024
                      description: >-
                        Insert a meaningful description for the credential. This
                        string is displayed below the name field on the
                        credential in the holder's digital wallet. It is
                        recommended to limist this value to 38 characters as any
                        additional characters are not displayed on the
                        credential.
                      example: >-
                        This credential shows that the person has attended a
                        course.
                    type:
                      description: >-
                        Used to differentiate between different Web credential
                        configurations on your tenant. Thus, its value must:

                        - Be unique across all Web credential configurations on
                        your tenant.

                        - Not be `VerifiableCredential`.
                      type: string
                      minLength: 1
                      maxLength: 1024
                      example: CourseCredential
                    additionalTypes:
                      description: >-
                        Additional credential types that can be referenced. Each
                        entry must be 1-1024 characters long, with no
                        whitespaces allowed.
                      type: array
                      example:
                        - AlumniCredential
                        - EducationCredential
                      items:
                        type: string
                        maxLength: 1024
                    contexts:
                      type: array
                      description: >-
                        Additional JSON-LD contexts to be included in the
                        credential. As part of the credential issuance MATTR VII
                        will auto-inject the following contexts, which reference
                        the W3C Verifiable Credential definitions:

                        - https://www.w3.org/2018/credentials/v1

                        - https://mattr.global/contexts/vc-extensions/v2

                        - https://w3id.org/vc-revocation-list-2020/v1

                        If you require introducing a different context for your
                        production implementation, please [contact
                        us](https://mattr.global/contact). Referenced contexts
                        must be whitelisted or credential issuance will fail.
                      example:
                        - https://optionalschema.example/
                      items:
                        type: string
                        description: Must be an HTTPS URL.
                    issuer:
                      type: object
                      description: >-
                        Issuer details and branding for issued credentials.
                        Refer to this
                        [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                        learn more about branding best practices.
                      required:
                        - name
                      properties:
                        name:
                          type: string
                          description: >-
                            Insert a meaningful name to indicate the issuer.
                            This string is used when the credential is offered
                            to the holder. It is also used on the bottom part of
                            the credential when `logoURL` is not provided.
                          example: ABC University
                        logoUrl:
                          type: string
                          description: >-
                            Insert a URL for a logo that is displayed on the
                            bottom part of the credential. If no logo is
                            provided, the issuer's `name` and `iconURL` are used
                            instead. The logo must meet the following criteria:

                            - URL must be publicly available.

                            - Must be 140x42 px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended. Raster images, whilst
                            supported, are currently displayed at 1x resolution
                            and may look pixelated on some devices.

                            - Transparencies are allowed for **svg** or **png**
                            images.

                            - If no logo is provided, the first letter of the
                            issuer name is displayed instead.

                            - The recommended maximum size is 50 KB.
                          example: https://example.edu/img/logo.png
                        iconUrl:
                          type: string
                          example: https://example.edu/img/icon.png
                          description: >-
                            Insert a URL for an icon that is displayed next to
                            the issuer's name when the credential is offered to
                            the holder. It is also displayed next to the
                            issuer's name on the bottom part of the credential
                            when `logoURL` is not provided. When `iconURL` is
                            not provided, the first letter from `name` is used
                            instead. The icon must meet the following criteria:

                            - URL must be publicly available.

                            - Must be 32x32 px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended. Raster images, whilst
                            supported, are currently displayed at 1x resolution
                            and may look pixelated on some devices.

                            - Transparencies are allowed for svg or png images.

                            - The recommended maximum size is 15 KB.
                    proofType:
                      description: >-
                        This is an _optional_ field which defines the
                        cryptographic algorithm used to sign the credential. The
                        credential Issuer's DID must contain a key that supports
                        the corresponding signing capability. If no `proofType`
                        is provided, the credential will be signed using the key
                        that is available in the Issuer's DID:

                        - If a `Bls12381G2` key is available, the credential
                        will be signed with a `BbsSignature2022` proof.
                        Credentials signed with this proof type support
                        [selective
                        disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                        - If a `Bls12381G2` key is unavailable and a `Ed25519`
                        key is available, the credential will be signed with a
                        `Ed25519Signature2018` proof. Credentials signed with
                        this proof type do not support [selective
                        disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                        - If none of the two suitable keys are available, the
                        request will be rejected and the credential will not be
                        created.
                      type: string
                      enum:
                        - Ed25519Signature2018
                        - BbsSignature2022
                      example: Ed25519Signature2018
                    credentialBranding:
                      type: object
                      description: >-
                        Additional branding that will be applied to issued
                        credentials. Refer to this
                        [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                        learn more about branding best practices.
                      properties:
                        backgroundColor:
                          type: string
                          example: '#B00AA0'
                          description: >-
                            Insert a colour hex code to use for the credential
                            background color in the holder's digital wallet.
                        watermarkImageUrl:
                          type: string
                          example: https://example.edu/img/watermark.png
                          description: >-
                            Insert a URL for a watermark image to be included as
                            a pattern on the credential in the holder's digital
                            wallet:

                            - URL must be publicly available.

                            - Must be 245x150px in size.

                            - **svg**, **png** and **jpg** files are supported,
                            but **svg** is recommended.

                            - If no watermark image is provided, a wave pattern
                            is applied to the credentials by default.

                            - The recommended maximum size is 150 KB.
                    claimMappings:
                      type: object
                      description: >
                        This is where you specify how to map claims (user
                        attributes) into issued credentials. Each field in the
                        object corresponds to a claim in the issued credential,
                        and contains one or more from the following attributes:

                        - `mapFrom`: References the path in the user object
                        where the claim is available.
                          - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                          - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                        - `defaultValue`: Indicates what value is used if
                        required is set to `false` (field is optional) and no
                        value is provided by the claims source. When
                        `defaultValue` is provided, `mapFrom` is optional.

                        - `required`: Indicates whether the claim is required
                        (default: `false`). When a required claim cannot be
                        retrieved and no `defaultValue` is available, credential
                        issuance will fail.

                        **Example source context object**

                        ```json

                        {
                          "claims": {
                            "given_name": "Jamie",
                            "family_name": "Doe",
                            "address": {
                              "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                            }
                          },
                          "authenticationProvider": {
                            "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                            "url": "https://accounts.google.com"
                          }
                        }

                        ```
                      example:
                        firstName:
                          mapFrom: claims.given_name
                          required: true
                        address:
                          mapFrom: claims.address.formatted
                        picture:
                          mapFrom: claims.picture
                          defaultValue: http://example.edu/img/placeholder.png
                        badge:
                          defaultValue: http://example.edu/img/badge.png
                        providerSubjectId:
                          mapFrom: authenticationProvider.subjectId
                      additionalProperties:
                        type: object
                        properties:
                          mapFrom:
                            type: string
                            description: >-
                              The path of the property in the source context
                              object.
                          required:
                            type: boolean
                            description: >-
                              Indicates whether value of the property must be
                              resolvable. If set to true and does not map to a
                              value, issuance will fail.
                          defaultValue:
                            oneOf:
                              - type: string
                              - type: number
                              - type: boolean
                              - type: array
                              - type: object
                            description: >-
                              Default value to be used when unable to resolve
                              from the supplied context object. Required when
                              `mapFrom` is not defined.
                    persist:
                      type: boolean
                      default: false
                      description: >-
                        When set to `true`, both the issued credential and its
                        metadata are stored in the [credential
                        registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                        When set to `false` (default) only the following
                        metadata is stored:

                        - `id`

                        - `tag`

                        - `credentialStatus`

                        - `issuanceDate`
                    revocable:
                      type: boolean
                      default: true
                      description: >-
                        When set to `true` (default), the created credential can
                        later be revoked. When set to `false`, the credential
                        cannot be revoked. When set to `true`,
                        `https://w3id.org/vc-revocation-list-2020/v1` is
                        injected into the credential `@context` object when it
                        is issued. This references the JSON-LD definition of the
                        `credentialStatus` object used to manage revocation
                        status.
                    includeId:
                      type: boolean
                      description: >-
                        When set to `true`, the signed credential identifier is
                        included in both the `credential` object and the
                        credential metadata. When set to `false` it is only
                        included in the credential metadata.
                      default: false
                      example: true
                    claimSourceId:
                      type: string
                      format: uuid
                      description: >-
                        References the unique identifier of a claims source that
                        can be used to retrieve claims and include them in the
                        issued credential.
                    expiresIn:
                      type: object
                      description: >-
                        Used to determine when will issued credentials expire.
                        Can include any combination of `years`, `months`,
                        `weeks`, `days`, `hours`, `minutes` and `seconds`.
                      properties:
                        years:
                          type: number
                        months:
                          type: number
                          example: 3
                        weeks:
                          type: number
                        days:
                          type: number
                        hours:
                          type: number
                        minutes:
                          type: number
                        seconds:
                          type: number
              title: CreateCredentialConfigurationRequest
        description: Update a Credential Configuration
      responses:
        '200':
          description: Web Credential configuration updated
          content:
            application/json:
              schema:
                required:
                  - id
                  - name
                  - type
                  - issuer
                  - persist
                  - revocable
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Credential Configuration ID
                        example: 983c0a86-204f-4431-9371-f5a22e506599
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 1024
                        description: >-
                          Insert a meaningful name for the credential. This
                          string is displayed on the top part of the credential
                          in the holder's digital wallet. It is recommended to
                          limit this value to 18 characters as any additional
                          characters are not displayed on the credential.
                        example: Course credential
                      description:
                        type: string
                        maxLength: 1024
                        description: >-
                          Insert a meaningful description for the credential.
                          This string is displayed below the name field on the
                          credential in the holder's digital wallet. It is
                          recommended to limist this value to 38 characters as
                          any additional characters are not displayed on the
                          credential.
                        example: >-
                          This credential shows that the person has attended a
                          course.
                      type:
                        description: >-
                          Used to differentiate between different Web credential
                          configurations on your tenant. Thus, its value must:

                          - Be unique across all Web credential configurations
                          on your tenant.

                          - Not be `VerifiableCredential`.
                        type: string
                        minLength: 1
                        maxLength: 1024
                        example: CourseCredential
                      additionalTypes:
                        description: >-
                          Additional credential types that can be referenced.
                          Each entry must be 1-1024 characters long, with no
                          whitespaces allowed.
                        type: array
                        example:
                          - AlumniCredential
                          - EducationCredential
                        items:
                          type: string
                          maxLength: 1024
                      contexts:
                        type: array
                        description: >-
                          Additional JSON-LD contexts to be included in the
                          credential. As part of the credential issuance MATTR
                          VII will auto-inject the following contexts, which
                          reference the W3C Verifiable Credential definitions:

                          - https://www.w3.org/2018/credentials/v1

                          - https://mattr.global/contexts/vc-extensions/v2

                          - https://w3id.org/vc-revocation-list-2020/v1

                          If you require introducing a different context for
                          your production implementation, please [contact
                          us](https://mattr.global/contact). Referenced contexts
                          must be whitelisted or credential issuance will fail.
                        example:
                          - https://optionalschema.example/
                        items:
                          type: string
                          description: Must be an HTTPS URL.
                      issuer:
                        type: object
                        description: >-
                          Issuer details and branding for issued credentials.
                          Refer to this
                          [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                          to learn more about branding best practices.
                        required:
                          - name
                        properties:
                          name:
                            type: string
                            description: >-
                              Insert a meaningful name to indicate the issuer.
                              This string is used when the credential is offered
                              to the holder. It is also used on the bottom part
                              of the credential when `logoURL` is not provided.
                            example: ABC University
                          logoUrl:
                            type: string
                            description: >-
                              Insert a URL for a logo that is displayed on the
                              bottom part of the credential. If no logo is
                              provided, the issuer's `name` and `iconURL` are
                              used instead. The logo must meet the following
                              criteria:

                              - URL must be publicly available.

                              - Must be 140x42 px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended. Raster
                              images, whilst supported, are currently displayed
                              at 1x resolution and may look pixelated on some
                              devices.

                              - Transparencies are allowed for **svg** or
                              **png** images.

                              - If no logo is provided, the first letter of the
                              issuer name is displayed instead.

                              - The recommended maximum size is 50 KB.
                            example: https://example.edu/img/logo.png
                          iconUrl:
                            type: string
                            example: https://example.edu/img/icon.png
                            description: >-
                              Insert a URL for an icon that is displayed next to
                              the issuer's name when the credential is offered
                              to the holder. It is also displayed next to the
                              issuer's name on the bottom part of the credential
                              when `logoURL` is not provided. When `iconURL` is
                              not provided, the first letter from `name` is used
                              instead. The icon must meet the following
                              criteria:

                              - URL must be publicly available.

                              - Must be 32x32 px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended. Raster
                              images, whilst supported, are currently displayed
                              at 1x resolution and may look pixelated on some
                              devices.

                              - Transparencies are allowed for svg or png
                              images.

                              - The recommended maximum size is 15 KB.
                      proofType:
                        description: >-
                          This is an _optional_ field which defines the
                          cryptographic algorithm used to sign the credential.
                          The credential Issuer's DID must contain a key that
                          supports the corresponding signing capability. If no
                          `proofType` is provided, the credential will be signed
                          using the key that is available in the Issuer's DID:

                          - If a `Bls12381G2` key is available, the credential
                          will be signed with a `BbsSignature2022` proof.
                          Credentials signed with this proof type support
                          [selective
                          disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                          - If a `Bls12381G2` key is unavailable and a `Ed25519`
                          key is available, the credential will be signed with a
                          `Ed25519Signature2018` proof. Credentials signed with
                          this proof type do not support [selective
                          disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                          - If none of the two suitable keys are available, the
                          request will be rejected and the credential will not
                          be created.
                        type: string
                        enum:
                          - Ed25519Signature2018
                          - BbsSignature2022
                        example: Ed25519Signature2018
                      credentialBranding:
                        type: object
                        description: >-
                          Additional branding that will be applied to issued
                          credentials. Refer to this
                          [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
                          to learn more about branding best practices.
                        properties:
                          backgroundColor:
                            type: string
                            example: '#B00AA0'
                            description: >-
                              Insert a colour hex code to use for the credential
                              background color in the holder's digital wallet.
                          watermarkImageUrl:
                            type: string
                            example: https://example.edu/img/watermark.png
                            description: >-
                              Insert a URL for a watermark image to be included
                              as a pattern on the credential in the holder's
                              digital wallet:

                              - URL must be publicly available.

                              - Must be 245x150px in size.

                              - **svg**, **png** and **jpg** files are
                              supported, but **svg** is recommended.

                              - If no watermark image is provided, a wave
                              pattern is applied to the credentials by default.

                              - The recommended maximum size is 150 KB.
                      claimMappings:
                        type: object
                        description: >
                          This is where you specify how to map claims (user
                          attributes) into issued credentials. Each field in the
                          object corresponds to a claim in the issued
                          credential, and contains one or more from the
                          following attributes:

                          - `mapFrom`: References the path in the user object
                          where the claim is available.
                            - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                            - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                          - `defaultValue`: Indicates what value is used if
                          required is set to `false` (field is optional) and no
                          value is provided by the claims source. When
                          `defaultValue` is provided, `mapFrom` is optional.

                          - `required`: Indicates whether the claim is required
                          (default: `false`). When a required claim cannot be
                          retrieved and no `defaultValue` is available,
                          credential issuance will fail.

                          **Example source context object**

                          ```json

                          {
                            "claims": {
                              "given_name": "Jamie",
                              "family_name": "Doe",
                              "address": {
                                "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                              }
                            },
                            "authenticationProvider": {
                              "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                              "url": "https://accounts.google.com"
                            }
                          }

                          ```
                        example:
                          firstName:
                            mapFrom: claims.given_name
                            required: true
                          address:
                            mapFrom: claims.address.formatted
                          picture:
                            mapFrom: claims.picture
                            defaultValue: http://example.edu/img/placeholder.png
                          badge:
                            defaultValue: http://example.edu/img/badge.png
                          providerSubjectId:
                            mapFrom: authenticationProvider.subjectId
                        additionalProperties:
                          type: object
                          properties:
                            mapFrom:
                              type: string
                              description: >-
                                The path of the property in the source context
                                object.
                            required:
                              type: boolean
                              description: >-
                                Indicates whether value of the property must be
                                resolvable. If set to true and does not map to a
                                value, issuance will fail.
                            defaultValue:
                              oneOf:
                                - type: string
                                - type: number
                                - type: boolean
                                - type: array
                                - type: object
                              description: >-
                                Default value to be used when unable to resolve
                                from the supplied context object. Required when
                                `mapFrom` is not defined.
                      persist:
                        type: boolean
                        default: false
                        description: >-
                          When set to `true`, both the issued credential and its
                          metadata are stored in the [credential
                          registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                          When set to `false` (default) only the following
                          metadata is stored:

                          - `id`

                          - `tag`

                          - `credentialStatus`

                          - `issuanceDate`
                      revocable:
                        type: boolean
                        default: true
                        description: >-
                          When set to `true` (default), the created credential
                          can later be revoked. When set to `false`, the
                          credential cannot be revoked. When set to `true`,
                          `https://w3id.org/vc-revocation-list-2020/v1` is
                          injected into the credential `@context` object when it
                          is issued. This references the JSON-LD definition of
                          the `credentialStatus` object used to manage
                          revocation status.
                      includeId:
                        type: boolean
                        description: >-
                          When set to `true`, the signed credential identifier
                          is included in both the `credential` object and the
                          credential metadata. When set to `false` it is only
                          included in the credential metadata.
                        default: false
                        example: true
                      claimSourceId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique identifier of a claims source
                          that can be used to retrieve claims and include them
                          in the issued credential.
                      expiresIn:
                        type: object
                        description: >-
                          Used to determine when will issued credentials expire.
                          Can include any combination of `years`, `months`,
                          `weeks`, `days`, `hours`, `minutes` and `seconds`.
                        properties:
                          years:
                            type: number
                          months:
                            type: number
                            example: 3
                          weeks:
                            type: number
                          days:
                            type: number
                          hours:
                            type: number
                          minutes:
                            type: number
                          seconds:
                            type: number
                title: CredentialConfigurationResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: must be a string
                        param: type
        '404':
          description: The Credential Configuration is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
    delete:
      operationId: deleteWebSemanticCredentialConfiguration
      tags:
        - Web Credentials Configuration
      summary: Delete a Web Credential configuration
      description: |
        Deletes an existing Web Credential configuration by providing its ID.

        ### **Analytic events**
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_DELETE_START
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_DELETE_SUCCESS
        * CREDENTIAL_WEB_SEMANTIC_CREDENTIAL_CONFIGURATION_DELETE_FAIL
      responses:
        '204':
          description: Web Credential configuration deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: id
                        value: abc
        '404':
          description: The Credential Configuration is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Credential Configuration not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: id
                        value: 638c5634-fb06-403a-bb00-ddb867ea9063
  /ext/oidc/v1/verifiers:
    post:
      operationId: createOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Create an OIDC Verifier
      description: >
        Creates a new OIDC Credential Verifier on the tenant.


        Once created, this OIDC Verifier is publicly available on its
        `/.well-known/openid-configuration` path. The Authorization header is
        not required as it is intended for OIDC Client applications to resolve.


        ### **Analytic events**

        * OIDC_VERIFIER_CREATE_START

        * OIDC_VERIFIER_CREATE_SUCCESS

        * OIDC_VERIFIER_CREATE_FAIL
      requestBody:
        description: The verifier payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verifierDid:
                  type: string
                  description: >-
                    Specifies the DID where the verifiable presenation will be
                    sent to.
                  example: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                presentationTemplateId:
                  type: string
                  format: uuid
                  description: >-
                    References the unique idetnifier of a Presentation Request
                    Template that will be used by this verifier to create
                    presentation requests.
                  example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                claimMappings:
                  type: array
                  description: >-
                    As part of verifying a credential, the OIDC client initiates
                    the request expecting a standard OIDC ID Token. However, as
                    the digital wallet provides the credential in JSON-LD terms,
                    it is required to map JSON-LD claims to OpenID Connect
                    terms.

                    - Currently the platform only supports `schema.org` for data
                    vocabularies.

                    - Make sure to use `http://` and not `https://` when
                    entering jsonLdFqn values for schema.org. Otherwise you may
                    not get the claims returned in your ID Token.

                    - Standard OIDC claims are available on the [Common
                    Credential to OIDC Claim mappings
                    page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                    so you can just copy & paste into your payload.
                  items:
                    type: object
                    required:
                      - jsonLdFqn
                      - oidcClaim
                    properties:
                      jsonLdFqn:
                        type: string
                        description: Fully qualified JSON-LD term.
                        example: http://schema.org/alumniOf
                      oidcClaim:
                        type: string
                        description: OpenID Connect term.
                        example: alumni_of
                includePresentation:
                  type: boolean
                  description: >-
                    When set to `true`, the generated `id_token` will include
                    the original presentation from the wallet.
                  example: true
              required:
                - verifierDid
                - presentationTemplateId
                - claimMappings
              title: CreateOidcVerifierRequest
            examples:
              Create a Verifier:
                value:
                  verifierDid: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                  presentationTemplateId: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                  claimMappings:
                    - jsonLdFqn: http://schema.org/alumniOf
                      oidcClaim: alumni_of
                  includePresentation: true
      responses:
        '201':
          description: OIDC Verifier created
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this OIDC Verifier. You will need
                          it to configure an OIDC Client on your OIDC Verifier.
                          You can also use it to retrieve, update or remove this
                          OIDC Verifier.
                        example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
                  - type: object
                    properties:
                      verifierDid:
                        type: string
                        description: >-
                          Specifies the DID where the verifiable presenation
                          will be sent to.
                        example: >-
                          did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                      presentationTemplateId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique idetnifier of a Presentation
                          Request Template that will be used by this verifier to
                          create presentation requests.
                        example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                      claimMappings:
                        type: array
                        description: >-
                          As part of verifying a credential, the OIDC client
                          initiates the request expecting a standard OIDC ID
                          Token. However, as the digital wallet provides the
                          credential in JSON-LD terms, it is required to map
                          JSON-LD claims to OpenID Connect terms.

                          - Currently the platform only supports `schema.org`
                          for data vocabularies.

                          - Make sure to use `http://` and not `https://` when
                          entering jsonLdFqn values for schema.org. Otherwise
                          you may not get the claims returned in your ID Token.

                          - Standard OIDC claims are available on the [Common
                          Credential to OIDC Claim mappings
                          page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                          so you can just copy & paste into your payload.
                        items:
                          type: object
                          required:
                            - jsonLdFqn
                            - oidcClaim
                          properties:
                            jsonLdFqn:
                              type: string
                              description: Fully qualified JSON-LD term.
                              example: http://schema.org/alumniOf
                            oidcClaim:
                              type: string
                              description: OpenID Connect term.
                              example: alumni_of
                      includePresentation:
                        type: boolean
                        description: >-
                          When set to `true`, the generated `id_token` will
                          include the original presentation from the wallet.
                        example: true
                    required:
                      - verifierDid
                      - presentationTemplateId
                      - claimMappings
                    title: CreateOidcVerifierRequest
                title: CreateOidcVerifierResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: presentationTemplateId
    get:
      operationId: getOidcVerifiers
      tags:
        - OIDC Verifiers
      summary: Retrieve all OIDC Verifiers
      description: |
        Returns a list of all OIDC Verifiers on the tenant.

        ### **Analytic events**
        * OIDC_VERIFIER_RETRIEVE_LIST_START
        * OIDC_VERIFIER_RETRIEVE_LIST_SUCCESS
        * OIDC_VERIFIER_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned verifier entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of verifier entries
      responses:
        '200':
          description: OIDC Verifiers retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                            description: >-
                              Uniquely identifies this OIDC Verifier. You will
                              need it to configure an OIDC Client on your OIDC
                              Verifier. You can also use it to retrieve, update
                              or remove this OIDC Verifier.
                            example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
                      - type: object
                        properties:
                          verifierDid:
                            type: string
                            description: >-
                              Specifies the DID where the verifiable presenation
                              will be sent to.
                            example: >-
                              did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                          presentationTemplateId:
                            type: string
                            format: uuid
                            description: >-
                              References the unique idetnifier of a Presentation
                              Request Template that will be used by this
                              verifier to create presentation requests.
                            example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                          claimMappings:
                            type: array
                            description: >-
                              As part of verifying a credential, the OIDC client
                              initiates the request expecting a standard OIDC ID
                              Token. However, as the digital wallet provides the
                              credential in JSON-LD terms, it is required to map
                              JSON-LD claims to OpenID Connect terms.

                              - Currently the platform only supports
                              `schema.org` for data vocabularies.

                              - Make sure to use `http://` and not `https://`
                              when entering jsonLdFqn values for schema.org.
                              Otherwise you may not get the claims returned in
                              your ID Token.

                              - Standard OIDC claims are available on the
                              [Common Credential to OIDC Claim mappings
                              page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                              so you can just copy & paste into your payload.
                            items:
                              type: object
                              required:
                                - jsonLdFqn
                                - oidcClaim
                              properties:
                                jsonLdFqn:
                                  type: string
                                  description: Fully qualified JSON-LD term.
                                  example: http://schema.org/alumniOf
                                oidcClaim:
                                  type: string
                                  description: OpenID Connect term.
                                  example: alumni_of
                          includePresentation:
                            type: boolean
                            description: >-
                              When set to `true`, the generated `id_token` will
                              include the original presentation from the wallet.
                            example: true
                        required:
                          - verifierDid
                          - presentationTemplateId
                          - claimMappings
                        title: CreateOidcVerifierRequest
                    title: CreateOidcVerifierResponse
                title: GetOidcVerifiersResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Failed to decode base64url data
                        param: cursor
                        value: abc
    parameters: []
  /ext/oidc/v1/verifiers/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Verifier ID
        schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
    get:
      operationId: getOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Retrieve an OIDC Verifier
      description: |-
        Retrieves an existing OIDC Verifier by providing its ID.

        ### **Analytic events**
        * OIDC_VERIFIER_RETRIEVE_START
        * OIDC_VERIFIER_RETRIEVE_SUCCESS
        * OIDC_VERIFIER_RETRIEVE_FAIL      
      responses:
        '200':
          description: OIDC Verifier retrieved
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this OIDC Verifier. You will need
                          it to configure an OIDC Client on your OIDC Verifier.
                          You can also use it to retrieve, update or remove this
                          OIDC Verifier.
                        example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
                  - type: object
                    properties:
                      verifierDid:
                        type: string
                        description: >-
                          Specifies the DID where the verifiable presenation
                          will be sent to.
                        example: >-
                          did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                      presentationTemplateId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique idetnifier of a Presentation
                          Request Template that will be used by this verifier to
                          create presentation requests.
                        example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                      claimMappings:
                        type: array
                        description: >-
                          As part of verifying a credential, the OIDC client
                          initiates the request expecting a standard OIDC ID
                          Token. However, as the digital wallet provides the
                          credential in JSON-LD terms, it is required to map
                          JSON-LD claims to OpenID Connect terms.

                          - Currently the platform only supports `schema.org`
                          for data vocabularies.

                          - Make sure to use `http://` and not `https://` when
                          entering jsonLdFqn values for schema.org. Otherwise
                          you may not get the claims returned in your ID Token.

                          - Standard OIDC claims are available on the [Common
                          Credential to OIDC Claim mappings
                          page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                          so you can just copy & paste into your payload.
                        items:
                          type: object
                          required:
                            - jsonLdFqn
                            - oidcClaim
                          properties:
                            jsonLdFqn:
                              type: string
                              description: Fully qualified JSON-LD term.
                              example: http://schema.org/alumniOf
                            oidcClaim:
                              type: string
                              description: OpenID Connect term.
                              example: alumni_of
                      includePresentation:
                        type: boolean
                        description: >-
                          When set to `true`, the generated `id_token` will
                          include the original presentation from the wallet.
                        example: true
                    required:
                      - verifierDid
                      - presentationTemplateId
                      - claimMappings
                    title: CreateOidcVerifierRequest
                title: CreateOidcVerifierResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: verifierId
                        value: abc
        '404':
          description: OIDC Verifier not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Verifier not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: verifierId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    put:
      operationId: updateOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Update an OIDC Verifier
      description: |
        Updates an existing OIDC Verifier by providing its ID.

        ### **Analytic events**
        * OIDC_VERIFIER_UPDATE_START
        * OIDC_VERIFIER_UPDATE_SUCCESS
        * OIDC_VERIFIER_UPDATE_FAIL      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verifierDid:
                  type: string
                  description: >-
                    Specifies the DID where the verifiable presenation will be
                    sent to.
                  example: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                presentationTemplateId:
                  type: string
                  format: uuid
                  description: >-
                    References the unique idetnifier of a Presentation Request
                    Template that will be used by this verifier to create
                    presentation requests.
                  example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                claimMappings:
                  type: array
                  description: >-
                    As part of verifying a credential, the OIDC client initiates
                    the request expecting a standard OIDC ID Token. However, as
                    the digital wallet provides the credential in JSON-LD terms,
                    it is required to map JSON-LD claims to OpenID Connect
                    terms.

                    - Currently the platform only supports `schema.org` for data
                    vocabularies.

                    - Make sure to use `http://` and not `https://` when
                    entering jsonLdFqn values for schema.org. Otherwise you may
                    not get the claims returned in your ID Token.

                    - Standard OIDC claims are available on the [Common
                    Credential to OIDC Claim mappings
                    page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                    so you can just copy & paste into your payload.
                  items:
                    type: object
                    required:
                      - jsonLdFqn
                      - oidcClaim
                    properties:
                      jsonLdFqn:
                        type: string
                        description: Fully qualified JSON-LD term.
                        example: http://schema.org/alumniOf
                      oidcClaim:
                        type: string
                        description: OpenID Connect term.
                        example: alumni_of
                includePresentation:
                  type: boolean
                  description: >-
                    When set to `true`, the generated `id_token` will include
                    the original presentation from the wallet.
                  example: true
              required:
                - verifierDid
                - presentationTemplateId
                - claimMappings
              title: CreateOidcVerifierRequest
            examples:
              Update a Verifier:
                value:
                  verifierDid: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                  presentationTemplateId: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                  claimMappings:
                    - jsonLdFqn: http://schema.org/alumniOf
                      oidcClaim: alumni_of
                  includePresentation: true
        description: Update a verifier
      responses:
        '200':
          description: OIDC Verifier updated
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: >-
                          Uniquely identifies this OIDC Verifier. You will need
                          it to configure an OIDC Client on your OIDC Verifier.
                          You can also use it to retrieve, update or remove this
                          OIDC Verifier.
                        example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
                  - type: object
                    properties:
                      verifierDid:
                        type: string
                        description: >-
                          Specifies the DID where the verifiable presenation
                          will be sent to.
                        example: >-
                          did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                      presentationTemplateId:
                        type: string
                        format: uuid
                        description: >-
                          References the unique idetnifier of a Presentation
                          Request Template that will be used by this verifier to
                          create presentation requests.
                        example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                      claimMappings:
                        type: array
                        description: >-
                          As part of verifying a credential, the OIDC client
                          initiates the request expecting a standard OIDC ID
                          Token. However, as the digital wallet provides the
                          credential in JSON-LD terms, it is required to map
                          JSON-LD claims to OpenID Connect terms.

                          - Currently the platform only supports `schema.org`
                          for data vocabularies.

                          - Make sure to use `http://` and not `https://` when
                          entering jsonLdFqn values for schema.org. Otherwise
                          you may not get the claims returned in your ID Token.

                          - Standard OIDC claims are available on the [Common
                          Credential to OIDC Claim mappings
                          page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                          so you can just copy & paste into your payload.
                        items:
                          type: object
                          required:
                            - jsonLdFqn
                            - oidcClaim
                          properties:
                            jsonLdFqn:
                              type: string
                              description: Fully qualified JSON-LD term.
                              example: http://schema.org/alumniOf
                            oidcClaim:
                              type: string
                              description: OpenID Connect term.
                              example: alumni_of
                      includePresentation:
                        type: boolean
                        description: >-
                          When set to `true`, the generated `id_token` will
                          include the original presentation from the wallet.
                        example: true
                    required:
                      - verifierDid
                      - presentationTemplateId
                      - claimMappings
                    title: CreateOidcVerifierRequest
                title: CreateOidcVerifierResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: presentationTemplateId
        '404':
          description: OIDC Verifier not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Verifier not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: verifierId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    delete:
      operationId: deleteOidcVerifier
      tags:
        - OIDC Verifiers
      summary: Delete an OIDC Verifier
      description: |
        Deletes an existing OIDC Verifier by providing its ID.

        ### **Analytic events**
        * OIDC_VERIFIER_DELETE_START
        * OIDC_VERIFIER_DELETE_SUCCESS
        * OIDC_VERIFIER_DELETE_FAIL      
      responses:
        '204':
          description: OIDC Verifier deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: verifierId
                        value: abc
        '404':
          description: OIDC Verifier not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Verifier not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: verifierId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
  /ext/oidc/v1/verifiers/{id}/clients:
    parameters:
      - schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        name: id
        in: path
        required: true
        description: Verifier ID
    post:
      operationId: createOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Configure an OIDC Client
      description: >-
        Configures an OIDC Verifier Client on your tenant.


        In order to verify a credential using an OpenID Connect Authorization
        Code Flow, you need to set up an OIDC Client application. This is the
        client that will engage with your configured OIDC Verifier to inititate
        the verification workflow.

        There is a list of OIDC Client apps, also known as Relying Party
        Libraries, on the [OpenID
        website](https://openid.net/developers/certified/). Pick one which you
        feel comfortable with.


        > When dealing with personal identity information it is strongly
        recommended to follow the Authorization Code Flow which ensures
        sensitive data is transmitted via the `/token` endpoint back-channel.


        ### **Analytic events**

        * OIDC_VERIFIER_CLIENT_CREATE_START

        * OIDC_VERIFIER_CLIENT_CREATE_SUCCESS

        * OIDC_VERIFIER_CLIENT_CREATE_FAIL      
      requestBody:
        description: The client payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Insert a meaningful name for your OIDC Client.
                  example: OIDC Client for the verifier
                redirectUris:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: >-
                    This array can include a list of URLs. One of the URIs in
                    that list must match the callback URI configured for your
                    OIDC Client for the Authorization Request:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not include query parameters.

                    - For testing, it’s okay to add a localhost uri like
                    https://localhost:9090/callback
                  example:
                    - https://example.com/callback
                responseTypes:
                  type: array
                  items:
                    type: string
                  description: Determines the authorization processing flow.
                  example:
                    - code
                grantTypes:
                  type: array
                  items:
                    type: string
                  description: OAuth Grant Type.
                  example:
                    - authorization_code
                tokenEndpointAuthMethod:
                  type: string
                  description: OAuth Token Endpoint Authentication Method.
                  example: client_secret_post
                idTokenSignedResponseAlg:
                  type: string
                  description: Algorithm must match configured jwks. Defaults to `ES256`.
                  example: ES256
                applicationType:
                  type: string
                  example: web
                logoUri:
                  type: string
                  format: uri
                  description: The logo to display above the QR code.
                  example: https://example.com/logo.png
              required:
                - name
                - redirectUris
                - idTokenSignedResponseAlg
              title: CreateOidcVerifierClientRequest
            examples:
              Create a Client:
                value:
                  name: OIDC Client for the verifier
                  redirectUris:
                    - https://example.com/callback
                  responseTypes:
                    - code
                  grantTypes:
                    - authorization_code
                  tokenEndpointAuthMethod: client_secret_post
                  idTokenSignedResponseAlg: ES256
                  applicationType: web
                  logoUri: https://example.com/logo.png
      responses:
        '201':
          description: OIDC Client configured
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Make note of your id with this OIDC Client.
                        example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
                      secret:
                        type: string
                        description: Make note of your secret with this OIDC Client.
                        example: H2epdcmNJ46hXJo5opdzvhbZK9W2ZGPkQh.E
                  - type: object
                    properties:
                      name:
                        type: string
                        description: Insert a meaningful name for your OIDC Client.
                        example: OIDC Client for the verifier
                      redirectUris:
                        type: array
                        items:
                          type: string
                          format: uri
                        description: >-
                          This array can include a list of URLs. One of the URIs
                          in that list must match the callback URI configured
                          for your OIDC Client for the Authorization Request:

                          - Must be a valid URL.

                          - Must use the HTTPS protocol.

                          - Must not be an IP address.

                          - Must not include query parameters.

                          - For testing, it’s okay to add a localhost uri like
                          https://localhost:9090/callback
                        example:
                          - https://example.com/callback
                      responseTypes:
                        type: array
                        items:
                          type: string
                        description: Determines the authorization processing flow.
                        example:
                          - code
                      grantTypes:
                        type: array
                        items:
                          type: string
                        description: OAuth Grant Type.
                        example:
                          - authorization_code
                      tokenEndpointAuthMethod:
                        type: string
                        description: OAuth Token Endpoint Authentication Method.
                        example: client_secret_post
                      idTokenSignedResponseAlg:
                        type: string
                        description: >-
                          Algorithm must match configured jwks. Defaults to
                          `ES256`.
                        example: ES256
                      applicationType:
                        type: string
                        example: web
                      logoUri:
                        type: string
                        format: uri
                        description: The logo to display above the QR code.
                        example: https://example.com/logo.png
                    required:
                      - name
                      - redirectUris
                      - idTokenSignedResponseAlg
                    title: CreateOidcVerifierClientRequest
                title: CreateOidcVerifierClientResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: redirectUris is not array of strings
                        param: redirectUris
    get:
      operationId: getOidcVerifierClients
      tags:
        - OIDC Verifier Client
      summary: Retrieve all OIDC Clients
      description: |
        Returns a list of all OIDC Verifier Clients on the Tenant.

        ### **Analytic events**
        * OIDC_VERIFIER_CLIENT_RETRIEVE_LIST_START
        * OIDC_VERIFIER_CLIENT_RETRIEVE_LIST_SUCCESS
        * OIDC_VERIFIER_CLIENT_RETRIEVE_LIST_FAIL      
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned client entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of client entries
      responses:
        '200':
          description: OIDC Clients retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
                    description: Starting point for next cursor to use in a page
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                            description: Make note of your id with this OIDC Client.
                            example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
                          secret:
                            type: string
                            description: Make note of your secret with this OIDC Client.
                            example: H2epdcmNJ46hXJo5opdzvhbZK9W2ZGPkQh.E
                      - type: object
                        properties:
                          name:
                            type: string
                            description: Insert a meaningful name for your OIDC Client.
                            example: OIDC Client for the verifier
                          redirectUris:
                            type: array
                            items:
                              type: string
                              format: uri
                            description: >-
                              This array can include a list of URLs. One of the
                              URIs in that list must match the callback URI
                              configured for your OIDC Client for the
                              Authorization Request:

                              - Must be a valid URL.

                              - Must use the HTTPS protocol.

                              - Must not be an IP address.

                              - Must not include query parameters.

                              - For testing, it’s okay to add a localhost uri
                              like https://localhost:9090/callback
                            example:
                              - https://example.com/callback
                          responseTypes:
                            type: array
                            items:
                              type: string
                            description: Determines the authorization processing flow.
                            example:
                              - code
                          grantTypes:
                            type: array
                            items:
                              type: string
                            description: OAuth Grant Type.
                            example:
                              - authorization_code
                          tokenEndpointAuthMethod:
                            type: string
                            description: OAuth Token Endpoint Authentication Method.
                            example: client_secret_post
                          idTokenSignedResponseAlg:
                            type: string
                            description: >-
                              Algorithm must match configured jwks. Defaults to
                              `ES256`.
                            example: ES256
                          applicationType:
                            type: string
                            example: web
                          logoUri:
                            type: string
                            format: uri
                            description: The logo to display above the QR code.
                            example: https://example.com/logo.png
                        required:
                          - name
                          - redirectUris
                          - idTokenSignedResponseAlg
                        title: CreateOidcVerifierClientRequest
                    title: CreateOidcVerifierClientResponse
                title: GetOidcVerifierClientsResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: Failed to decode base64url data
                        param: cursor
                        value: abc
  /ext/oidc/v1/verifiers/{id}/clients/{clientId}:
    parameters:
      - name: id
        in: path
        required: true
        description: OIDC Verifier ID
        schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
      - schema:
          type: string
          format: uuid
          example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
        name: clientId
        in: path
        required: true
        description: OIDC Verifier Client ID
    get:
      operationId: getOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Retrieve an OIDC Client
      description: |-
        Retrieves an existing OIDC Verifier Client by providing its ID.

        ### **Analytic events**
        * OIDC_VERIFIER_CLIENT_RETRIEVE_START
        * OIDC_VERIFIER_CLIENT_RETRIEVE_SUCCESS
        * OIDC_VERIFIER_CLIENT_RETRIEVE_FAIL      
      responses:
        '200':
          description: OIDC Verifier Client retrieved
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Make note of your id with this OIDC Client.
                        example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
                      secret:
                        type: string
                        description: Make note of your secret with this OIDC Client.
                        example: H2epdcmNJ46hXJo5opdzvhbZK9W2ZGPkQh.E
                  - type: object
                    properties:
                      name:
                        type: string
                        description: Insert a meaningful name for your OIDC Client.
                        example: OIDC Client for the verifier
                      redirectUris:
                        type: array
                        items:
                          type: string
                          format: uri
                        description: >-
                          This array can include a list of URLs. One of the URIs
                          in that list must match the callback URI configured
                          for your OIDC Client for the Authorization Request:

                          - Must be a valid URL.

                          - Must use the HTTPS protocol.

                          - Must not be an IP address.

                          - Must not include query parameters.

                          - For testing, it’s okay to add a localhost uri like
                          https://localhost:9090/callback
                        example:
                          - https://example.com/callback
                      responseTypes:
                        type: array
                        items:
                          type: string
                        description: Determines the authorization processing flow.
                        example:
                          - code
                      grantTypes:
                        type: array
                        items:
                          type: string
                        description: OAuth Grant Type.
                        example:
                          - authorization_code
                      tokenEndpointAuthMethod:
                        type: string
                        description: OAuth Token Endpoint Authentication Method.
                        example: client_secret_post
                      idTokenSignedResponseAlg:
                        type: string
                        description: >-
                          Algorithm must match configured jwks. Defaults to
                          `ES256`.
                        example: ES256
                      applicationType:
                        type: string
                        example: web
                      logoUri:
                        type: string
                        format: uri
                        description: The logo to display above the QR code.
                        example: https://example.com/logo.png
                    required:
                      - name
                      - redirectUris
                      - idTokenSignedResponseAlg
                    title: CreateOidcVerifierClientRequest
                title: CreateOidcVerifierClientResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: clientId
                        value: abc
        '404':
          description: OIDC Verifier Client not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    put:
      operationId: updateOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Update an OIDC Client
      description: |
        Updates an existing OIDC Verifier Client by providing its ID.

        ### **Analytic events**
        * OIDC_VERIFIER_CLIENT_UPDATE_START
        * OIDC_VERIFIER_CLIENT_UPDATE_SUCCESS
        * OIDC_VERIFIER_CLIENT_UPDATE_FAIL      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Insert a meaningful name for your OIDC Client.
                  example: OIDC Client for the verifier
                redirectUris:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: >-
                    This array can include a list of URLs. One of the URIs in
                    that list must match the callback URI configured for your
                    OIDC Client for the Authorization Request:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not include query parameters.

                    - For testing, it’s okay to add a localhost uri like
                    https://localhost:9090/callback
                  example:
                    - https://example.com/callback
                responseTypes:
                  type: array
                  items:
                    type: string
                  description: Determines the authorization processing flow.
                  example:
                    - code
                grantTypes:
                  type: array
                  items:
                    type: string
                  description: OAuth Grant Type.
                  example:
                    - authorization_code
                tokenEndpointAuthMethod:
                  type: string
                  description: OAuth Token Endpoint Authentication Method.
                  example: client_secret_post
                idTokenSignedResponseAlg:
                  type: string
                  description: Algorithm must match configured jwks. Defaults to `ES256`.
                  example: ES256
                applicationType:
                  type: string
                  example: web
                logoUri:
                  type: string
                  format: uri
                  description: The logo to display above the QR code.
                  example: https://example.com/logo.png
              required:
                - name
                - redirectUris
                - idTokenSignedResponseAlg
              title: CreateOidcVerifierClientRequest
            examples:
              Update Client:
                value:
                  name: OIDC Client for the verifier
                  redirectUris:
                    - https://example.com/callback
                  responseTypes:
                    - code
                  grantTypes:
                    - authorization_code
                  tokenEndpointAuthMethod: client_secret_post
                  idTokenSignedResponseAlg: ES256
                  applicationType: web
                  logoUri: https://example.com/logo.png
        description: Update a client
      responses:
        '200':
          description: OIDC Verifier Client updated
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Make note of your id with this OIDC Client.
                        example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
                      secret:
                        type: string
                        description: Make note of your secret with this OIDC Client.
                        example: H2epdcmNJ46hXJo5opdzvhbZK9W2ZGPkQh.E
                  - type: object
                    properties:
                      name:
                        type: string
                        description: Insert a meaningful name for your OIDC Client.
                        example: OIDC Client for the verifier
                      redirectUris:
                        type: array
                        items:
                          type: string
                          format: uri
                        description: >-
                          This array can include a list of URLs. One of the URIs
                          in that list must match the callback URI configured
                          for your OIDC Client for the Authorization Request:

                          - Must be a valid URL.

                          - Must use the HTTPS protocol.

                          - Must not be an IP address.

                          - Must not include query parameters.

                          - For testing, it’s okay to add a localhost uri like
                          https://localhost:9090/callback
                        example:
                          - https://example.com/callback
                      responseTypes:
                        type: array
                        items:
                          type: string
                        description: Determines the authorization processing flow.
                        example:
                          - code
                      grantTypes:
                        type: array
                        items:
                          type: string
                        description: OAuth Grant Type.
                        example:
                          - authorization_code
                      tokenEndpointAuthMethod:
                        type: string
                        description: OAuth Token Endpoint Authentication Method.
                        example: client_secret_post
                      idTokenSignedResponseAlg:
                        type: string
                        description: >-
                          Algorithm must match configured jwks. Defaults to
                          `ES256`.
                        example: ES256
                      applicationType:
                        type: string
                        example: web
                      logoUri:
                        type: string
                        format: uri
                        description: The logo to display above the QR code.
                        example: https://example.com/logo.png
                    required:
                      - name
                      - redirectUris
                      - idTokenSignedResponseAlg
                    title: CreateOidcVerifierClientRequest
                title: CreateOidcVerifierClientResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: redirectUris is not array of strings
                        param: redirectUris
        '404':
          description: OIDC Verifier Client not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    delete:
      operationId: deleteOidcVerifierClient
      tags:
        - OIDC Verifier Client
      summary: Delete an OIDC Client
      description: |
        Deletes an existing OIDC Verifier Client by providing its ID.

        ### **Analytic events**
        * OIDC_VERIFIER_CLIENT_DELETE_START
        * OIDC_VERIFIER_CLIENT_DELETE_SUCCESS
        * OIDC_VERIFIER_CLIENT_DELETE_FAIL
      responses:
        '204':
          description: OIDC Verifier Client deleted.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: clientId
                        value: abc
        '404':
          description: OIDC Verifier Client not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Client not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: clientId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
  /ext/oidc/v1/verifiers/{id}/.well-known/openid-configuration:
    parameters:
      - schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        name: id
        in: path
        required: true
        description: Verifier ID
    get:
      operationId: verifierWellKnownOidcConfig
      security: []
      tags:
        - OIDC Verifier Auth
      summary: Well Known OpenId Configuration
      description: >
        The standard OpenID Connect Well Known configuration metadata endpoint.


        This endpoint is unprotected, public facing and can be used by any party
        wishing to discover the OpenID Connect capabilities.
      responses:
        '200':
          description: Returns OpenID configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorization_endpoint:
                    type: string
                    format: uri
                    example: >-
                      https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/authorize
                  claims_parameter_supported:
                    type: boolean
                    example: true
                  claims_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - sub
                      - sid
                      - auth_time
                      - iss
                  code_challenge_methods_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - S256
                  end_session_endpoint:
                    type: string
                    format: uri
                    example: >-
                      https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/session/end
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - implicit
                      - authorization_code
                      - refresh_token
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - HS256
                      - ES256
                  issuer:
                    type: string
                    format: uri
                    example: https://tenant.vii.mattr.global
                  jwks_uri:
                    type: string
                    format: uri
                    example: >-
                      https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/jwks
                  registration_endpoint:
                    type: string
                    format: uri
                    example: >-
                      https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients
                  request_object_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - HS256
                      - RS256
                      - PS256
                      - ES256
                      - EdDSA
                  request_parameter_supported:
                    type: boolean
                    example: true
                  request_uri_parameter_supported:
                    type: boolean
                    example: true
                  require_request_uri_registration:
                    type: boolean
                    example: true
                  response_modes_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - form_post
                      - fragment
                      - query
                  response_types_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - code id_token
                      - code
                      - id_token
                      - none
                  scopes_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - openid
                      - offline_access
                  subject_types_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - public
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - none
                      - client_secret_basic
                      - client_secret_jwt
                      - client_secret_post
                      - private_key_jwt
                  token_endpoint_auth_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - HS256
                      - RS256
                      - PS256
                      - ES256
                      - EdDSA
                  token_endpoint:
                    type: string
                    format: uri
                    example: >-
                      https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/token
                  userinfo_endpoint:
                    type: string
                    format: uri
                    example: >-
                      https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/me
                  userinfo_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - HS256
                      - ES256
                  claim_types_supported:
                    type: array
                    items:
                      type: string
                    example:
                      - normal
                title: OpenIdConfiguration
  /ext/oidc/v1/verifiers/{id}/token:
    post:
      operationId: verifierRetrieveToken
      tags:
        - OIDC Verifier Auth
      summary: Retrieve Token
      description: >-
        > OIDC Token endpoint


        The OpenId Connect `/token` endpoint is used to obtain the
        `access_token` and `id_token` by presenting a valid authorization `code`


        ### **Analytic events**

        * OIDC_VERIFIER_AUTH_START

        * OIDC_VERIFIER_AUTH_SUCCESS

        * OIDC_VERIFIER_AUTH_FAIL
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - type: object
                  properties:
                    client_id:
                      oneOf:
                        - example: G1s1EPMml4L0zFd63R1YP
                      type: string
                    client_secret:
                      type: string
                      example: >-
                        aYzQUXD0VtlNHhTnxt6cyJeMgLczIBm-AA87STG0narCG8P0iL78fAO7TcWjPBYKwpoZY7Sw8MWNwvqf5VVqFw
                    grant_type:
                      type: string
                      example: authorization_code
                    code:
                      type: string
                      example: shdT2ks5tg9b
                    redirect_uri:
                      type: string
                      format: uri
                      example: https://my-client-rp.example.com
                  title: InitialTokenRequest
                - type: object
                  properties:
                    client_id:
                      type: string
                    client_secret:
                      type: string
                    grant_type:
                      type: string
                      example: authorization_code
                    refresh_token:
                      type: string
                    redirect_uri:
                      type: string
                      format: uri
                  title: RefreshTokenRequest
              title: TokenRequest
            examples: {}
        description: Token endpoint request
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    enum:
                      - bearer
                  refresh_token:
                    type: string
                  expires_in:
                    type: integer
                  id_token:
                    type: string
                title: TokenResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
      security: []
    parameters:
      - name: id
        in: path
        required: true
        description: Verifier ID
        schema:
          type: string
          format: uuid
          example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
  /core/v1/webhooks:
    post:
      operationId: createWebhook
      tags:
        - Webhooks
      summary: Create Webhook
      description: |
        Creates a new webhook for this tenant.

        ### **Analytic events**
        * WEBHOOK_CREATE_START
        * WEBHOOK_CREATE_SUCCESS
        * WEBHOOK_CREATE_FAIL
      requestBody:
        description: The webhook payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                events:
                  type: array
                  description: >-
                    This array includes the event types that will trigger this
                    Webhook. The following events are currently supported:

                    - **OpenIdCredentialIssued**: Triggered upon completion of
                    an OpenID4VCI issuance flow.

                    - **OidcIssuerCredentialIssued**: Triggered upon completion
                    of an OICD Bridge issuance flow.
                  example:
                    - OidcIssuerCredentialIssued
                  items:
                    type: string
                    enum:
                      - OidcIssuerCredentialIssued
                      - OpenIdCredentialIssued
                url:
                  description: >-
                    This is the URL that will receive the Webhook events data
                    payload when they are triggered by MATTR VII for the
                    specified events:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not include query parameters or has fragments.

                    - Non-ASCII characters are normalised.

                    - Must return a 2xx response, otherwise it will go through a
                    retry cycle and eventually fail.
                  type: string
                  example: https://example.com
                  format: uri
                disabled:
                  type: boolean
                  description: >-
                    Indicates whether or not the Webhook is disabled. When set
                    to `true` the webhook is disabled, and notifications for
                    events associated with it will not be sent. If no value is
                    provided, defaults to `false`.
              required:
                - events
                - url
              title: CreateWebhookRequest
            examples:
              Create a Webhook:
                value:
                  events:
                    - OidcIssuerCredentialIssued
                  url: https://example.com
      responses:
        '201':
          description: Webhook created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Unique identifier for the created Webhook. You will need
                      it to [verify the
                      Webhook](https://learn.mattr.global/tutorials/webhooks/verifying-webhooks).
                    example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
                  events:
                    type: array
                    description: >-
                      List of events that trigger the Webhook, as defined in the
                      request.
                    example:
                      - OidcIssuerCredentialIssued
                    items:
                      type: string
                  url:
                    description: >-
                      The URL that will receive the Webhook events data payload
                      when they are triggered, as defined in the request.
                    type: string
                    example: https://example.com
                    format: uri
                  disabled:
                    type: boolean
                    description: >-
                      Indicates whether ot not the Webhook is disabled. When set
                      to `true` the webhook is disabled, and notifications for
                      events associated with it will not be sent.
                    default: false
                title: CreateWebhookResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Problem parsing body
    get:
      operationId: getWebhooks
      tags:
        - Webhooks
      summary: Retrieve all Webhooks
      description: |
        Retrieves a list of webhooks configured on the tenant.

        ### **Analytic events**
        * WEBHOOK_RETRIEVE_LIST_START
        * WEBHOOK_RETRIEVE_LIST_SUCCESS
        * WEBHOOK_RETRIEVE_LIST_FAIL
      parameters:
        - schema:
            type: number
            example: 2
            maximum: 1000
            minimum: 1
          in: query
          name: limit
          description: Range size of returned webhook entries, default 100
        - schema:
            type: string
            example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
          in: query
          name: cursor
          description: Starting point for the range of webhook entries
      responses:
        '200':
          description: Webhooks retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    minItems: 2
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: Webhook id
                          example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
                        events:
                          type: array
                          description: List of events that trigger the Webhook.
                          example:
                            - OidcIssuerCredentialIssued
                          items:
                            type: string
                        url:
                          description: >-
                            The URL that will receive the Webhook events data
                            payload when they are triggered.
                          type: string
                          example: https://example.com
                          format: uri
                        disabled:
                          type: boolean
                          description: >-
                            Indicates whether ot not the Webhook is disabled.
                            When set to `true` the webhook is disabled, and
                            notifications for events associated with it will not
                            be sent.
                          default: false
                  nextCursor:
                    type: string
                    example: >-
                      Y3JlYXRlZEF0PTIwMjItMDgtMjJUMDElM0E1OSUzQTE5LjYyMFomaWQ9MGMwOTk2MTEtMTljNC00ZjI5LTg3MjQtNmI5ZTViYTFlZjdj
                title: GetWebhooksResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Invalid Cursor:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: query
                        msg: id and createdAt is missing
                        param: cursor
                        value: abc
                Limit exceeded:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - value: '1001'
                        msg: Invalid value
                        param: limit
                        location: query
  /core/v1/webhooks/{id}:
    get:
      operationId: getWebhook
      tags:
        - Webhooks
      summary: Retrieve Webhook
      description: |
        Retrieve a specific Webhook by providing its ID.

        ### **Analytic events**
        * WEBHOOK_RETRIEVE_START
        * WEBHOOK_RETRIEVE_SUCCESS
        * WEBHOOK_RETRIEVE_FAIL
      parameters:
        - name: id
          in: path
          description: The requested Webhook ID.
          schema:
            type: string
            format: uuid
            example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
          required: true
      responses:
        '200':
          description: Webhook retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Webhook id
                    example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
                  events:
                    type: array
                    description: List of events that trigger the Webhook.
                    example:
                      - OidcIssuerCredentialIssued
                    items:
                      type: string
                  url:
                    description: >-
                      The URL that will receive the Webhook events data payload
                      when they are triggered.
                    type: string
                    example: https://example.com
                    format: uri
                  disabled:
                    type: boolean
                    description: >-
                      Indicates whether ot not the Webhook is disabled. When set
                      to `true` the webhook is disabled, and notifications for
                      events associated with it will not be sent.
                    default: false
                title: GetWebhookResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: webhookId
                        value: abc
    put:
      operationId: updateWebhook
      tags:
        - Webhooks
      summary: Update Webhook
      parameters:
        - name: id
          in: path
          description: Webhook ID
          schema:
            type: string
            format: uuid
            example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
          required: true
      description: |-
        Updates an existing Webhook by providing its ID.

        ### **Analytic events**
        * WEBHOOK_UPDATE_START
        * WEBHOOK_UPDATE_SUCCESS
        * WEBHOOK_UPDATE_FAIL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                events:
                  type: array
                  description: >-
                    This array includes the event types that will trigger this
                    Webhook. The following events are currently supported:

                    - **OpenIdCredentialIssued**: Triggered upon completion of
                    an OpenID4VCI issuance flow.

                    - **OidcIssuerCredentialIssued**: Triggered upon completion
                    of an OICD Bridge issuance flow.
                  example:
                    - OidcIssuerCredentialIssued
                  items:
                    type: string
                    enum:
                      - OidcIssuerCredentialIssued
                      - OpenIdCredentialIssued
                url:
                  description: >-
                    This is the URL that will receive the Webhook events data
                    payload when they are triggered by MATTR VII for the
                    specified events:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not include query parameters or has fragments.

                    - Non-ASCII characters are normalised.

                    - Must return a 2xx response, otherwise it will go through a
                    retry cycle and eventually fail.
                  type: string
                  example: https://example.com
                  format: uri
                disabled:
                  type: boolean
                  description: >-
                    Indicates whether or not the Webhook is disabled. When set
                    to `true` the webhook is disabled, and notifications for
                    events associated with it will not be sent. If no value is
                    provided, defaults to `false`.
              required:
                - events
                - url
              title: CreateWebhookRequest
        description: Update Webhook
      responses:
        '200':
          description: Webhook updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Unique identifier for the created Webhook. You will need
                      it to [verify the
                      Webhook](https://learn.mattr.global/tutorials/webhooks/verifying-webhooks).
                    example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
                  events:
                    type: array
                    description: >-
                      List of events that trigger the Webhook, as defined in the
                      request.
                    example:
                      - OidcIssuerCredentialIssued
                    items:
                      type: string
                  url:
                    description: >-
                      The URL that will receive the Webhook events data payload
                      when they are triggered, as defined in the request.
                    type: string
                    example: https://example.com
                    format: uri
                  disabled:
                    type: boolean
                    description: >-
                      Indicates whether ot not the Webhook is disabled. When set
                      to `true` the webhook is disabled, and notifications for
                      events associated with it will not be sent.
                    default: false
                title: CreateWebhookResponse
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: body
                        msg: Invalid value
                        param: url
        '404':
          description: The webhook is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Webhook not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: webhookId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
    delete:
      operationId: deleteWebhook
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          description: Webhook ID
          schema:
            type: string
            format: uuid
            example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
          required: true
      summary: Delete Webhook
      description: |
        Deletes a Webhook by providing its ID.

        ### **Analytic events**
        * WEBHOOK_DELETE_START
        * WEBHOOK_DELETE_SUCCESS
        * WEBHOOK_DELETE_FAIL
      responses:
        '204':
          description: Webhook deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Bad Request:
                  value:
                    code: BadRequest
                    message: Validation Error
                    details:
                      - location: params
                        msg: Invalid value
                        param: webhookId
                        value: abc
        '404':
          description: The webhook is not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: The value that was provided
                        msg:
                          type: string
                          example: Invalid value
                          description: Description of why the request is invalid
                        param:
                          type: string
                          example: id
                          description: The parameter that is invalid
                        location:
                          type: string
                          example: body
                          description: The location in either body, query, path or params
                title: ErrorResponse
              examples:
                Webhook not found:
                  value:
                    code: NotFound
                    message: Validation Error
                    details:
                      - location: params
                        msg: Resource Not Found
                        param: webhookId
                        value: a368cfb4-9537-4439-acc6-ce3cf2287eb7
  /core/v1/webhooks/jwks:
    get:
      operationId: getWebhookJwks
      tags:
        - Webhooks
      summary: Retrieve Webhook JWKs
      description: >
        Retrieves a list of Webhook JWKs (JSON Web Keys) from the tenant. These
        keys can be used to verify the HTTP signature and validate the integrity
        and authorship of generated Webhooks.
      responses:
        '200':
          description: Webhook JWKs retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          properties:
                            kty:
                              type: string
                              description: Key type.
                              example: OKP
                            crv:
                              type: string
                              description: Elliptic curve used to generate the key.
                              example: Ed25519
                            x:
                              type: string
                              example: 11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo
                            use:
                              type: string
                              example: sig
                            kid:
                              type: string
                              description: >-
                                Key identifier. You should use the `kid`
                                specified in the JWK key object to identify
                                which key a particular HTTP request is signed
                                with, as the key set can change or contain
                                multiple keys.
                              example: FdFYFzERwC2uCBB46pZQi4GG85LujR8obt-KWRBICVQ
  /oauth/token:
    servers:
      - url: https://auth_server
    post:
      summary: Create API Auth Token
      operationId: authToken
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                title: OAuthTokenResponse
                type: object
                properties:
                  access_token:
                    type: string
                    description: >-
                      Must be used as a bearer token for all subsequent requests
                      to protected resources on your tenant.
                    example: >-
                      s2dgbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6s2dcaEROemRDf5gbRVEwTTVSVFE0TmtZME9UZzVNVEpDTlVJNFJqRTBPREExTmpZMk1qazFPQSJ9
                  expires_in:
                    type: number
                    description: Token expiry time (in seconds).
                    example: 86400
                  token_type:
                    type: string
                    example: Bearer
                required:
                  - access_token
                  - expires_in
                  - token_type
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                title: TokenErrorResponse
                type: object
                properties:
                  error:
                    type: string
                  error_description:
                    type: string
              examples:
                Invalid credentials:
                  value:
                    error: access_denied
                    error_description: Unauthorized
      description: >-
        Returns an API access token. This token must then be used as an
        authorization header for all requests to protected endpoints (this is
        required for the majority of operations).


        This request must be made to an authentication server based on your
        tenant's region:

        - **Sydney, Australia**: `auth.vii.au01.mattr.global`

        - **Montreal, Cadanda**: `auth.vii.ca01.mattr.global`

        - **Frankfurt, Germany, Europe**: `auth.vii.eu01.mattr.global`

        - **Oregon, United States**: `auth.vii.us01.mattr.global`


        Your region details as well as required `client_id` and `client_secret`
        are provided as part of onboarding, or retrieved when you create a
        tenant on the Self Service Portal. If you do not have your tenant
        details, or have any other questions, please [contact
        us](https://mattr.global/contact/) before proceeding.
      security: []
      requestBody:
        content:
          application/json:
            schema:
              title: OAuthTokenRequest
              type: object
              properties:
                client_id:
                  type: string
                  description: >-
                    Use the `client_id` value provided with your tenant details,
                    or retrieved when you created a tenant on the Self Service
                    Portal.
                  example: htf792W4p4MedZbnoWAs51EfqUt4d2
                client_secret:
                  type: string
                  description: >-
                    Use the `client_secret` value provided with your tenant
                    details, or retrieved when you created a tenant on the Self
                    Service Portal.
                  example: >-
                    d3fYDX7FjPg1D1h2viARXsolPByQ9vMfg8LHylBy8F4s5KJLB4HhHGOxxqJnSj3G
                audience:
                  type: string
                  description: Use your tenant URL.
                  example: https://learn.vii.au01.mattr.global
                grant_type:
                  type: string
                  description: Use `client_credentials`.
                  example: client_credentials
              required:
                - client_id
                - client_secret
                - audience
                - grant_type
            examples:
              Request:
                value:
                  client_id: htf792W4p4MedZbnoWAs51EfqUt4d2
                  client_secret: >-
                    d3fYDX7FjPg1D1h2viARXsolPByQ9vMfg8LHylBy8F4s5KJLB4HhHGOxxqJnSj3G
                  audience: https://learn.vii.au01.mattr.global
                  grant_type: client_credentials
      tags:
        - Security
      x-codeSamples:
        - lang: curl
          source: |
            curl --request POST \
              --url https://auth.au01.mattr.global/oauth/token/ \
              --header 'Content-Type: application/json' \
              --data '{"client_id": "KWdv9qo9Vnl9rrCRB7sfGKFTp4uO09im",
                       "client_secret": "ztJe2GVpOb1_rUo9Vnl9rrCRB7sfGKFTp4uO0DOfLnA5FSz96wbrzgJMQ",
                       "audience": "https://learn.vii.au01.mattr.global",
                       "grant_type": "client_credentials"
                      }'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    bearerAuthOpenIdCredentials:
      type: http
      scheme: bearer
  schemas:
    OAuthTokenResponse:
      title: OAuthTokenResponse
      type: object
      properties:
        access_token:
          type: string
          description: >-
            Must be used as a bearer token for all subsequent requests to
            protected resources on your tenant.
          example: >-
            s2dgbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6s2dcaEROemRDf5gbRVEwTTVSVFE0TmtZME9UZzVNVEpDTlVJNFJqRTBPREExTmpZMk1qazFPQSJ9
        expires_in:
          type: number
          description: Token expiry time (in seconds).
          example: 86400
        token_type:
          type: string
          example: Bearer
      required:
        - access_token
        - expires_in
        - token_type
    TokenErrorResponse:
      title: TokenErrorResponse
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
    OAuthTokenRequest:
      title: OAuthTokenRequest
      type: object
      properties:
        client_id:
          type: string
          description: >-
            Use the `client_id` value provided with your tenant details, or
            retrieved when you created a tenant on the Self Service Portal.
          example: htf792W4p4MedZbnoWAs51EfqUt4d2
        client_secret:
          type: string
          description: >-
            Use the `client_secret` value provided with your tenant details, or
            retrieved when you created a tenant on the Self Service Portal.
          example: d3fYDX7FjPg1D1h2viARXsolPByQ9vMfg8LHylBy8F4s5KJLB4HhHGOxxqJnSj3G
        audience:
          type: string
          description: Use your tenant URL.
          example: https://learn.vii.au01.mattr.global
        grant_type:
          type: string
          description: Use `client_credentials`.
          example: client_credentials
      required:
        - client_id
        - client_secret
        - audience
        - grant_type
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Event identifier.
          example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
        type:
          type: string
          description: Event type.
          example: DCC_SIGN_START
        timestamp:
          type: string
          description: Timestamp of when the event was generated.
          example: '2023-06-01T02:45:44.087Z'
        category:
          type: string
          description: Event category.
          example: dcc
        requestId:
          type: string
          description: Identifier for the request this event is part of.
          example: c1c354f9-fe2b-47d3-9d23-af6c7514a56a
        metadata:
          type: object
          description: Available metadata will vary based on event type and logging level.
        data:
          type: object
          description: Available data will vary based on event type and logging level.
      required:
        - id
        - type
        - timestamp
        - category
        - metadata
        - data
    ValidationError:
      title: ValidationError
      description: The request was malformed or missing required parameters.
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: The value that was provided
              msg:
                type: string
                example: Invalid value
                description: Description of why the request is invalid
              param:
                type: string
                example: id
                description: The parameter that is invalid
              location:
                type: string
                example: body
                description: The location in either body, query, path or params
    JSONObjectMessage:
      type: object
      description: A JSON Object plaintext message
      example:
        msg: this is a message
      title: JSONObjectMessage
    SignMessageRequest:
      type: object
      required:
        - didUrl
        - payload
      properties:
        didUrl:
          type: string
          description: >-
            The did key that will be used to sign the message, which must
            supports signing. You can obtain it from the DID document
            `DID.localMetadata.initialDidDocument.authentication[0]` path.
          example: did:example:abcdefghijkl#key1
        payload:
          type: object
          description: A JSON Object plaintext message
          example:
            msg: this is a message
          title: JSONObjectMessage
      title: SignMessageRequest
    SignMessageResponse:
      title: SignMessageResponse
      type: string
      description: Signed message in a response
      example: >-
        eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa21mazNtMldIQlVxVm94SlZ3R1NQejVrYmFKNnpBMXRwN1JRWUJiUUdtczNoI3o2TWttZmszbTJXSEJVcVZveEpWd0dTUHo1a2JhSjZ6QTF0cDdSUVlCYlFHbXMzaCJ9.eyJtc2ciOiJUaGlzIGlzIGEgcGF5bG9hZCJ9.5E9qEmmSOMHLABAr4A9VzuNKFaO4EDo2GSCMoxQm9zsE7eCmEEuaAxtNhOUdd-Wvj64vqBBVl84XB1Yg7X9wBg
      required:
        - ciphertext
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: The value that was provided
              msg:
                type: string
                example: Invalid value
                description: Description of why the request is invalid
              param:
                type: string
                example: id
                description: The parameter that is invalid
              location:
                type: string
                example: body
                description: The location in either body, query, path or params
      title: ErrorResponse
    VerifyRequest:
      type: object
      properties:
        jws:
          type: string
          description: JWS (JSON Web Siganture) in its compact form.
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      title: VerifyRequest
    VerifyMessageResponse:
      type: object
      properties:
        didUrl:
          type: string
          description: The `didUrl` included in the JWS (JSON Web Signature) object.
          example: did:web:organization.com#2vcj3MjR4d
        did:
          type: string
          description: The DID URI parsed from the `didUrl`.
          example: did:web:organization.com
        verified:
          type: boolean
          description: Verification result.
          example: true
        payload:
          oneOf:
            - type: string
            - type: object
          description: The payload of the verified message
      title: VerifyMessageResponse
    EncryptMessageRequest:
      title: EncryptMessageRequest
      type: object
      properties:
        senderDidUrl:
          type: string
          description: >-
            The sender's DID URL, obtained from the `id` field of the first
            `keyAgreement` entry of its DID document
            (`DID.localMetadata.initialDidDocument.keyAgreement[0].id`). This
            must reference a key that supports key agreement.
        recipientDidUrls:
          type: array
          description: The intended recepient's Subject DID.
          items:
            type: string
        payload:
          type: object
          description: The message to be encrypted.
      required:
        - senderDidUrl
        - recipientDidUrls
        - payload
    EncryptedMessage:
      title: EncryptedMessage
      type: object
      properties:
        jwe:
          type: object
          description: The encrypted message in JWM format.
          properties:
            protected:
              type: string
              minLength: 1
            recipients:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                required:
                  - encryption_key
                properties:
                  header:
                    type: object
                    properties:
                      alg:
                        type: string
                        minLength: 1
                      kid:
                        type: string
                        minLength: 1
                      epk:
                        type: object
                        properties:
                          kty:
                            type: string
                            minLength: 1
                          crv:
                            type: string
                            minLength: 1
                          x:
                            type: string
                            minLength: 1
                        required:
                          - kty
                          - crv
                          - x
                      skid:
                        type: string
                        minLength: 1
                    required:
                      - alg
                      - kid
                      - epk
                      - skid
                  encryption_key:
                    type: string
                    minLength: 1
            ciphertext:
              type: string
              minLength: 1
            iv:
              type: string
              minLength: 1
            tag:
              type: string
              minLength: 1
          required:
            - protected
            - recipients
            - ciphertext
            - iv
            - tag
      required:
        - jwe
    DecryptMessageRequest:
      title: DecryptMessageRequest
      type: object
      properties:
        jwe:
          description: >-
            The `jwe` object to be decrypted. It can be extracted from the `jwe`
            attribute of the response body you get when [encrypting a
            message](#operation/encryptMessage).

            Alternatively, you can use a `jwe string` using `Base64` encoding
            method and following the [JWE
            open-standard](https://datatracker.ietf.org/doc/rfc7516/):

            `BASE64URL(UTF8(JWE Protected Header)) || '.' || BASE64URL(JWE
            Encrypted Key) || '.' || BASE64URL(JWE Initialization Vector) || '.'
            || BASE64URL(JWE Ciphertext) || '.' || ASE64URL(JWE Authentication
            Tag)`
          oneOf:
            - type: string
              example: >-
                eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDp3ZWI6bWF0dHIuZ2xvYmFsI0V5MkN2V2N5MzQifQ.eyJtZXNzYWdlIjoidGVzdCJ9.dMvOGkfbRrjUJL7XYYAp1UxoHlt8J0N5_vRRLpTEHtQ4s8lwnMd0lhg7HiZVfvEyzk54f6J0CgTV5oHzVscdAA
            - title: EncryptedMessage
              type: object
              properties:
                jwe:
                  type: object
                  description: The encrypted message in JWM format.
                  properties:
                    protected:
                      type: string
                      minLength: 1
                    recipients:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        required:
                          - encryption_key
                        properties:
                          header:
                            type: object
                            properties:
                              alg:
                                type: string
                                minLength: 1
                              kid:
                                type: string
                                minLength: 1
                              epk:
                                type: object
                                properties:
                                  kty:
                                    type: string
                                    minLength: 1
                                  crv:
                                    type: string
                                    minLength: 1
                                  x:
                                    type: string
                                    minLength: 1
                                required:
                                  - kty
                                  - crv
                                  - x
                              skid:
                                type: string
                                minLength: 1
                            required:
                              - alg
                              - kid
                              - epk
                              - skid
                          encryption_key:
                            type: string
                            minLength: 1
                    ciphertext:
                      type: string
                      minLength: 1
                    iv:
                      type: string
                      minLength: 1
                    tag:
                      type: string
                      minLength: 1
                  required:
                    - protected
                    - recipients
                    - ciphertext
                    - iv
                    - tag
              required:
                - jwe
      required:
        - jwe
    DecryptMessageResponse:
      type: object
      properties:
        payload:
          oneOf:
            - type: string
            - type: object
        senderDidUrl:
          type: string
          description: Sender DID retrieved from the decrypted message.
          example: did:web:organization.com#2vcj3MjR4d
        senderPublicJwk:
          type: object
          description: >-
            The sender public JWK (JSON Web Key) retrieved from the decrypted
            message.
        recipientDidUrl:
          type: string
          description: Intended recipient DID URI retrieved from the decrypted message.
          example: did:key:z6MkgmEkNM32vyFeMXcQA7AfQDznu47qHCZpy2AYH2Dtdu1d
      title: DecryptMessageResponse
    SendMessageRequest:
      type: object
      properties:
        to:
          type: string
          description: Recipient DID.
        message:
          oneOf:
            - type: string
            - type: object
          description: >-
            Message in JWE (JSON Web Encryption) format. This endpoint only
            accepts Encrypted payloads to ensure that messages are
            encrypted-at-rest whilst in messaging inboxes. The message should be
            encrypted for the recipient based on a key available in the DID
            Document.
      title: SendMessageRequest
    MessagingInbox:
      title: MessagingInbox
      type: object
      properties:
        id:
          type: string
          example: f04faabf-cea8-4f39-95b3-0ce357ac4d03
        name:
          type: string
          example: My_Inbox
      required:
        - id
        - name
    MessagingInboxDIDs:
      title: MessagingInboxDIDs
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
        data:
          type: array
          description: Array of DIDs which are registered with this inbox.
          example:
            - did:key:did1
            - did:key:did2
            - did:key:did3
          items:
            type: string
    MessageInboxMessage:
      title: MessageInboxMessage
      type: object
      properties:
        name:
          type: string
          description: Message name.
        createdAt:
          type: string
          format: date
          description: Message creation date.
        id:
          type: string
          description: Unique identifier of this message.
        inboxId:
          type: string
          description: Unique identifier of the inbox this message is held in.
        payload:
          type: string
          description: Message payload.
      required:
        - name
        - createdAt
    CustomDomainResponse:
      type: object
      properties:
        name:
          type: string
          example: Example Corp
        logoUrl:
          type: string
          example: https://cdn.example.com/logo.icon
        domain:
          type: string
          example: example.com
        verificationToken:
          type: string
          description: >-
            This value must be added to your domain DNS entry TXT record. Refer
            to [Verify domain
            ownership](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
            for more information.
          example: 8c6f36c1-91ff-439d-a518-48cf7ef421ef
        isVerified:
          type: boolean
          description: >-
            This will indicate `false` until the domain has been
            [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
            MATTR VII will only use the custom domain after it has been
            [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership)
            and this field indicates `true`.
          example: false
        verifiedAt:
          type:
            - string
            - null
          description: >-
            Indicates when the custom domain was
            [verified](https://learn.mattr.global/tutorials/tenant-management/custom-domain/verify-domain-ownership).
            This field is only included in the response when `isVerified` is
            `true`.
      required:
        - name
        - logoUrl
        - domain
        - verificationToken
        - isVerified
      title: CustomDomainResponse
    CreateCustomDomain:
      type: object
      title: CreateCustomDomain
      description: ''
      properties:
        name:
          type: string
          description: >-
            Insert a name for the custom domain that will be displayed to
            digital wallet holders when they receive credential offers or
            verification requests from this tenant.
        logoUrl:
          type: string
          description: >-
            Insert a URL for a square logo that will be displayed to digital
            wallet holders when they receive credential offers or verification
            requests from your MATTR VII tenant:

            * URL must be publicly available.

            * Must be a square image, recommended 64x64 px in size

            * **png** and **jpg** files are supported.

            * The recommended maximum size is 15 KB.
        domain:
          type: string
          description: >-
            Insert the full custom domain, leaving out the protocol (e.g.
            https://).
      required:
        - name
        - logoUrl
        - domain
    UpdateCustomDomain:
      title: UpdateCustomDomain
      allOf:
        - type: object
          properties:
            id:
              type: string
        - type: object
          title: CreateCustomDomain
          description: ''
          properties:
            name:
              type: string
              description: >-
                Insert a name for the custom domain that will be displayed to
                digital wallet holders when they receive credential offers or
                verification requests from this tenant.
            logoUrl:
              type: string
              description: >-
                Insert a URL for a square logo that will be displayed to digital
                wallet holders when they receive credential offers or
                verification requests from your MATTR VII tenant:

                * URL must be publicly available.

                * Must be a square image, recommended 64x64 px in size

                * **png** and **jpg** files are supported.

                * The recommended maximum size is 15 KB.
            domain:
              type: string
              description: >-
                Insert the full custom domain, leaving out the protocol (e.g.
                https://).
          required:
            - name
            - logoUrl
            - domain
    DidMetadataKey:
      type: object
      properties:
        kmsKeyId:
          type: string
          description: Unique identifier of this key in the Key Management System (KMS)
          example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
        didDocumentKeyId:
          type: string
          description: Unique identifier of this key in the DID document.
          example: >-
            did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
      title: DidMetadataKey
    DidDocument:
      type: object
      title: did
      description: DID URI.
    DidMetadata:
      type: object
      required:
        - keys
      properties:
        registered:
          type: number
          description: Timestamp of when the DID was registered (Epoch Unix timestamp).
          example: 1583233799656
        keys:
          type: array
          description: >-
            An array of keys that describe the relationship between keys listed
            in the DID document and keys that exist in a connected Key
            Management System (KMS).
          items:
            type: object
            properties:
              kmsKeyId:
                type: string
                description: >-
                  Unique identifier of this key in the Key Management System
                  (KMS)
                example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
              didDocumentKeyId:
                type: string
                description: Unique identifier of this key in the DID document.
                example: >-
                  did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
            title: DidMetadataKey
        initialDidDocument:
          type: object
          description: The DID document that this DID URI should resolve to.
          items:
            type: object
            title: did
            description: DID URI.
      title: DidMetadata
    GetDidsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            type: object
            required:
              - did
              - localMetadata
            properties:
              did:
                type: string
                example: did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr
              localMetadata:
                type: object
                required:
                  - keys
                properties:
                  registered:
                    type: number
                    description: >-
                      Timestamp of when the DID was registered (Epoch Unix
                      timestamp).
                    example: 1583233799656
                  keys:
                    type: array
                    description: >-
                      An array of keys that describe the relationship between
                      keys listed in the DID document and keys that exist in a
                      connected Key Management System (KMS).
                    items:
                      type: object
                      properties:
                        kmsKeyId:
                          type: string
                          description: >-
                            Unique identifier of this key in the Key Management
                            System (KMS)
                          example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
                        didDocumentKeyId:
                          type: string
                          description: Unique identifier of this key in the DID document.
                          example: >-
                            did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
                      title: DidMetadataKey
                  initialDidDocument:
                    type: object
                    description: The DID document that this DID URI should resolve to.
                    items:
                      type: object
                      title: did
                      description: DID URI.
                title: DidMetadata
      title: GetDidsResponse
    CreateDidDocument:
      type: object
      properties:
        method:
          type: string
          description: >-
            Used to determine the type of DID to be created based on its [DID
            method](https://learn.mattr.global/docs/vii-platform/dids/structure).
          enum:
            - key
            - web
        options:
          type: object
          description: To define a key type for a did:key or to define a domain for did:web
          minItems: 1
          properties:
            keyType:
              type: string
              description: >-
                Define the key types that will be generated for the created DID:

                - Supported `keyType` for `did:key` are `Ed25519` and
                `Bls12381G2`.

                - If `keyType` is omitted, the default keyType is `Ed25519`.
                This keytype can be used as a Verifier DID.

                - If `keyType` is set to `Bls12381G2` the created DID supports
                BBS+ signatures for creating selective-disclosure enabled
                credentials.

                - As `did:key` only support `Ed25519` or `Bls12381G2` key types,
                you can only use it to create Web Credentials. If you wish to
                create Compact Credentials, create a DID using a keyType of
                `P-256`, such as `did:web`.

                - The `Bls12381G2` key type cannot be used as a Verifier DID as
                it does not support symmetric key signing required to verify
                messages.


                Note that keyType is only required for `did:key`, as `did:web`s
                are automatically created with multiple key types by default:

                - P-256: This is the default option for signing Compact
                Credentials.

                - Bls12381G2Key2020: This is the default option for signing Web
                Credentials. It supports selective-disclosure and key rotation.

                - Ed25519: Recommended when the `web:did` is used as a Verifier
                DID, as it supports symmetric key signing required for verifying
                messages.
              example: Bls12381G2
            url:
              type: string
              description: >-
                Define the domain that will host the DID document. This would
                likely be your tenant's URL. Refer to our [hosting
                tutorial](https://learn.mattr.global/tutorials/dids/did-web/hosting)
                for more information about hosting your `did:web`, and to our
                [did:web for Custom domains
                tutorial](https://learn.mattr.global/tutorials/dids/did-web/custom-domain)
                if you are planning to setup a custom domain for your tenant.
              example: learn.vii.au01.mattr.global
      required:
        - method
      description: ''
      title: CreateDidDocument
    CreateDidResponse:
      type: object
      properties:
        registrationStatus:
          type: string
          example: COMPLETED
          description: >-
            This status will update from PROCESSING to COMPLETED once publicly
            resolvable. For `did:web` this  means the DID document must be
            available on the `url` defined when it was created.
        did:
          type: string
          example: did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr
          description: DID URI.
        metadata:
          type: object
          required:
            - keys
          properties:
            registered:
              type: number
              description: Timestamp of when the DID was registered (Epoch Unix timestamp).
              example: 1583233799656
            keys:
              type: array
              description: >-
                An array of keys that describe the relationship between keys
                listed in the DID document and keys that exist in a connected
                Key Management System (KMS).
              items:
                type: object
                properties:
                  kmsKeyId:
                    type: string
                    description: >-
                      Unique identifier of this key in the Key Management System
                      (KMS)
                    example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
                  didDocumentKeyId:
                    type: string
                    description: Unique identifier of this key in the DID document.
                    example: >-
                      did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
                title: DidMetadataKey
            initialDidDocument:
              type: object
              description: The DID document that this DID URI should resolve to.
              items:
                type: object
                title: did
                description: DID URI.
          title: DidMetadata
      title: CreateDidResponse
    GetDidResponse:
      type: object
      properties:
        did:
          type: object
          title: did
          description: DID URI.
        registrationStatus:
          type: string
          description: >-
            This status will update from `PROCESSING` to `COMPLETED` once
            publicly resolvable. For `did:web` this means the DID document must
            be available on the url defined when it was created.
        localMetadata:
          type: object
          required:
            - keys
          properties:
            registered:
              type: number
              description: Timestamp of when the DID was registered (Epoch Unix timestamp).
              example: 1583233799656
            keys:
              type: array
              description: >-
                An array of keys that describe the relationship between keys
                listed in the DID document and keys that exist in a connected
                Key Management System (KMS).
              items:
                type: object
                properties:
                  kmsKeyId:
                    type: string
                    description: >-
                      Unique identifier of this key in the Key Management System
                      (KMS)
                    example: ad8facc7-e7f6-4af6-9baa-2f7abd71c928
                  didDocumentKeyId:
                    type: string
                    description: Unique identifier of this key in the DID document.
                    example: >-
                      did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH#z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH
                title: DidMetadataKey
            initialDidDocument:
              type: object
              description: The DID document that this DID URI should resolve to.
              items:
                type: object
                title: did
                description: DID URI.
          title: DidMetadata
      title: GetDidResponse
    CredentialStatus:
      type: object
      description: Credential status location information
      properties:
        id:
          type: string
          description: Unique ID for the credential status
          example: >-
            https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
        type:
          type: string
          description: Indicates that the status contains revocation information
          example: RevocationList2020Status
        revocationListIndex:
          type: integer
          example: 1
          description: The location within the revocation list for the credential
        revocationListCredential:
          type: string
          description: The location of the revocation list
          example: >-
            https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
      title: CredentialStatus
    ED25519Signature2018:
      type: object
      properties:
        type:
          type: string
          example: Ed25519Signature2018
        created:
          type: string
          format: date-time
          example: '2020-05-02T12:06:29Z'
        jws:
          type: string
          description: Compact form of JWS
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        proofPurpose:
          type: string
          example: assertionMethod
        verificationMethod:
          type: string
          example: did:web:organization.com
      title: ED25519Signature2018
    VerifiableCredential:
      type: object
      properties:
        '@context':
          type: array
          example:
            - https://www.w3.org/2018/credentials/v1
            - https://www.w3.org/2018/credentials/examples/v1
          items:
            type: string
            minLength: 1
            example: >-
              "https://www.w3.org/2018/credentials/v1",
              "https://www.w3.org/2018/credentials/examples/v1"
        type:
          type: array
          example:
            - VerifiableCredential
            - AlumniCredential
          items:
            type: string
            minLength: 1
            example: '"AlumniCredential", "VerifiableCredential"'
        issuer:
          description: >-
            Includes Issuer id (DID), domain name and optional branding
            properties.
          oneOf:
            - type: object
              properties:
                id:
                  type: string
                  example: did:web:organization.com
                name:
                  type: string
                  example: Example University
                logoUrl:
                  type: string
                  example: https://example.edu/img/logo.png
                  description: >-
                    The location of the logo image. The supported formats are
                    jpg, png, and svg.
                iconUrl:
                  type: string
                  example: https://example.edu/img/icon.png
                  description: >-
                    The location of the icon image. The supported formats are
                    jpg, png, and svg.
            - type: string
        credentialBranding:
          type: object
          description: Includes optional credential branding properties.
          properties:
            backgroundColor:
              type: string
              example: '#B00AA0'
              description: >-
                The background colour used for the credential card. The format
                is "#rrggbb" where "rrggbb" is a hex RGB triplet, such as
                "#FFCC00".
            watermarkImageUrl:
              type: string
              example: https://example.edu/img/watermark.png
              description: >-
                The location of the watermark image. The supported formats are
                jpg, png, and svg.
        issuanceDate:
          type: string
          format: date-time
          example: '2020-05-02T12:06:29.156Z'
        credentialStatus:
          type: object
          description: Credential status location information
          properties:
            id:
              type: string
              description: Unique ID for the credential status
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
            type:
              type: string
              description: Indicates that the status contains revocation information
              example: RevocationList2020Status
            revocationListIndex:
              type: integer
              example: 1
              description: The location within the revocation list for the credential
            revocationListCredential:
              type: string
              description: The location of the revocation list
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
          title: CredentialStatus
        credentialSubject:
          type: object
          example:
            givenName: Jamie
            familyName: Doe
            alumniOf: Example University
          properties:
            givenName:
              type: string
              example: Jamie
            familyName:
              type: string
              example: Doe
            alumniOf:
              type: string
              example: Example University
        proof:
          type: object
          properties:
            type:
              type: string
              example: Ed25519Signature2018
            created:
              type: string
              format: date-time
              example: '2020-05-02T12:06:29Z'
            jws:
              type: string
              description: Compact form of JWS
              example: >-
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            proofPurpose:
              type: string
              example: assertionMethod
            verificationMethod:
              type: string
              example: did:web:organization.com
          title: ED25519Signature2018
        name:
          type: string
          example: Alumni Credential
          description: Name of the credential (requires v2 data model)
        description:
          type: string
          example: >-
            This credential shows that the person has attended the mentioned
            university.
          description: Description of the credential (requires v2 data model)
      required:
        - '@context'
        - type
        - issuanceDate
        - credentialSubject
        - proof
      title: VerifiableCredential
    GetDidConfigJsonldResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            type: object
            properties:
              '@context':
                type: array
                example:
                  - https://www.w3.org/2018/credentials/v1
                  - https://www.w3.org/2018/credentials/examples/v1
                items:
                  type: string
                  minLength: 1
                  example: >-
                    "https://www.w3.org/2018/credentials/v1",
                    "https://www.w3.org/2018/credentials/examples/v1"
              type:
                type: array
                example:
                  - VerifiableCredential
                  - AlumniCredential
                items:
                  type: string
                  minLength: 1
                  example: '"AlumniCredential", "VerifiableCredential"'
              issuer:
                description: >-
                  Includes Issuer id (DID), domain name and optional branding
                  properties.
                oneOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        example: did:web:organization.com
                      name:
                        type: string
                        example: Example University
                      logoUrl:
                        type: string
                        example: https://example.edu/img/logo.png
                        description: >-
                          The location of the logo image. The supported formats
                          are jpg, png, and svg.
                      iconUrl:
                        type: string
                        example: https://example.edu/img/icon.png
                        description: >-
                          The location of the icon image. The supported formats
                          are jpg, png, and svg.
                  - type: string
              credentialBranding:
                type: object
                description: Includes optional credential branding properties.
                properties:
                  backgroundColor:
                    type: string
                    example: '#B00AA0'
                    description: >-
                      The background colour used for the credential card. The
                      format is "#rrggbb" where "rrggbb" is a hex RGB triplet,
                      such as "#FFCC00".
                  watermarkImageUrl:
                    type: string
                    example: https://example.edu/img/watermark.png
                    description: >-
                      The location of the watermark image. The supported formats
                      are jpg, png, and svg.
              issuanceDate:
                type: string
                format: date-time
                example: '2020-05-02T12:06:29.156Z'
              credentialStatus:
                type: object
                description: Credential status location information
                properties:
                  id:
                    type: string
                    description: Unique ID for the credential status
                    example: >-
                      https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                  type:
                    type: string
                    description: Indicates that the status contains revocation information
                    example: RevocationList2020Status
                  revocationListIndex:
                    type: integer
                    example: 1
                    description: The location within the revocation list for the credential
                  revocationListCredential:
                    type: string
                    description: The location of the revocation list
                    example: >-
                      https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                title: CredentialStatus
              credentialSubject:
                type: object
                example:
                  givenName: Jamie
                  familyName: Doe
                  alumniOf: Example University
                properties:
                  givenName:
                    type: string
                    example: Jamie
                  familyName:
                    type: string
                    example: Doe
                  alumniOf:
                    type: string
                    example: Example University
              proof:
                type: object
                properties:
                  type:
                    type: string
                    example: Ed25519Signature2018
                  created:
                    type: string
                    format: date-time
                    example: '2020-05-02T12:06:29Z'
                  jws:
                    type: string
                    description: Compact form of JWS
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  proofPurpose:
                    type: string
                    example: assertionMethod
                  verificationMethod:
                    type: string
                    example: did:web:organization.com
                title: ED25519Signature2018
              name:
                type: string
                example: Alumni Credential
                description: Name of the credential (requires v2 data model)
              description:
                type: string
                example: >-
                  This credential shows that the person has attended the
                  mentioned university.
                description: Description of the credential (requires v2 data model)
            required:
              - '@context'
              - type
              - issuanceDate
              - credentialSubject
              - proof
            title: VerifiableCredential
      title: GetDidConfigJsonldResponse
    Ecosystem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
        name:
          type: string
          description: The name of the ecosystem.
          minLength: 1
          maxLength: 50
          example: My Ecosystem
    NextCursor:
      type: string
      example: >-
        Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
      description: Starting point for next cursor to use in a page
    name:
      type: string
      description: The name of the ecosystem.
      minLength: 1
      maxLength: 50
      example: My Ecosystem
    id:
      type: string
      format: uuid
      description: The UUID of the ecosystem.
      example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
      readOnly: true
    CredentialProfile:
      type: string
      enum:
        - compact
        - compact-semantic
        - web-semantic
    Credential:
      type: object
      required:
        - id
        - ecosystemId
        - profile
        - type
        - name
      properties:
        id:
          type: string
          format: uuid
          example: 599bf148-d711-405a-a20b-9c8a87ac8850
          description: Unique identifier for this credential type.
          readOnly: true
        ecosystemId:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
        profile:
          type: string
          enum:
            - compact
            - compact-semantic
            - web-semantic
        type:
          type: string
          example: DriverLicence
        name:
          type: string
          description: The name of the credential
          minLength: 1
          maxLength: 50
          example: Driver's Licence
    Participant:
      required:
        - id
        - ecosystemId
        - name
        - identifiers
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the participant.
          example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
          readOnly: true
        ecosystemId:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
        name:
          type: string
          description: Name to easily identify the participant.
          minLength: 1
          maxLength: 50
          example: My Participant
        identifiers:
          type: object
          description: >-
            Define the unique identifier that will be used by this participant
            to issue and/or verify credentials. Participants can have different
            identifiers for different credential profiles. Each participant must
            have at least one defined credential profile, and for each
            credential profile a participant can define exactly one unique
            identifier.

            - Credentials are only valid in the ecosystem if they include an
            identifier of an issuer that is a participant in the ecosystem.

            - Verification requests are only valid in the ecosystem if they
            include an identifier of a verifier that is a participant in the
            ecosystem.

            - For Mobile Credentials this must be the PEM of a valid
            [IACA](#operation/create-mobile-credential-iaca) used by this
            participant to sign Mobile Credentials, as defined in annex B of
            [ISO 18013-5](https://www.iso.org/standard/69084.html). An exception
            to this aforementioned definition is that IACAs with a `notBefore`
            date in the future are considered valid.
          additionalProperties:
            type: object
            properties:
              web-semantic:
                type: string
              compact-semantic:
                type: string
              compact:
                type: string
              mobile:
                type: array
                items:
                  type: string
          example:
            web-semantic: did:web:example.com
            compact-semantic: did:web:example.com
            compact: did:web:example.com
            mobile:
              - >-
                -----BEGIN
                CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                CERTIFICATE-----\r\n
        isIssuer:
          type: boolean
          description: >-
            Indicates whether the participant is an issuer in the ecosystem
            (`true`) or not (`false`). When set to `false`, the participant will
            not be able to issue any valid credential types, even if it is added
            to an issuer policy. The default value is `false`, as this assigns
            the least privileges to the new participant.
          default: false
          example: false
        isVerifier:
          type: boolean
          description: >-
            Indicates whether the created participant is a verifier in the
            ecosystem (`true`) or not (`false`). When set to `false`, the
            participant will not be able to verify any valid credential types,
            even if it is added to a verifier policy. The default value is
            `false`, as this assigns the least privileges to the new
            participant.
          default: false
          example: false
        isIssuerConstrained:
          type: boolean
          description: >-
            Indicates whether the created participant is constrained to only
            issue specific types of valid credentials (`true`) or not (`false`).
            When set to `false`, the issuer can issue all valid credential types
            defined within the ecosystem, even if it is added to a more limited
            issuer policy. The default value is `true`, as this assigns the
            least privileges to the new participant.
          default: true
          example: true
        isVerifierConstrained:
          type: boolean
          description: >-
            Indicates whether the created participant is constrained to only
            verify specific types of valid credentials (`true`) or not
            (`false`). When set to `false`, the verifier can verify all valid
            credential types defined within the ecosystem, even if it is added
            to a more limited verifier policy. The default value is `true`, as
            this assigns the least privileges to the new participant.
          default: true
          example: true
    EcosystemPolicy:
      type: object
      properties:
        policyModifiedAt:
          description: The timestamp when the ecosystem policy was last modified.
          type: string
          format: date-time
          example: '2023-10-17T00:00:00Z'
        credentials:
          description: A list of credentials associated with the ecosystem policy.
          type: array
          items:
            type: object
            required:
              - id
              - ecosystemId
              - profile
              - type
              - name
            properties:
              id:
                type: string
                format: uuid
                example: 599bf148-d711-405a-a20b-9c8a87ac8850
                description: Unique identifier for this credential type.
                readOnly: true
              ecosystemId:
                type: string
                format: uuid
                description: The UUID of the ecosystem.
                example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                readOnly: true
              profile:
                type: string
                enum:
                  - compact
                  - compact-semantic
                  - web-semantic
              type:
                type: string
                example: DriverLicence
              name:
                type: string
                description: The name of the credential
                minLength: 1
                maxLength: 50
                example: Driver's Licence
        participants:
          description: A list of participants associated with the ecosystem policy.
          type: array
          items:
            allOf:
              - required:
                  - id
                  - ecosystemId
                  - name
                  - identifiers
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The UUID of the participant.
                    example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
                    readOnly: true
                  ecosystemId:
                    type: string
                    format: uuid
                    description: The UUID of the ecosystem.
                    example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
                    readOnly: true
                  name:
                    type: string
                    description: Name to easily identify the participant.
                    minLength: 1
                    maxLength: 50
                    example: My Participant
                  identifiers:
                    type: object
                    description: >-
                      Define the unique identifier that will be used by this
                      participant to issue and/or verify credentials.
                      Participants can have different identifiers for different
                      credential profiles. Each participant must have at least
                      one defined credential profile, and for each credential
                      profile a participant can define exactly one unique
                      identifier.

                      - Credentials are only valid in the ecosystem if they
                      include an identifier of an issuer that is a participant
                      in the ecosystem.

                      - Verification requests are only valid in the ecosystem if
                      they include an identifier of a verifier that is a
                      participant in the ecosystem.

                      - For Mobile Credentials this must be the PEM of a valid
                      [IACA](#operation/create-mobile-credential-iaca) used by
                      this participant to sign Mobile Credentials, as defined in
                      annex B of [ISO
                      18013-5](https://www.iso.org/standard/69084.html). An
                      exception to this aforementioned definition is that IACAs
                      with a `notBefore` date in the future are considered
                      valid.
                    additionalProperties:
                      type: object
                      properties:
                        web-semantic:
                          type: string
                        compact-semantic:
                          type: string
                        compact:
                          type: string
                        mobile:
                          type: array
                          items:
                            type: string
                    example:
                      web-semantic: did:web:example.com
                      compact-semantic: did:web:example.com
                      compact: did:web:example.com
                      mobile:
                        - >-
                          -----BEGIN
                          CERTIFICATE-----\r\nMIIBwzCCAWigAwIBAgIKRGC+CqoTGJKkkTAKBggqhkjOPQQDAjAgMR4wCQYDVQQG\r\nEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwHhcNMjMwODA4MDAwOTIxWhcNMzMwODA1\r\nMDAwOTIxWjAgMR4wCQYDVQQGEwJOWjARBgNVBAMTCk1BVFRSIElBQ0EwWTATBgcq\r\nhkjOPQIBBggqhkjOPQMBBwNCAASRu69fzdgM4odkyPtRcZd3eGWCw4BB7StZNGRm\r\nuIlrraUyv9SWPHgUYjYmRB1g7ERzj/pOSAspk71Y+QA+j9nPo4GJMIGGMBIGA1Ud\r\nEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgAGMB0GA1UdDgQWBBSONcHGh4If\r\nO1dYorRpsuFrs+f8SDAcBgNVHRIEFTATgRFpbmZvQG1hdHRyLmdsb2JhbDAjBgNV\r\nHR8EHDAaMBiiFoYUaHR0cHM6Ly9tYXR0ci5nbG9iYWwwCgYIKoZIzj0EAwIDSQAw\r\nRgIhAPKJIGDSvp7VxRBLCWWeghqi8UUeO+dZsC49TUZcDMNxAiEAoh+7dT+l+GzX\r\nk0J2SoGmPiagrbAuIYyTHwzZZuYr1W4=\r\n-----END
                          CERTIFICATE-----\r\n
                  isIssuer:
                    type: boolean
                    description: >-
                      Indicates whether the participant is an issuer in the
                      ecosystem (`true`) or not (`false`). When set to `false`,
                      the participant will not be able to issue any valid
                      credential types, even if it is added to an issuer policy.
                      The default value is `false`, as this assigns the least
                      privileges to the new participant.
                    default: false
                    example: false
                  isVerifier:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is a verifier in
                      the ecosystem (`true`) or not (`false`). When set to
                      `false`, the participant will not be able to verify any
                      valid credential types, even if it is added to a verifier
                      policy. The default value is `false`, as this assigns the
                      least privileges to the new participant.
                    default: false
                    example: false
                  isIssuerConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only issue specific types of valid credentials (`true`)
                      or not (`false`). When set to `false`, the issuer can
                      issue all valid credential types defined within the
                      ecosystem, even if it is added to a more limited issuer
                      policy. The default value is `true`, as this assigns the
                      least privileges to the new participant.
                    default: true
                    example: true
                  isVerifierConstrained:
                    type: boolean
                    description: >-
                      Indicates whether the created participant is constrained
                      to only verify specific types of valid credentials
                      (`true`) or not (`false`). When set to `false`, the
                      verifier can verify all valid credential types defined
                      within the ecosystem, even if it is added to a more
                      limited verifier policy. The default value is `true`, as
                      this assigns the least privileges to the new participant.
                    default: true
                    example: true
              - type: object
                properties:
                  issuerAllowedCredentials:
                    description: >-
                      A list of credentials that can be validly issued within
                      the ecosystem.
                    type: array
                    items:
                      type: string
                      format: uuid
                    example:
                      - e0a07846-44e1-41a4-b704-1ccf6eb1a5af
                      - 25fa6ffc-bf6e-417c-865c-96fcf1d7d1a3
                  verifierAllowedCredentials:
                    description: >-
                      A list of credentials that can be validly verified within
                      the ecosystem.
                    type: array
                    items:
                      type: string
                      format: uuid
                    example:
                      - 4e25a240-76bb-4e9f-9f93-b93be287922b
                      - daca4a43-3ff9-4ecb-93fe-d9104e36bf74
      required:
        - policyModifiedAt
        - credentials
        - participants
    properties-id:
      type: string
      format: uuid
      description: The UUID of the participant.
      example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
      readOnly: true
    CredentialProfileMobile:
      type: string
      example: mobile
    CredentialMobile:
      type: object
      required:
        - id
        - ecosystemId
        - profile
        - docType
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 49b6beb2-1006-4fb7-9284-7ec920475abe
        ecosystemId:
          type: string
          format: uuid
          description: The UUID of the ecosystem.
          example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
          readOnly: true
        profile:
          type: string
          example: mobile
        docType:
          type: string
          example: org.iso.18013.5.1
        name:
          type: string
          description: The name of the credential
          minLength: 1
          maxLength: 50
          example: Driver's Licence
    Credential-properties-id:
      type: string
      format: uuid
      example: 599bf148-d711-405a-a20b-9c8a87ac8850
      description: Unique identifier for this credential type.
      readOnly: true
    CompactCredentialSignRequest:
      title: CompactCredentialSignRequest
      type: object
      description: CompactCredentialSignRequest
      required:
        - iss
      additionalProperties:
        example: ...
        oneOf:
          - type: string
          - type: number
          - type: boolean
      properties:
        iss:
          type: string
          example: did:web:organization.com
          description: >-
            Use the DID that identifies the credential's issuer, which attests
            the claims in the credential. This must be a publicly available and
            resolvable `did:web` for the credential to be valid and verifiable.
        nbf:
          type: number
          example: 1645743759
          description: >-
            Not before. When set, credential verification will fail if the
            current time is earlier than the `nbf` value, expressed as a Unix
            timestamp.
        exp:
          type: number
          example: 1646743759
          description: >-
            Expiry. When set, credential verification will fail if the current
            time is later than the `exp` value, expressed as a Unix timestamp.
        iat:
          type: number
          example: 1645743759
          description: >-
            Issued at, indicates credential issuance timestamp, expressed as a
            Unix timestamp.
        aud:
          type: string
          description: Audience.
        sub:
          type: string
          description: Subject.
        type:
          type: string
    SignCompactCredentialRequest:
      title: SignCompactCredentialRequest
      type: object
      required:
        - payload
      properties:
        payload:
          title: CompactCredentialSignRequest
          type: object
          description: CompactCredentialSignRequest
          required:
            - iss
          additionalProperties:
            example: ...
            oneOf:
              - type: string
              - type: number
              - type: boolean
          properties:
            iss:
              type: string
              example: did:web:organization.com
              description: >-
                Use the DID that identifies the credential's issuer, which
                attests the claims in the credential. This must be a publicly
                available and resolvable `did:web` for the credential to be
                valid and verifiable.
            nbf:
              type: number
              example: 1645743759
              description: >-
                Not before. When set, credential verification will fail if the
                current time is earlier than the `nbf` value, expressed as a
                Unix timestamp.
            exp:
              type: number
              example: 1646743759
              description: >-
                Expiry. When set, credential verification will fail if the
                current time is later than the `exp` value, expressed as a Unix
                timestamp.
            iat:
              type: number
              example: 1645743759
              description: >-
                Issued at, indicates credential issuance timestamp, expressed as
                a Unix timestamp.
            aud:
              type: string
              description: Audience.
            sub:
              type: string
              description: Subject.
            type:
              type: string
        revocable:
          type: boolean
          default: false
          description: >-
            When set to `true`, the created credential can later be revoked.
            When set to `false`, the credential cannot be revoked.
      description: Sign Compact Credential Request
    CompactCredentialSignResponse:
      title: CompactCredentialSignResponse
      type: object
      description: CompactCredentialSignResponse
      example:
        iss: did:web:organization.com
        nbf: 1645743759
        exp: 1646743759
        iat: 1645743759
        jti: 6tVMmKodQNaLywW6NGA2aA
        type: CredentialType
        property1: ...
        property2: ...
      required:
        - iss
        - jti
      additionalProperties:
        oneOf:
          - type: string
          - type: number
          - type: boolean
      properties:
        iss:
          type: string
        jti:
          type: string
        nbf:
          type: number
        exp:
          type: number
        iat:
          type: number
        aud:
          type: string
        sub:
          type: string
        type:
          type: string
        status:
          type: object
          properties:
            url:
              type: string
            index:
              type: number
    SignCompactCredentialResponse:
      title: SignCompactCredentialResponse
      type: object
      required:
        - id
        - encoded
        - decoded
      properties:
        id:
          type: string
        encoded:
          type: string
          description: URL Encoded Compact Credential payload
          example: >-
            CSC:/1/2KCE3IQEJB5DCMSLN5KWKZABE2QFQRVDAF4CIZDJMQ5HOZLCHIYDGOJUFUYTENJNGIZTOLJVGIWTCMJQFZXGO4TPNMXGS33ENZQW2ZLEJJXWQ3QH3BAFB3LISHKGQ2KBJ6Q35NXZFD6LGZ2YIAYHZAKCF7NKTIUZUTZQ3PWDBALAWVRG5XL2H4P4WFK25X3Y5X5RTN7NOZUST67KLCEFS3EPXQU5KM7VUGOPXJLQ6K5U676PMQNWRZCZ
        decoded:
          title: CompactCredentialSignResponse
          type: object
          description: CompactCredentialSignResponse
          example:
            iss: did:web:organization.com
            nbf: 1645743759
            exp: 1646743759
            iat: 1645743759
            jti: 6tVMmKodQNaLywW6NGA2aA
            type: CredentialType
            property1: ...
            property2: ...
          required:
            - iss
            - jti
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
          properties:
            iss:
              type: string
            jti:
              type: string
            nbf:
              type: number
            exp:
              type: number
            iat:
              type: number
            aud:
              type: string
            sub:
              type: string
            type:
              type: string
            status:
              type: object
              properties:
                url:
                  type: string
                index:
                  type: number
      description: Sign Compact Credential response
    VerifyCompactCredentialResponse:
      title: VerifyCompactCredentialResponse
      type: object
      description: VerifyCompactCredentialResponse
      properties:
        verified:
          type: boolean
        decoded:
          title: CompactCredentialSignResponse
          type: object
          description: CompactCredentialSignResponse
          example:
            iss: did:web:organization.com
            nbf: 1645743759
            exp: 1646743759
            iat: 1645743759
            jti: 6tVMmKodQNaLywW6NGA2aA
            type: CredentialType
            property1: ...
            property2: ...
          required:
            - iss
            - jti
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
          properties:
            iss:
              type: string
            jti:
              type: string
            nbf:
              type: number
            exp:
              type: number
            iat:
              type: number
            aud:
              type: string
            sub:
              type: string
            type:
              type: string
            status:
              type: object
              properties:
                url:
                  type: string
                index:
                  type: number
        error:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
            details:
              type: object
          required:
            - type
            - message
      required:
        - verified
        - decoded
    GenerateQrCodeRequest:
      title: GenerateQrCodeRequest
      type: object
      properties:
        payload:
          type: string
          description: String representation of the encoded Compact Credential.
          example: >-
            CSS:/1/2KCE3IQEJB5DCMSMGRKXI3IBE2QFSANKVACBUYQYB2HQKGTCDAHI6BQ2MIMA5DYBPAUWI2L...
        width:
          type: number
          description: >-
            Optionally specify the desired width of the output QR code. When no
            width is specified MATTR VII will generate a QR code with an
            optimised width based on the size of the payload. Maximal value is
            1000px.
          example: 250
      required:
        - payload
    credentialConfigurationClaimMappings:
      type: object
      description: >
        This is where you specify how to map claims (user attributes) into
        issued credentials. Each field in the object corresponds to a claim in
        the issued credential, and contains one or more from the following
        attributes:

        - `mapFrom`: References the path in the user object where the claim is
        available.
          - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
          - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
        - `defaultValue`: Indicates what value is used if required is set to
        `false` (field is optional) and no value is provided by the claims
        source. When `defaultValue` is provided, `mapFrom` is optional.

        - `required`: Indicates whether the claim is required (default:
        `false`). When a required claim cannot be retrieved and no
        `defaultValue` is available, credential issuance will fail.

        **Example source context object**

        ```json

        {
          "claims": {
            "given_name": "Jamie",
            "family_name": "Doe",
            "address": {
              "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
            }
          },
          "authenticationProvider": {
            "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
            "url": "https://accounts.google.com"
          }
        }

        ```
      example:
        firstName:
          mapFrom: claims.given_name
          required: true
        address:
          mapFrom: claims.address.formatted
        picture:
          mapFrom: claims.picture
          defaultValue: http://example.edu/img/placeholder.png
        badge:
          defaultValue: http://example.edu/img/badge.png
        providerSubjectId:
          mapFrom: authenticationProvider.subjectId
      additionalProperties:
        type: object
        properties:
          mapFrom:
            type: string
            description: The path of the property in the source context object.
          required:
            type: boolean
            description: >-
              Indicates whether value of the property must be resolvable. If set
              to true and does not map to a value, issuance will fail.
          defaultValue:
            oneOf:
              - type: string
              - type: number
              - type: boolean
              - type: array
              - type: object
            description: >-
              Default value to be used when unable to resolve from the supplied
              context object. Required when `mapFrom` is not defined.
    CredentialConfiguration:
      type: object
      properties:
        type:
          description: >-
            Used to differentiate between different Compact/Compact Semantic
            credential configurations on your tenant. Thus, its value must:

            - Be unique across all Compact/Semantic compact credential
            configurations on your tenant.

            - Not be VerifiableCredential.
          type: string
          minLength: 1
          maxLength: 1024
          example: CourseCredential
        claimMappings:
          type: object
          description: >
            This is where you specify how to map claims (user attributes) into
            issued credentials. Each field in the object corresponds to a claim
            in the issued credential, and contains one or more from the
            following attributes:

            - `mapFrom`: References the path in the user object where the claim
            is available.
              - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
              - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
            - `defaultValue`: Indicates what value is used if required is set to
            `false` (field is optional) and no value is provided by the claims
            source. When `defaultValue` is provided, `mapFrom` is optional.

            - `required`: Indicates whether the claim is required (default:
            `false`). When a required claim cannot be retrieved and no
            `defaultValue` is available, credential issuance will fail.

            **Example source context object**

            ```json

            {
              "claims": {
                "given_name": "Jamie",
                "family_name": "Doe",
                "address": {
                  "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                }
              },
              "authenticationProvider": {
                "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                "url": "https://accounts.google.com"
              }
            }

            ```
          example:
            firstName:
              mapFrom: claims.given_name
              required: true
            address:
              mapFrom: claims.address.formatted
            picture:
              mapFrom: claims.picture
              defaultValue: http://example.edu/img/placeholder.png
            badge:
              defaultValue: http://example.edu/img/badge.png
            providerSubjectId:
              mapFrom: authenticationProvider.subjectId
          additionalProperties:
            type: object
            properties:
              mapFrom:
                type: string
                description: The path of the property in the source context object.
              required:
                type: boolean
                description: >-
                  Indicates whether value of the property must be resolvable. If
                  set to true and does not map to a value, issuance will fail.
              defaultValue:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: array
                  - type: object
                description: >-
                  Default value to be used when unable to resolve from the
                  supplied context object. Required when `mapFrom` is not
                  defined.
        revocable:
          type: boolean
          default: true
          description: >-
            When set to true (default), the created credential can later be
            revoked. When set to false, the credential cannot be revoked.
        claimSourceId:
          type: string
          format: uuid
          description: >-
            References the unique identifier of a claims source that can be used
            to retrieve claims and include them in the issued credential.
        expiresIn:
          type: object
          description: >-
            Used to determine when will issued credentials expire. Can include
            any combination of `years`, `months`, `weeks`, `days`, `hours`,
            `minutes` and `seconds`.
          properties:
            years:
              type: number
              example: 1
            months:
              type: number
              example: 12
            weeks:
              type: number
              example: 52
            days:
              type: number
              example: 365
            hours:
              type: number
              example: 24
            minutes:
              type: number
              example: 1440
            seconds:
              type: number
              example: 3600
      required:
        - claimMappings
    CredentialConfigurationResponse:
      required:
        - id
        - type
        - revocable
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: >-
                Uniquely identifies this credential configuration. Can be used
                to create an offer based on this credential configuration, or to
                retrieve, update or remove the credential configuration.
              example: 983c0a86-204f-4431-9371-f5a22e506599
        - type: object
          properties:
            type:
              description: >-
                Used to differentiate between different Compact/Compact Semantic
                credential configurations on your tenant. Thus, its value must:

                - Be unique across all Compact/Semantic compact credential
                configurations on your tenant.

                - Not be VerifiableCredential.
              type: string
              minLength: 1
              maxLength: 1024
              example: CourseCredential
            claimMappings:
              type: object
              description: >
                This is where you specify how to map claims (user attributes)
                into issued credentials. Each field in the object corresponds to
                a claim in the issued credential, and contains one or more from
                the following attributes:

                - `mapFrom`: References the path in the user object where the
                claim is available.
                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                - `defaultValue`: Indicates what value is used if required is
                set to `false` (field is optional) and no value is provided by
                the claims source. When `defaultValue` is provided, `mapFrom` is
                optional.

                - `required`: Indicates whether the claim is required (default:
                `false`). When a required claim cannot be retrieved and no
                `defaultValue` is available, credential issuance will fail.

                **Example source context object**

                ```json

                {
                  "claims": {
                    "given_name": "Jamie",
                    "family_name": "Doe",
                    "address": {
                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                    }
                  },
                  "authenticationProvider": {
                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                    "url": "https://accounts.google.com"
                  }
                }

                ```
              example:
                firstName:
                  mapFrom: claims.given_name
                  required: true
                address:
                  mapFrom: claims.address.formatted
                picture:
                  mapFrom: claims.picture
                  defaultValue: http://example.edu/img/placeholder.png
                badge:
                  defaultValue: http://example.edu/img/badge.png
                providerSubjectId:
                  mapFrom: authenticationProvider.subjectId
              additionalProperties:
                type: object
                properties:
                  mapFrom:
                    type: string
                    description: The path of the property in the source context object.
                  required:
                    type: boolean
                    description: >-
                      Indicates whether value of the property must be
                      resolvable. If set to true and does not map to a value,
                      issuance will fail.
                  defaultValue:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: array
                      - type: object
                    description: >-
                      Default value to be used when unable to resolve from the
                      supplied context object. Required when `mapFrom` is not
                      defined.
            revocable:
              type: boolean
              default: true
              description: >-
                When set to true (default), the created credential can later be
                revoked. When set to false, the credential cannot be revoked.
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of `years`, `months`, `weeks`, `days`,
                `hours`, `minutes` and `seconds`.
              properties:
                years:
                  type: number
                  example: 1
                months:
                  type: number
                  example: 12
                weeks:
                  type: number
                  example: 52
                days:
                  type: number
                  example: 365
                hours:
                  type: number
                  example: 24
                minutes:
                  type: number
                  example: 1440
                seconds:
                  type: number
                  example: 3600
          required:
            - claimMappings
      title: CredentialConfigurationResponse
    GetCredentialConfigurationsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            required:
              - id
              - type
              - revocable
            allOf:
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Uniquely identifies this credential configuration. Can be
                      used to create an offer based on this credential
                      configuration, or to retrieve, update or remove the
                      credential configuration.
                    example: 983c0a86-204f-4431-9371-f5a22e506599
              - type: object
                properties:
                  type:
                    description: >-
                      Used to differentiate between different Compact/Compact
                      Semantic credential configurations on your tenant. Thus,
                      its value must:

                      - Be unique across all Compact/Semantic compact credential
                      configurations on your tenant.

                      - Not be VerifiableCredential.
                    type: string
                    minLength: 1
                    maxLength: 1024
                    example: CourseCredential
                  claimMappings:
                    type: object
                    description: >
                      This is where you specify how to map claims (user
                      attributes) into issued credentials. Each field in the
                      object corresponds to a claim in the issued credential,
                      and contains one or more from the following attributes:

                      - `mapFrom`: References the path in the user object where
                      the claim is available.
                        - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                        - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                      - `defaultValue`: Indicates what value is used if required
                      is set to `false` (field is optional) and no value is
                      provided by the claims source. When `defaultValue` is
                      provided, `mapFrom` is optional.

                      - `required`: Indicates whether the claim is required
                      (default: `false`). When a required claim cannot be
                      retrieved and no `defaultValue` is available, credential
                      issuance will fail.

                      **Example source context object**

                      ```json

                      {
                        "claims": {
                          "given_name": "Jamie",
                          "family_name": "Doe",
                          "address": {
                            "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                          }
                        },
                        "authenticationProvider": {
                          "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                          "url": "https://accounts.google.com"
                        }
                      }

                      ```
                    example:
                      firstName:
                        mapFrom: claims.given_name
                        required: true
                      address:
                        mapFrom: claims.address.formatted
                      picture:
                        mapFrom: claims.picture
                        defaultValue: http://example.edu/img/placeholder.png
                      badge:
                        defaultValue: http://example.edu/img/badge.png
                      providerSubjectId:
                        mapFrom: authenticationProvider.subjectId
                    additionalProperties:
                      type: object
                      properties:
                        mapFrom:
                          type: string
                          description: >-
                            The path of the property in the source context
                            object.
                        required:
                          type: boolean
                          description: >-
                            Indicates whether value of the property must be
                            resolvable. If set to true and does not map to a
                            value, issuance will fail.
                        defaultValue:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
                            - type: array
                            - type: object
                          description: >-
                            Default value to be used when unable to resolve from
                            the supplied context object. Required when `mapFrom`
                            is not defined.
                  revocable:
                    type: boolean
                    default: true
                    description: >-
                      When set to true (default), the created credential can
                      later be revoked. When set to false, the credential cannot
                      be revoked.
                  claimSourceId:
                    type: string
                    format: uuid
                    description: >-
                      References the unique identifier of a claims source that
                      can be used to retrieve claims and include them in the
                      issued credential.
                  expiresIn:
                    type: object
                    description: >-
                      Used to determine when will issued credentials expire. Can
                      include any combination of `years`, `months`, `weeks`,
                      `days`, `hours`, `minutes` and `seconds`.
                    properties:
                      years:
                        type: number
                        example: 1
                      months:
                        type: number
                        example: 12
                      weeks:
                        type: number
                        example: 52
                      days:
                        type: number
                        example: 365
                      hours:
                        type: number
                        example: 24
                      minutes:
                        type: number
                        example: 1440
                      seconds:
                        type: number
                        example: 3600
                required:
                  - claimMappings
            title: CredentialConfigurationResponse
      title: GetCredentialConfigurationsResponse
    CredentialConfigurationRequest:
      required:
        - type
      allOf:
        - type: object
          properties:
            type:
              description: >-
                Used to differentiate between different Compact/Compact Semantic
                credential configurations on your tenant. Thus, its value must:

                - Be unique across all Compact/Semantic compact credential
                configurations on your tenant.

                - Not be VerifiableCredential.
              type: string
              minLength: 1
              maxLength: 1024
              example: CourseCredential
            claimMappings:
              type: object
              description: >
                This is where you specify how to map claims (user attributes)
                into issued credentials. Each field in the object corresponds to
                a claim in the issued credential, and contains one or more from
                the following attributes:

                - `mapFrom`: References the path in the user object where the
                claim is available.
                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                - `defaultValue`: Indicates what value is used if required is
                set to `false` (field is optional) and no value is provided by
                the claims source. When `defaultValue` is provided, `mapFrom` is
                optional.

                - `required`: Indicates whether the claim is required (default:
                `false`). When a required claim cannot be retrieved and no
                `defaultValue` is available, credential issuance will fail.

                **Example source context object**

                ```json

                {
                  "claims": {
                    "given_name": "Jamie",
                    "family_name": "Doe",
                    "address": {
                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                    }
                  },
                  "authenticationProvider": {
                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                    "url": "https://accounts.google.com"
                  }
                }

                ```
              example:
                firstName:
                  mapFrom: claims.given_name
                  required: true
                address:
                  mapFrom: claims.address.formatted
                picture:
                  mapFrom: claims.picture
                  defaultValue: http://example.edu/img/placeholder.png
                badge:
                  defaultValue: http://example.edu/img/badge.png
                providerSubjectId:
                  mapFrom: authenticationProvider.subjectId
              additionalProperties:
                type: object
                properties:
                  mapFrom:
                    type: string
                    description: The path of the property in the source context object.
                  required:
                    type: boolean
                    description: >-
                      Indicates whether value of the property must be
                      resolvable. If set to true and does not map to a value,
                      issuance will fail.
                  defaultValue:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: array
                      - type: object
                    description: >-
                      Default value to be used when unable to resolve from the
                      supplied context object. Required when `mapFrom` is not
                      defined.
            revocable:
              type: boolean
              default: true
              description: >-
                When set to true (default), the created credential can later be
                revoked. When set to false, the credential cannot be revoked.
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of `years`, `months`, `weeks`, `days`,
                `hours`, `minutes` and `seconds`.
              properties:
                years:
                  type: number
                  example: 1
                months:
                  type: number
                  example: 12
                weeks:
                  type: number
                  example: 52
                days:
                  type: number
                  example: 365
                hours:
                  type: number
                  example: 24
                minutes:
                  type: number
                  example: 1440
                seconds:
                  type: number
                  example: 3600
          required:
            - claimMappings
      title: CreateCredentialConfigurationRequest
    CompactSemanticCredentialSignRequest:
      title: CompactSemanticCredentialSignRequest
      type: object
      description: CompactSemanticCredentialSignRequest
      required:
        - iss
        - vc
      properties:
        iss:
          type: string
          example: did:web:organization.com
          description: >-
            Use the DID that identifies the credential's issuer, which attests
            the claims in the credential. This must be a publicly available and
            resolvable `did:web` for the credential to be valid and verifiable.
        nbf:
          type: number
          example: 1645743759
          description: >-
            Not before. Credential verification will fail if the current time is
            earlier than the `nbf` value, expressed as a Unix timestamp. `nbf`
            is required by the W3C VC data model. If not provided in the
            request, current time at issuance is used.
        exp:
          type: number
          example: 1645743759
          description: >-
            Expiry. When set, credential verification will fail if the current
            time is later than the `exp` value, expressed as a Unix timestamp.
        iat:
          type: number
          example: 1645743759
          description: >-
            Issued at, indicates credential issuance timestamp, expressed as a
            Unix timestamp.
        aud:
          type: string
          example: ...
          description: Audience.
        sub:
          type: string
          example: ...
          description: >-
            Subject identifier. As Compact Semantic Credentials are _bearer
            credentials_, including a subject identifier is not required.
        vc:
          type: object
          description: Represents a W3C Verifiable Credential data model credential.
          required:
            - credentialSubject
            - type
          properties:
            '@context':
              type: string
              example: https://www.w3.org/2018/credentials/examples/v1
              description: Must be a publicly available and resolvable schema.
            type:
              type: string
              example: AlumniCredential
              description: Must be a single credential type.
            credentialSubject:
              type: object
              description: >-
                Contains all the claims attested in the credential. Must comply
                with the referenced context schema.
              additionalProperties:
                example: ...
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
    SignCompactSemanticCredentialRequest:
      title: SignCompactSemanticCredentialRequest
      type: object
      required:
        - payload
      properties:
        payload:
          title: CompactSemanticCredentialSignRequest
          type: object
          description: CompactSemanticCredentialSignRequest
          required:
            - iss
            - vc
          properties:
            iss:
              type: string
              example: did:web:organization.com
              description: >-
                Use the DID that identifies the credential's issuer, which
                attests the claims in the credential. This must be a publicly
                available and resolvable `did:web` for the credential to be
                valid and verifiable.
            nbf:
              type: number
              example: 1645743759
              description: >-
                Not before. Credential verification will fail if the current
                time is earlier than the `nbf` value, expressed as a Unix
                timestamp. `nbf` is required by the W3C VC data model. If not
                provided in the request, current time at issuance is used.
            exp:
              type: number
              example: 1645743759
              description: >-
                Expiry. When set, credential verification will fail if the
                current time is later than the `exp` value, expressed as a Unix
                timestamp.
            iat:
              type: number
              example: 1645743759
              description: >-
                Issued at, indicates credential issuance timestamp, expressed as
                a Unix timestamp.
            aud:
              type: string
              example: ...
              description: Audience.
            sub:
              type: string
              example: ...
              description: >-
                Subject identifier. As Compact Semantic Credentials are _bearer
                credentials_, including a subject identifier is not required.
            vc:
              type: object
              description: Represents a W3C Verifiable Credential data model credential.
              required:
                - credentialSubject
                - type
              properties:
                '@context':
                  type: string
                  example: https://www.w3.org/2018/credentials/examples/v1
                  description: Must be a publicly available and resolvable schema.
                type:
                  type: string
                  example: AlumniCredential
                  description: Must be a single credential type.
                credentialSubject:
                  type: object
                  description: >-
                    Contains all the claims attested in the credential. Must
                    comply with the referenced context schema.
                  additionalProperties:
                    example: ...
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
        revocable:
          type: boolean
          default: false
          description: >-
            When set to `true`, the created credential can later be revoked.
            When set to `false`, the credential cannot be revoked.
      description: Sign Compact Semantic Credential Request
    CompactSemanticCredentialSignResponse:
      title: CompactSemanticCredentialSignResponse
      type: object
      description: CompactSemanticCredentialSignResponse
      required:
        - iss
        - nbf
        - jti
        - vc
      properties:
        iss:
          type: string
          example: did:web:example.com
          description: >-
            This DID identifies the credential's issuer, which attests the
            claims in the credential. Must be a publicly available and
            resolvable `did:web` for the credential to be valid and verifiable.
        jti:
          type: string
          example: ...
          description: >-
            This JWT ID identifies this credential and is identical to the `id`
            element. When `revocable` is set to `true`, this value is persisted
            on the tenant to enable revoking this specific credential.
        nbf:
          type: number
          example: 1645743759
          description: >-
            Not before. Credential verification will fail if the current time is
            earlier than the `nbf` value, expressed as a Unix timestamp.
        exp:
          type: number
          example: 1645743759
          description: >-
            Expiry. When set, credential verification will fail if the current
            time is later than the `exp` value, expressed as a Unix timestamp.
        iat:
          type: number
          example: 1645743759
          description: >-
            Issued at, indicates credential issuance timestamp, expressed as a
            Unix timestamp.
        aud:
          type: string
          example: ...
          description: Audience.
        sub:
          type: string
          example: ...
          description: >-
            Subject identifier. As Compact Semantic Credentials are _bearer
            credentials_, including a subject identifier is not required.
        vc:
          type: object
          description: Represents a W3C Verifiable Credential data model credential.
          required:
            - '@context'
            - type
            - credentialSubject
          properties:
            '@context':
              type: array
              description: Must be a publicly available and resolvable schema.
              items:
                type: string
              example:
                - https://www.w3.org/2018/credentials/v1
                - https://www.w3.org/2018/credentials/examples/v1
            type:
              type: array
              description: Must be a single credential type.
              items:
                type: string
              example:
                - VerifiableCredential
                - AlumniCredential
            credentialSubject:
              type: object
              description: >-
                Contains all the claims attested in the credential. Must comply
                with the referenced context schema.
              additionalProperties:
                example: ...
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
        status:
          type: object
          description: >-
            If `revocable` was set to `true` in the request, this object is used
            to provide information required for revocation.
          properties:
            url:
              type: string
              example: ...
              description: >-
                Every revocable credential will reference a Revocation List that
                is automatically created and held on the issuer's tenant. This
                list can be used by external verifiers to validate the
                credential status. This property references the Revocation List
                which holds the revocation status for this specific credential.
            index:
              type: number
              example: 123
              description: >-
                This indicates the index of this specific credential within the
                revocation list.
    SignCompactSemanticCredentialResponse:
      title: SignCompactSemanticCredentialResponse
      type: object
      required:
        - id
        - encoded
        - decoded
      properties:
        id:
          type: string
          description: Unique credential identifier.
        encoded:
          type: string
          description: >-
            The base32 encoded string representation of the Compact Semantic
            Credential. CSC stands for COSE_SIGN Compact profile. You will use
            this element to convert the credential into a format that can be
            shared with a holder.
          example: CSS:/1/BASE_32_ENCODED_PAYLOAD
        decoded:
          title: CompactSemanticCredentialSignResponse
          type: object
          description: CompactSemanticCredentialSignResponse
          required:
            - iss
            - nbf
            - jti
            - vc
          properties:
            iss:
              type: string
              example: did:web:example.com
              description: >-
                This DID identifies the credential's issuer, which attests the
                claims in the credential. Must be a publicly available and
                resolvable `did:web` for the credential to be valid and
                verifiable.
            jti:
              type: string
              example: ...
              description: >-
                This JWT ID identifies this credential and is identical to the
                `id` element. When `revocable` is set to `true`, this value is
                persisted on the tenant to enable revoking this specific
                credential.
            nbf:
              type: number
              example: 1645743759
              description: >-
                Not before. Credential verification will fail if the current
                time is earlier than the `nbf` value, expressed as a Unix
                timestamp.
            exp:
              type: number
              example: 1645743759
              description: >-
                Expiry. When set, credential verification will fail if the
                current time is later than the `exp` value, expressed as a Unix
                timestamp.
            iat:
              type: number
              example: 1645743759
              description: >-
                Issued at, indicates credential issuance timestamp, expressed as
                a Unix timestamp.
            aud:
              type: string
              example: ...
              description: Audience.
            sub:
              type: string
              example: ...
              description: >-
                Subject identifier. As Compact Semantic Credentials are _bearer
                credentials_, including a subject identifier is not required.
            vc:
              type: object
              description: Represents a W3C Verifiable Credential data model credential.
              required:
                - '@context'
                - type
                - credentialSubject
              properties:
                '@context':
                  type: array
                  description: Must be a publicly available and resolvable schema.
                  items:
                    type: string
                  example:
                    - https://www.w3.org/2018/credentials/v1
                    - https://www.w3.org/2018/credentials/examples/v1
                type:
                  type: array
                  description: Must be a single credential type.
                  items:
                    type: string
                  example:
                    - VerifiableCredential
                    - AlumniCredential
                credentialSubject:
                  type: object
                  description: >-
                    Contains all the claims attested in the credential. Must
                    comply with the referenced context schema.
                  additionalProperties:
                    example: ...
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
            status:
              type: object
              description: >-
                If `revocable` was set to `true` in the request, this object is
                used to provide information required for revocation.
              properties:
                url:
                  type: string
                  example: ...
                  description: >-
                    Every revocable credential will reference a Revocation List
                    that is automatically created and held on the issuer's
                    tenant. This list can be used by external verifiers to
                    validate the credential status. This property references the
                    Revocation List which holds the revocation status for this
                    specific credential.
                index:
                  type: number
                  example: 123
                  description: >-
                    This indicates the index of this specific credential within
                    the revocation list.
      description: Sign Compact Semantic Credential response
    VerifyCompactSemanticCredentialResponse:
      title: VerifyCompactSemanticCredentialResponse
      type: object
      description: VerifyCompactSemanticCredentialResponse
      required:
        - verified
      properties:
        verified:
          type: boolean
        decoded:
          title: CompactSemanticCredentialSignResponse
          type: object
          description: CompactSemanticCredentialSignResponse
          required:
            - iss
            - nbf
            - jti
            - vc
          properties:
            iss:
              type: string
              example: did:web:example.com
              description: >-
                This DID identifies the credential's issuer, which attests the
                claims in the credential. Must be a publicly available and
                resolvable `did:web` for the credential to be valid and
                verifiable.
            jti:
              type: string
              example: ...
              description: >-
                This JWT ID identifies this credential and is identical to the
                `id` element. When `revocable` is set to `true`, this value is
                persisted on the tenant to enable revoking this specific
                credential.
            nbf:
              type: number
              example: 1645743759
              description: >-
                Not before. Credential verification will fail if the current
                time is earlier than the `nbf` value, expressed as a Unix
                timestamp.
            exp:
              type: number
              example: 1645743759
              description: >-
                Expiry. When set, credential verification will fail if the
                current time is later than the `exp` value, expressed as a Unix
                timestamp.
            iat:
              type: number
              example: 1645743759
              description: >-
                Issued at, indicates credential issuance timestamp, expressed as
                a Unix timestamp.
            aud:
              type: string
              example: ...
              description: Audience.
            sub:
              type: string
              example: ...
              description: >-
                Subject identifier. As Compact Semantic Credentials are _bearer
                credentials_, including a subject identifier is not required.
            vc:
              type: object
              description: Represents a W3C Verifiable Credential data model credential.
              required:
                - '@context'
                - type
                - credentialSubject
              properties:
                '@context':
                  type: array
                  description: Must be a publicly available and resolvable schema.
                  items:
                    type: string
                  example:
                    - https://www.w3.org/2018/credentials/v1
                    - https://www.w3.org/2018/credentials/examples/v1
                type:
                  type: array
                  description: Must be a single credential type.
                  items:
                    type: string
                  example:
                    - VerifiableCredential
                    - AlumniCredential
                credentialSubject:
                  type: object
                  description: >-
                    Contains all the claims attested in the credential. Must
                    comply with the referenced context schema.
                  additionalProperties:
                    example: ...
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
            status:
              type: object
              description: >-
                If `revocable` was set to `true` in the request, this object is
                used to provide information required for revocation.
              properties:
                url:
                  type: string
                  example: ...
                  description: >-
                    Every revocable credential will reference a Revocation List
                    that is automatically created and held on the issuer's
                    tenant. This list can be used by external verifiers to
                    validate the credential status. This property references the
                    Revocation List which holds the revocation status for this
                    specific credential.
                index:
                  type: number
                  example: 123
                  description: >-
                    This indicates the index of this specific credential within
                    the revocation list.
        error:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
            details:
              type: object
          required:
            - type
            - message
    schemas-CredentialConfiguration:
      type: object
      properties:
        type:
          description: >-
            Used to differentiate between different Compact/Compact Semantic
            credential configurations on your tenant. Thus, its value must:

            - Be unique across all Compact/Semantic compact credential
            configurations on your tenant.

            - Not be VerifiableCredential.          type: string
          minLength: 1
          maxLength: 1024
          example: CourseCredential
        claimMappings:
          type: object
          description: >
            This is where you specify how to map claims (user attributes) into
            issued credentials. Each field in the object corresponds to a claim
            in the issued credential, and contains one or more from the
            following attributes:

            - `mapFrom`: References the path in the user object where the claim
            is available.
              - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
              - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
            - `defaultValue`: Indicates what value is used if required is set to
            `false` (field is optional) and no value is provided by the claims
            source. When `defaultValue` is provided, `mapFrom` is optional.

            - `required`: Indicates whether the claim is required (default:
            `false`). When a required claim cannot be retrieved and no
            `defaultValue` is available, credential issuance will fail.

            **Example source context object**

            ```json

            {
              "claims": {
                "given_name": "Jamie",
                "family_name": "Doe",
                "address": {
                  "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                }
              },
              "authenticationProvider": {
                "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                "url": "https://accounts.google.com"
              }
            }

            ```
          example:
            firstName:
              mapFrom: claims.given_name
              required: true
            address:
              mapFrom: claims.address.formatted
            picture:
              mapFrom: claims.picture
              defaultValue: http://example.edu/img/placeholder.png
            badge:
              defaultValue: http://example.edu/img/badge.png
            providerSubjectId:
              mapFrom: authenticationProvider.subjectId
          additionalProperties:
            type: object
            properties:
              mapFrom:
                type: string
                description: The path of the property in the source context object.
              required:
                type: boolean
                description: >-
                  Indicates whether value of the property must be resolvable. If
                  set to true and does not map to a value, issuance will fail.
              defaultValue:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: array
                  - type: object
                description: >-
                  Default value to be used when unable to resolve from the
                  supplied context object. Required when `mapFrom` is not
                  defined.
        revocable:
          type: boolean
          default: true
          description: >-
            When set to `true` (default), the created credential can later be
            revoked. When set to `false`, the credential cannot be revoked.
        claimSourceId:
          type: string
          format: uuid
          description: >-
            References the unique identifier of a claims source that can be used
            to retrieve claims and include them in the issued credential.
        expiresIn:
          type: object
          description: >-
            Used to determine when will issued credentials expire. Can include
            any combination of `years`, `months`, `weeks`, `days`, `hours`,
            `minutes` and `seconds`.
          properties:
            years:
              type: number
              example: 1
            months:
              type: number
              example: 12
            weeks:
              type: number
              example: 52
            days:
              type: number
              example: 365
            hours:
              type: number
              example: 24
            minutes:
              type: number
              example: 1440
            seconds:
              type: number
              example: 3600
      required:
        - claimMappings
    schemas-CredentialConfigurationResponse:
      required:
        - id
        - type
        - revocable
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: >-
                Uniquely identifies this credential configuration. Can be used
                to create an offer based on this credential configuration, or to
                retrieve, update or remove the credential configuration.
              example: 983c0a86-204f-4431-9371-f5a22e506599
        - type: object
          properties:
            type:
              description: >-
                Used to differentiate between different Compact/Compact Semantic
                credential configurations on your tenant. Thus, its value must:

                - Be unique across all Compact/Semantic compact credential
                configurations on your tenant.

                - Not be VerifiableCredential.          type: string
              minLength: 1
              maxLength: 1024
              example: CourseCredential
            claimMappings:
              type: object
              description: >
                This is where you specify how to map claims (user attributes)
                into issued credentials. Each field in the object corresponds to
                a claim in the issued credential, and contains one or more from
                the following attributes:

                - `mapFrom`: References the path in the user object where the
                claim is available.
                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                - `defaultValue`: Indicates what value is used if required is
                set to `false` (field is optional) and no value is provided by
                the claims source. When `defaultValue` is provided, `mapFrom` is
                optional.

                - `required`: Indicates whether the claim is required (default:
                `false`). When a required claim cannot be retrieved and no
                `defaultValue` is available, credential issuance will fail.

                **Example source context object**

                ```json

                {
                  "claims": {
                    "given_name": "Jamie",
                    "family_name": "Doe",
                    "address": {
                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                    }
                  },
                  "authenticationProvider": {
                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                    "url": "https://accounts.google.com"
                  }
                }

                ```
              example:
                firstName:
                  mapFrom: claims.given_name
                  required: true
                address:
                  mapFrom: claims.address.formatted
                picture:
                  mapFrom: claims.picture
                  defaultValue: http://example.edu/img/placeholder.png
                badge:
                  defaultValue: http://example.edu/img/badge.png
                providerSubjectId:
                  mapFrom: authenticationProvider.subjectId
              additionalProperties:
                type: object
                properties:
                  mapFrom:
                    type: string
                    description: The path of the property in the source context object.
                  required:
                    type: boolean
                    description: >-
                      Indicates whether value of the property must be
                      resolvable. If set to true and does not map to a value,
                      issuance will fail.
                  defaultValue:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: array
                      - type: object
                    description: >-
                      Default value to be used when unable to resolve from the
                      supplied context object. Required when `mapFrom` is not
                      defined.
            revocable:
              type: boolean
              default: true
              description: >-
                When set to `true` (default), the created credential can later
                be revoked. When set to `false`, the credential cannot be
                revoked.
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of `years`, `months`, `weeks`, `days`,
                `hours`, `minutes` and `seconds`.
              properties:
                years:
                  type: number
                  example: 1
                months:
                  type: number
                  example: 12
                weeks:
                  type: number
                  example: 52
                days:
                  type: number
                  example: 365
                hours:
                  type: number
                  example: 24
                minutes:
                  type: number
                  example: 1440
                seconds:
                  type: number
                  example: 3600
          required:
            - claimMappings
      title: CredentialConfigurationResponse
    schemas-GetCredentialConfigurationsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            required:
              - id
              - type
              - revocable
            allOf:
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Uniquely identifies this credential configuration. Can be
                      used to create an offer based on this credential
                      configuration, or to retrieve, update or remove the
                      credential configuration.
                    example: 983c0a86-204f-4431-9371-f5a22e506599
              - type: object
                properties:
                  type:
                    description: >-
                      Used to differentiate between different Compact/Compact
                      Semantic credential configurations on your tenant. Thus,
                      its value must:

                      - Be unique across all Compact/Semantic compact credential
                      configurations on your tenant.

                      - Not be VerifiableCredential.          type: string
                    minLength: 1
                    maxLength: 1024
                    example: CourseCredential
                  claimMappings:
                    type: object
                    description: >
                      This is where you specify how to map claims (user
                      attributes) into issued credentials. Each field in the
                      object corresponds to a claim in the issued credential,
                      and contains one or more from the following attributes:

                      - `mapFrom`: References the path in the user object where
                      the claim is available.
                        - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                        - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                      - `defaultValue`: Indicates what value is used if required
                      is set to `false` (field is optional) and no value is
                      provided by the claims source. When `defaultValue` is
                      provided, `mapFrom` is optional.

                      - `required`: Indicates whether the claim is required
                      (default: `false`). When a required claim cannot be
                      retrieved and no `defaultValue` is available, credential
                      issuance will fail.

                      **Example source context object**

                      ```json

                      {
                        "claims": {
                          "given_name": "Jamie",
                          "family_name": "Doe",
                          "address": {
                            "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                          }
                        },
                        "authenticationProvider": {
                          "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                          "url": "https://accounts.google.com"
                        }
                      }

                      ```
                    example:
                      firstName:
                        mapFrom: claims.given_name
                        required: true
                      address:
                        mapFrom: claims.address.formatted
                      picture:
                        mapFrom: claims.picture
                        defaultValue: http://example.edu/img/placeholder.png
                      badge:
                        defaultValue: http://example.edu/img/badge.png
                      providerSubjectId:
                        mapFrom: authenticationProvider.subjectId
                    additionalProperties:
                      type: object
                      properties:
                        mapFrom:
                          type: string
                          description: >-
                            The path of the property in the source context
                            object.
                        required:
                          type: boolean
                          description: >-
                            Indicates whether value of the property must be
                            resolvable. If set to true and does not map to a
                            value, issuance will fail.
                        defaultValue:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
                            - type: array
                            - type: object
                          description: >-
                            Default value to be used when unable to resolve from
                            the supplied context object. Required when `mapFrom`
                            is not defined.
                  revocable:
                    type: boolean
                    default: true
                    description: >-
                      When set to `true` (default), the created credential can
                      later be revoked. When set to `false`, the credential
                      cannot be revoked.
                  claimSourceId:
                    type: string
                    format: uuid
                    description: >-
                      References the unique identifier of a claims source that
                      can be used to retrieve claims and include them in the
                      issued credential.
                  expiresIn:
                    type: object
                    description: >-
                      Used to determine when will issued credentials expire. Can
                      include any combination of `years`, `months`, `weeks`,
                      `days`, `hours`, `minutes` and `seconds`.
                    properties:
                      years:
                        type: number
                        example: 1
                      months:
                        type: number
                        example: 12
                      weeks:
                        type: number
                        example: 52
                      days:
                        type: number
                        example: 365
                      hours:
                        type: number
                        example: 24
                      minutes:
                        type: number
                        example: 1440
                      seconds:
                        type: number
                        example: 3600
                required:
                  - claimMappings
            title: CredentialConfigurationResponse
      title: GetCredentialConfigurationsResponse
    schemas-CredentialConfigurationRequest:
      required:
        - type
      allOf:
        - type: object
          properties:
            type:
              description: >-
                Used to differentiate between different Compact/Compact Semantic
                credential configurations on your tenant. Thus, its value must:

                - Be unique across all Compact/Semantic compact credential
                configurations on your tenant.

                - Not be VerifiableCredential.          type: string
              minLength: 1
              maxLength: 1024
              example: CourseCredential
            claimMappings:
              type: object
              description: >
                This is where you specify how to map claims (user attributes)
                into issued credentials. Each field in the object corresponds to
                a claim in the issued credential, and contains one or more from
                the following attributes:

                - `mapFrom`: References the path in the user object where the
                claim is available.
                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                - `defaultValue`: Indicates what value is used if required is
                set to `false` (field is optional) and no value is provided by
                the claims source. When `defaultValue` is provided, `mapFrom` is
                optional.

                - `required`: Indicates whether the claim is required (default:
                `false`). When a required claim cannot be retrieved and no
                `defaultValue` is available, credential issuance will fail.

                **Example source context object**

                ```json

                {
                  "claims": {
                    "given_name": "Jamie",
                    "family_name": "Doe",
                    "address": {
                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                    }
                  },
                  "authenticationProvider": {
                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                    "url": "https://accounts.google.com"
                  }
                }

                ```
              example:
                firstName:
                  mapFrom: claims.given_name
                  required: true
                address:
                  mapFrom: claims.address.formatted
                picture:
                  mapFrom: claims.picture
                  defaultValue: http://example.edu/img/placeholder.png
                badge:
                  defaultValue: http://example.edu/img/badge.png
                providerSubjectId:
                  mapFrom: authenticationProvider.subjectId
              additionalProperties:
                type: object
                properties:
                  mapFrom:
                    type: string
                    description: The path of the property in the source context object.
                  required:
                    type: boolean
                    description: >-
                      Indicates whether value of the property must be
                      resolvable. If set to true and does not map to a value,
                      issuance will fail.
                  defaultValue:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: array
                      - type: object
                    description: >-
                      Default value to be used when unable to resolve from the
                      supplied context object. Required when `mapFrom` is not
                      defined.
            revocable:
              type: boolean
              default: true
              description: >-
                When set to `true` (default), the created credential can later
                be revoked. When set to `false`, the credential cannot be
                revoked.
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of `years`, `months`, `weeks`, `days`,
                `hours`, `minutes` and `seconds`.
              properties:
                years:
                  type: number
                  example: 1
                months:
                  type: number
                  example: 12
                weeks:
                  type: number
                  example: 52
                days:
                  type: number
                  example: 365
                hours:
                  type: number
                  example: 24
                minutes:
                  type: number
                  example: 1440
                seconds:
                  type: number
                  example: 3600
          required:
            - claimMappings
      title: CreateCredentialConfigurationRequest
    PDFTemplateResponse:
      type: object
      x-examples: {}
      title: PDFTemplateResponse
      properties:
        id:
          type: string
          description: >-
            This is a unique identifier for this PDF template. You will use it
            as the `templateId` when formatting a Compact Credential as a PDF.
          example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
        name:
          type: string
          example: Certificate of participation
          description: Template name.
        fileName:
          type: string
          example: certificate_of_participation
          description: File name for credentials formatted using this template.
        fonts:
          type: array
          description: Includes any custom fonts in this template.
          example:
            - name: PublicSans-Regular
              fileName: fonts/PublicSans-Regular.ttf
          items:
            type: object
            properties:
              name:
                type: string
              fileName:
                type: string
        metadata:
          type: object
          properties:
            title:
              type: string
              example: ''
        fields:
          type: array
          description: >-
            Includes the different elements in this PDF template and what fields
            in the credential they are mapped from.
          example:
            - key: familyName
              value: '{{payload.sub_claims.familyName}}'
              isRequired: true
              alternativeText: '{{payload.sub_claims.familyName}}'
              fontName: PublicSans-Regular
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
              isRequired:
                type: boolean
              alternativeText:
                type: string
              fontName:
                type: string
            required:
              - key
              - value
              - alternativeText
    PDFTemplatesResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: 0ecdcb57-ef2b-4aa1-be34-695c2d9d9486
        data:
          type: array
          items:
            type: object
            x-examples: {}
            title: PDFTemplateResponse
            properties:
              id:
                type: string
                description: >-
                  This is a unique identifier for this PDF template. You will
                  use it as the `templateId` when formatting a Compact
                  Credential as a PDF.
                example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
              name:
                type: string
                example: Certificate of participation
                description: Template name.
              fileName:
                type: string
                example: certificate_of_participation
                description: File name for credentials formatted using this template.
              fonts:
                type: array
                description: Includes any custom fonts in this template.
                example:
                  - name: PublicSans-Regular
                    fileName: fonts/PublicSans-Regular.ttf
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    fileName:
                      type: string
              metadata:
                type: object
                properties:
                  title:
                    type: string
                    example: ''
              fields:
                type: array
                description: >-
                  Includes the different elements in this PDF template and what
                  fields in the credential they are mapped from.
                example:
                  - key: familyName
                    value: '{{payload.sub_claims.familyName}}'
                    isRequired: true
                    alternativeText: '{{payload.sub_claims.familyName}}'
                    fontName: PublicSans-Regular
                items:
                  type: object
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                    isRequired:
                      type: boolean
                    alternativeText:
                      type: string
                    fontName:
                      type: string
                  required:
                    - key
                    - value
                    - alternativeText
      title: PDFTemplateResponse
      description: ''
    CreatePDFRequest:
      type: object
      properties:
        templateId:
          type: string
          description: >-
            Use the `ID` element of the PDF template to be used to format this
            credential.
          example: 4eea7654-d4c5-4eba-bd7a-5ca334d54725
          minLength: 1
        payload:
          type: string
          description: String payload representation of the encoded Compact Credential.
          example: '{payload}'
          minLength: 1
          maxLength: 1024
      title: CreatePDFResponse
    DigitalPassType:
      description: Digital pass type
      type: string
      enum:
        - apple
        - google
      title: DigitalPassType
    ApplePassTemplateResponse:
      type: object
      properties:
        id:
          type: string
          example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
          description: >-
            This is a unique identifier for this Apple digital pass template.
            You will use it as the `templateId` when formatting a Compact
            Credential as an Apple Pass.
        passType:
          description: Digital pass type
          type: string
          enum:
            - apple
            - google
          title: DigitalPassType
        name:
          type: string
          example: Certificate of participation
        metadata:
          type: object
          properties:
            fileName:
              type: string
              example: certificate_of_participation.pkpass
            teamIdentifier:
              type: string
              example: GH5P43ABC
            passTypeIdentifier:
              type: string
              example: pass.myproject.participation.pk
      title: ApplePassTemplateResponse
    ApplePassTemplatesResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                description: >-
                  This is a unique identifier for this Apple digital pass
                  template. You will use it as the `templateId` when formatting
                  a Compact Credential as an Apple Pass.
              passType:
                description: Digital pass type
                type: string
                enum:
                  - apple
                  - google
                title: DigitalPassType
              name:
                type: string
                example: Certificate of participation
              metadata:
                type: object
                properties:
                  fileName:
                    type: string
                    example: certificate_of_participation.pkpass
                  teamIdentifier:
                    type: string
                    example: GH5P43ABC
                  passTypeIdentifier:
                    type: string
                    example: pass.myproject.participation.pk
            title: ApplePassTemplateResponse
      title: ApplePassTemplatesResponse
    ApplePassTemplateRequest:
      type: object
      properties:
        template:
          type: string
          format: binary
          description: Includes your template files.
        name:
          type: string
          description: Insert a name to identify this Apple digital pass template.
          example: Certificate of participation
          minLength: 1
          maxLength: 1024
        fileName:
          type: string
          description: >-
            Insert the file name that will be assigned to Apple digital passes
            created from this template. Must only include alphanumeric
            characters, ''_'', or ''-'', and end with `.pkpass`.
          example: certificate_of_participation.pkpass
          minLength: 1
          maxLength: 100
        teamIdentifier:
          type: string
          description: >-
            The Team ID for the Apple Developer Program account that registered
            the pass type identifier.
          example: GH5P43ABC
        passTypeIdentifier:
          type: string
          description: >-
            The pass type identifier that’s registered with Apple. The value
            must be the same as the distribution certificate used to sign the
            pass.
          example: pass.myproject.participation.pk
        wwdr:
          type: string
          description: >-
            Apple G1 or G4 worldwide developer relations intermediate
            certificate.
        signerCert:
          type: string
          description: >-
            Apple pass [signer
            certificate](https://help.apple.com/developer-account/#/devbfa00fef7).
        signerKey:
          type: string
          description: The encrypted key of the Apple pass signer certificate.
        signerKeyPassphrase:
          type: string
          description: Passphrase for the encrypted key.
      required:
        - name
        - template
        - fileName
        - teamIdentifier
        - passTypeIdentifier
        - wwdr
        - signerCert
        - signerKey
        - signerKeyPassphrase
      title: ApplePassTemplateRequest
    GooglePassTemplateResponse:
      type: object
      properties:
        id:
          type: string
          example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
          description: >-
            This is a unique identifier for this Google Pass template. You will
            use it as the `templateId` when formatting a Compact Credential as a
            Google Pass.
        passType:
          description: Digital pass type
          type: string
          enum:
            - apple
            - google
          title: DigitalPassType
        name:
          type: string
          example: Certificate of participation
        metadata:
          type: object
          properties:
            issuerId:
              type: string
              example: '3388000000012346000'
            serviceAccountClientEmail:
              type: string
              example: app-user@myproject.iam.gserviceaccount.com
            payPassId:
              type: string
              example: 3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
      title: GooglePassTemplateResponse
    GooglePassTemplatesResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
                description: >-
                  This is a unique identifier for this Google Pass template. You
                  will use it as the `templateId` when formatting a Compact
                  Credential as a Google Pass.
              passType:
                description: Digital pass type
                type: string
                enum:
                  - apple
                  - google
                title: DigitalPassType
              name:
                type: string
                example: Certificate of participation
              metadata:
                type: object
                properties:
                  issuerId:
                    type: string
                    example: '3388000000012346000'
                  serviceAccountClientEmail:
                    type: string
                    example: app-user@myproject.iam.gserviceaccount.com
                  payPassId:
                    type: string
                    example: 3388000000012345678.a0bbe92f-c85e-4081-94c3-f842bcd5e463
            title: GooglePassTemplateResponse
      title: GooglePassTemplatesResponse
      description: ''
    GooglePassTemplateRequest:
      type: object
      properties:
        template:
          type: string
          format: binary
          description: Includes your template files.
        name:
          type: string
          description: Insert a name to identify this Google Pass template.
          example: Certificate of participation
          minLength: 1
          maxLength: 1024
        issuerId:
          type: string
          description: Google Wallet Pass signer issuer ID.
          example: '3388000000012346000'
        serviceAccountClientEmail:
          type: string
          description: >-
            Email address of the Google Cloud Platform service account for
            accessing the Google Pay Passes API.
          example: app-user@myproject.iam.gserviceaccount.com
        serviceAccountPrivateKey:
          type: string
          description: Private key PEM of the Google Cloud Platform service account.
      required:
        - name
        - template
        - issuerId
        - serviceAccountClientEmail
        - serviceAccountPrivateKey
      title: GooglePassTemplateRequest
    CreateDigitalPassRequest:
      format: object
      properties:
        templateId:
          type: string
          description: Use the `id` of the template to be used to format this credential.
          example: 3812166c-ac9f-4e4e-96dd-c1336b5be378
          minLength: 1
        payload:
          type: string
          description: String payload representation of the encoded Compact Credential.
          example: '{payload}'
      title: CreateDigitalPassRequest
      description: ''
    CreateApplePassResponse:
      type: string
      description: The generated Apple Pass `.pkpass` file.
      title: CreateApplePassResponse
      format: binary
    CreateGooglePassResponse:
      description: The URL to retrieve the Google Pass from.
      format: object
      properties:
        redirectTo:
          type: string
          description: Redirect URL to download the Google Pass to the Google Wallet.
          example: https://pay.google.com/gp/v/save/{jwt}
      title: CreateGooglePassResponse
    IacaCertificateData:
      title: IacaCertificateData
      type: object
      required:
        - notAfter
        - notBefore
        - country
        - commonName
      properties:
        notAfter:
          type: string
          format: date
          example: '2034-09-26'
          description: >-
            IACA's expiry date (defaults to 10 years from issuance if not
            provided in the request).
        notBefore:
          type: string
          format: date
          example: '2023-09-26'
          description: IACA’s active from date.
        country:
          type: string
          example: NZ
          description: IACA’s issuer country code, based on the IACA creation request.
        commonName:
          type: string
          default: '{tenantHost} IACA'
          description: IACA's name, based on the IACA creation request.
          example: https://{tenant-subdomain}.vii.mattr.global IACA
    IacaResponse:
      title: IacaResponse
      type: object
      required:
        - id
        - certificateData
        - publicKeyJwk
        - certificateFingerprint
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the created IACA.
        certificatePem:
          type: string
          example: "-----BEGIN CERTIFICATE-----\r\nMIICDjCCAbSgAwIBAgIKdeZsA5NPKimuAzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0zMzA5\r\nMDgyMzM0MjJaMCIxIDAJBgNVBAYTAk5aMBMGA1UEAxMMRXhhbXBsZSBJQUNBMFkw\r\nEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEBbK7JKKFMWuu8kHQK2qaML+MQ0Ykk3Qg\r\n/p3TC6lQKvYJozPSpLXbJQIzMPq9u/dG+j4vq1iX/G/jFIwfiEiKEqOB0TCBzjAS\r\nBgNVHRMBAf8ECDAGAQH/AgEAMA4GA1UdDwEB/wQEAwIABjAdBgNVHQ4EFgQU9zTh\r\nKsqFxAgRJDDGW1au+ewJK6owHgYDVR0SBBcwFYYTaHR0cHM6Ly9leGFtcGxlLmNv\r\nbTBpBgNVHR8EYjBgMF6gXKBahlhodHRwczovL2V4YW1wbGUuY29tL3YyL2NyZWRl\r\nbnRpYWxzL21vYmlsZS9pYWNhcy8yZTg5YzE1Ni0zMWQ1LTQ3ODMtYmQ1OS05MDU1\r\nYjVmOGU3ZDIvY3JsMAoGCCqGSM49BAMCA0gAMEUCIQDD+eU8iOsYYC0v41L94fhF\r\nZ0brPo4gx2aRxrhE3NLFpwIgIgHCPBXJ+JICJg3K7dEsr153So4SEZzAA1rRn4eF\r\nvkM=\r\n-----END CERTIFICATE-----\r\n"
          description: Certificate PEM format.
        certificateData:
          title: IacaCertificateData
          type: object
          required:
            - notAfter
            - notBefore
            - country
            - commonName
          properties:
            notAfter:
              type: string
              format: date
              example: '2034-09-26'
              description: >-
                IACA's expiry date (defaults to 10 years from issuance if not
                provided in the request).
            notBefore:
              type: string
              format: date
              example: '2023-09-26'
              description: IACA’s active from date.
            country:
              type: string
              example: NZ
              description: IACA’s issuer country code, based on the IACA creation request.
            commonName:
              type: string
              default: '{tenantHost} IACA'
              description: IACA's name, based on the IACA creation request.
              example: https://{tenant-subdomain}.vii.mattr.global IACA
        publicKeyJwk:
          type: object
          description: JWK format of the IACA public key.
          example:
            kty: EC
            crv: P-256
            x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
            'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
    CreateIacaRequest:
      title: CreateIacaRequest
      type: object
      properties:
        commonName:
          type: string
          default: '{tenantHost} IACA'
          description: >-
            This optional parameter indicates the common name of the IACA
            certificate. When specified, the value must be a valid
            `PrintableString`. If not provided and a custom domain is configured
            and verified, the custom domain is used. If no custom domain is
            configured, the tenant subdomain is used.
          example: https://{tenant-subdomain}.vii.mattr.global IACA
        country:
          type: string
          example: NZ
          description: >-
            This optional parameter indicates the issuer country. If not
            provided, a country is selected based on the region of the tenant
            subdomain cloud host. When specified, the value must be uppercase
            and a valid country code as per [ISO 3166-1
            alpha-2](https://www.iso.org/iso-3166-country-codes.html).
        notAfter:
          type: string
          example: '2034-09-26'
          description: >-
            This optional parameter indicates the date after which the IACA
            should no longer be used as a source of trust. When omitted,
            defaults to 10 years from date of issuance.
    DocumentSignerCertificateData:
      title: DocumentSignerCertificateData
      type: object
      required:
        - notAfter
        - notBefore
        - country
        - commonName
      properties:
        notAfter:
          type: string
          format: date
          example: '2034-09-26'
        notBefore:
          type: string
          format: date
          example: '2023-09-30'
        country:
          type: string
          example: NZ
        commonName:
          type: string
          default: '{tenantHost} Document Signer'
          example: https://{tenant-subdomain}.vii.mattr.global Document Signer
    DocumentSignerResponse:
      title: DocumentSignerResponse
      type: object
      required:
        - id
        - active
        - publicKey
        - certificatePem
        - certificateFingerprint
        - certificateData
      properties:
        id:
          type: string
          format: uuid
          description: >-
            Each DSC created on MATTR VII will have a unique identifier which
            must be provided when using this DSC to sign a Mobile Credential.
        active:
          type: boolean
          description: >-
            Indicates the DSC status. Only active DSCs (`true`) can be used to
            sign Mobile Credentials.
        publicKey:
          type: object
          description: JWK format of the DSC public key.
          example:
            kty: EC
            crv: P-256
            x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
            'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
        certificatePem:
          type: string
          description: Certificate PEM format.
          example: >-
            -----BEGIN
            CERTIFICATE-----\r\nMIICbzCCAhSgAwIBAgIKfS7sskyJEh+DOzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0yNDA5\r\nMTAyMzM0MjJaMDExLzAJBgNVBAYTAk5aMCIGA1UEAxMbZXhhbXBsZS5jb20gRG9j\r\ndW1lbnQgU2lnbmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7fa+jv9zCtHQ\r\nmKn7o1dS6lBHD5thlhPqjlx7qEfqy8Im9AcQJDal2sr/fUxhHwf/G4ublS7AL04U\r\n73dzr/ozxaOCASEwggEdMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLdNNPTmPxt0\r\nLqvlZnV/QL86MXOxMB8GA1UdIwQYMBaAFPc04SrKhcQIESQwxltWrvnsCSuqMA4G\r\nA1UdDwEB/wQEAwIAgDAeBgNVHREEFzAVhhNodHRwczovL2V4YW1wbGUuY29tMB4G\r\nA1UdEgQXMBWGE2h0dHBzOi8vZXhhbXBsZS5jb20waQYDVR0fBGIwYDBeoFygWoZY\r\naHR0cHM6Ly9leGFtcGxlLmNvbS92Mi9jcmVkZW50aWFscy9tb2JpbGUvaWFjYXMv\r\nMmU4OWMxNTYtMzFkNS00NzgzLWJkNTktOTA1NWI1ZjhlN2QyL2NybDASBgNVHSUE\r\nCzAJBgcogYxdBQECMAoGCCqGSM49BAMCA0kAMEYCIQCfgn6+QoNfDVelJANl+Jp9\r\ncq7X9paZylfnI6UGr1FM6gIhAIzhiyclDa8+/ZSRfu7KfgGrNRaJ8YQ6vevskJls\r\nIavC\r\n-----END
            CERTIFICATE-----\r\n
        certificateFingerprint:
          type: string
          description: DSC Hash that includes all certificate data and its signature.
          example: f6cad6e579d70b3973efa60624af731a580d1a11a7579e70f2f10f059dc86172
        certificateData:
          title: DocumentSignerCertificateData
          type: object
          required:
            - notAfter
            - notBefore
            - country
            - commonName
          properties:
            notAfter:
              type: string
              format: date
              example: '2034-09-26'
            notBefore:
              type: string
              format: date
              example: '2023-09-30'
            country:
              type: string
              example: NZ
            commonName:
              type: string
              default: '{tenantHost} Document Signer'
              example: https://{tenant-subdomain}.vii.mattr.global Document Signer
    ListDocumentSignersResponse:
      title: ListDocumentSignersResponse
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            title: DocumentSignerResponse
            type: object
            required:
              - id
              - active
              - publicKey
              - certificatePem
              - certificateFingerprint
              - certificateData
            properties:
              id:
                type: string
                format: uuid
                description: >-
                  Each DSC created on MATTR VII will have a unique identifier
                  which must be provided when using this DSC to sign a Mobile
                  Credential.
              active:
                type: boolean
                description: >-
                  Indicates the DSC status. Only active DSCs (`true`) can be
                  used to sign Mobile Credentials.
              publicKey:
                type: object
                description: JWK format of the DSC public key.
                example:
                  kty: EC
                  crv: P-256
                  x: AvBb0J-TGlQhhs9i4YS38i9x4g6bgFDzpeo4-oEnVSk
                  'y': x8kQI52GRnu1jNbgrI7LfgIzVdJIArM0I_sOUzQFvfk
              certificatePem:
                type: string
                description: Certificate PEM format.
                example: >-
                  -----BEGIN
                  CERTIFICATE-----\r\nMIICbzCCAhSgAwIBAgIKfS7sskyJEh+DOzAKBggqhkjOPQQDAjAiMSAwCQYDVQQG\r\nEwJOWjATBgNVBAMTDEV4YW1wbGUgSUFDQTAeFw0yMzA5MTEyMzM0MjJaFw0yNDA5\r\nMTAyMzM0MjJaMDExLzAJBgNVBAYTAk5aMCIGA1UEAxMbZXhhbXBsZS5jb20gRG9j\r\ndW1lbnQgU2lnbmVyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE7fa+jv9zCtHQ\r\nmKn7o1dS6lBHD5thlhPqjlx7qEfqy8Im9AcQJDal2sr/fUxhHwf/G4ublS7AL04U\r\n73dzr/ozxaOCASEwggEdMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLdNNPTmPxt0\r\nLqvlZnV/QL86MXOxMB8GA1UdIwQYMBaAFPc04SrKhcQIESQwxltWrvnsCSuqMA4G\r\nA1UdDwEB/wQEAwIAgDAeBgNVHREEFzAVhhNodHRwczovL2V4YW1wbGUuY29tMB4G\r\nA1UdEgQXMBWGE2h0dHBzOi8vZXhhbXBsZS5jb20waQYDVR0fBGIwYDBeoFygWoZY\r\naHR0cHM6Ly9leGFtcGxlLmNvbS92Mi9jcmVkZW50aWFscy9tb2JpbGUvaWFjYXMv\r\nMmU4OWMxNTYtMzFkNS00NzgzLWJkNTktOTA1NWI1ZjhlN2QyL2NybDASBgNVHSUE\r\nCzAJBgcogYxdBQECMAoGCCqGSM49BAMCA0kAMEYCIQCfgn6+QoNfDVelJANl+Jp9\r\ncq7X9paZylfnI6UGr1FM6gIhAIzhiyclDa8+/ZSRfu7KfgGrNRaJ8YQ6vevskJls\r\nIavC\r\n-----END
                  CERTIFICATE-----\r\n
              certificateFingerprint:
                type: string
                description: DSC Hash that includes all certificate data and its signature.
                example: >-
                  f6cad6e579d70b3973efa60624af731a580d1a11a7579e70f2f10f059dc86172
              certificateData:
                title: DocumentSignerCertificateData
                type: object
                required:
                  - notAfter
                  - notBefore
                  - country
                  - commonName
                properties:
                  notAfter:
                    type: string
                    format: date
                    example: '2034-09-26'
                  notBefore:
                    type: string
                    format: date
                    example: '2023-09-30'
                  country:
                    type: string
                    example: NZ
                  commonName:
                    type: string
                    default: '{tenantHost} Document Signer'
                    example: >-
                      https://{tenant-subdomain}.vii.mattr.global Document
                      Signer
        nextCursor:
          type: string
    DocumentSignerRequest:
      title: DocumentSignerRequest
      type: object
      required:
        - active
      properties:
        active:
          type: boolean
          description: >-
            This required parameter defines the status of the created DSC. Only
            active DSCs (`true`) can be used to sign Mobile Credentials.
        commonName:
          type: string
          example: https://{tenant-subdomain}.vii.mattr.global Document Signer
          description: >-
            This optional parameter indicates the common name of the DSC
            certificate. When specified, the value must be a valid
            `PrintableString`. If not provided and a custom domain is configured
            and verified, the custom domain is used. If no custom domain is
            configured, the tenant subdomain is used.
        notAfter:
          type: string
          example: '2034-09-26'
          description: >-
            Optional date after which the DSC can no longer be used to sign
            Mobile Credentials. If not provided, defaults to 365 days from
            issuance date. Maximum value can be 457 days from issuance date.
    UpdateDocumentSignerRequest:
      title: UpdateDocumentSignerRequest
      type: object
      required:
        - active
      properties:
        active:
          description: >-
            This required parameter defines the status of the created DSC. Only
            active DSCs can be used to sign Mobile Credentials.
          type: boolean
    ValidityInfo:
      title: ValidityInfo
      type: object
      required:
        - validUntil
      properties:
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        expectedUpdate:
          type: string
          format: date-time
    ClaimItem:
      title: ClaimItem
      type: object
      required:
        - value
        - type
      properties:
        value:
          type: string
        type:
          type: string
          enum:
            - boolean
            - number
            - string
            - binary
            - date
            - object
            - array
    Claim:
      title: Claim
      type: object
      additionalProperties:
        title: ClaimItem
        type: object
        required:
          - value
          - type
        properties:
          value:
            type: string
          type:
            type: string
            enum:
              - boolean
              - number
              - string
              - binary
              - date
              - object
              - array
    IssuerNamespacesToSign:
      title: IssuerNamespacesToSign
      type: object
      additionalProperties:
        title: Claim
        type: object
        additionalProperties:
          title: ClaimItem
          type: object
          required:
            - value
            - type
          properties:
            value:
              type: string
            type:
              type: string
              enum:
                - boolean
                - number
                - string
                - binary
                - date
                - object
                - array
      example:
        org.iso.18013.5.1:
          given_name:
            value: John
            type: string
          family_name:
            value: Doe
            type: string
    MobileCredentialBranding:
      type: object
      example:
        name: Example Branding
        description: Example Branding Description
        backgroundColor: '#FFFFFF'
        watermarkImage: data:image/png;base64,{image-data}
        issuerLogo: data:image/png;base64,{image-data}
        issuerIcon: data:image/svg+xml;base64,{image-data}
      properties:
        name:
          type: string
        description:
          type: string
        backgroundColor:
          type: string
        watermarkImage:
          type: string
        issuerLogo:
          type: string
        issuerIcon:
          type: string
    SignRequestPayload:
      title: SignRequestPayload
      type: object
      required:
        - deviceKeyInfo
        - docType
        - validityInfo
        - itemsToSign
      properties:
        deviceKeyInfo:
          type: object
          properties:
            devicekey:
              type: object
              example:
                kty: EC
                crv: P-256
                x: jKAl2NpqH74ZxdeTKFzyBZx2wApbu0YKjENFQAAxMsM
                'y': QilxqwP16cUuprqeVptoCTqJVWzQYJi0J_32h_BwrCY
        docType:
          type: string
          example: org.iso.18013.5.1.mDL
        validityInfo:
          title: ValidityInfo
          type: object
          required:
            - validUntil
          properties:
            validFrom:
              type: string
              format: date-time
            validUntil:
              type: string
              format: date-time
            expectedUpdate:
              type: string
              format: date-time
        itemsToSign:
          title: IssuerNamespacesToSign
          type: object
          additionalProperties:
            title: Claim
            type: object
            additionalProperties:
              title: ClaimItem
              type: object
              required:
                - value
                - type
              properties:
                value:
                  type: string
                type:
                  type: string
                  enum:
                    - boolean
                    - number
                    - string
                    - binary
                    - date
                    - object
                    - array
          example:
            org.iso.18013.5.1:
              given_name:
                value: John
                type: string
              family_name:
                value: Doe
                type: string
        branding:
          type: object
          example:
            name: Example Branding
            description: Example Branding Description
            backgroundColor: '#FFFFFF'
            watermarkImage: data:image/png;base64,{image-data}
            issuerLogo: data:image/png;base64,{image-data}
            issuerIcon: data:image/svg+xml;base64,{image-data}
          properties:
            name:
              type: string
            description:
              type: string
            backgroundColor:
              type: string
            watermarkImage:
              type: string
            issuerLogo:
              type: string
            issuerIcon:
              type: string
    SignRequest:
      title: SignRequest
      type: object
      required:
        - payload
      properties:
        payload:
          title: SignRequestPayload
          type: object
          required:
            - deviceKeyInfo
            - docType
            - validityInfo
            - itemsToSign
          properties:
            deviceKeyInfo:
              type: object
              properties:
                devicekey:
                  type: object
                  example:
                    kty: EC
                    crv: P-256
                    x: jKAl2NpqH74ZxdeTKFzyBZx2wApbu0YKjENFQAAxMsM
                    'y': QilxqwP16cUuprqeVptoCTqJVWzQYJi0J_32h_BwrCY
            docType:
              type: string
              example: org.iso.18013.5.1.mDL
            validityInfo:
              title: ValidityInfo
              type: object
              required:
                - validUntil
              properties:
                validFrom:
                  type: string
                  format: date-time
                validUntil:
                  type: string
                  format: date-time
                expectedUpdate:
                  type: string
                  format: date-time
            itemsToSign:
              title: IssuerNamespacesToSign
              type: object
              additionalProperties:
                title: Claim
                type: object
                additionalProperties:
                  title: ClaimItem
                  type: object
                  required:
                    - value
                    - type
                  properties:
                    value:
                      type: string
                    type:
                      type: string
                      enum:
                        - boolean
                        - number
                        - string
                        - binary
                        - date
                        - object
                        - array
              example:
                org.iso.18013.5.1:
                  given_name:
                    value: John
                    type: string
                  family_name:
                    value: Doe
                    type: string
            branding:
              type: object
              example:
                name: Example Branding
                description: Example Branding Description
                backgroundColor: '#FFFFFF'
                watermarkImage: data:image/png;base64,{image-data}
                issuerLogo: data:image/png;base64,{image-data}
                issuerIcon: data:image/svg+xml;base64,{image-data}
              properties:
                name:
                  type: string
                description:
                  type: string
                backgroundColor:
                  type: string
                watermarkImage:
                  type: string
                issuerLogo:
                  type: string
                issuerIcon:
                  type: string
        documentSignerId:
          type: string
          format: uuid
          description: >-
            Identifier of the DSC that will be used to sign the Mobile
            Credential.
    SignResponse:
      title: SignResponse
      type: object
      required:
        - encoded
        - decoded
      properties:
        encoded:
          type: string
        decoded:
          type: object
          properties:
            namespaces:
              type: object
              description: Contains data elements / credential claims.
              example:
                org.iso.18013.5.1:
                  digestID: 10
                  random: K5eA64iprBx903wg0T59Nw==
                  elementIdentifier: given_name
                  elementValue:
                    type: string
                    value: jae
            issuerAuth:
              type: string
              description: >-
                Base64 encoded string of a COSE signed payload which contains
                the Mobile Security Object (MSO).
              example: hEOhASahGCFZAh0wg...
    ClaimMappings:
      title: ClaimMappings
      type: object
      description: >-
        This is where you specify how to map claims (user attributes) into
        issued credentials.
      example:
        org.iso.18013.5.1:
          given_name:
            mapFrom: claims.given_name
            required: true
            type: string
          birth_date:
            mapFrom: claims.date_of_birth
            required: true
            type: dateTime
      properties:
        additionalProperties:
          description: >-
            Each object corresponds to a claims source and is referenced as a
            `namespace`.
          type: object
          properties:
            additionalProperties:
              description: >-
                Each object corresponds to a claim in the issued credential, and
                contains fields that control the mapping logic.
              type: object
              properties:
                mapFrom:
                  type: string
                  description: >-
                    Path to the mapped claim in the configured claims source:

                    - When using a URL as a claims namespace identifier, use
                    bracket notation to access the claim value (e.g. mapFrom:
                    "claims['https://example.com/claim-name']").

                    - `mapForm` is optional when `defaultValue` is provided, as
                    the latter will be used for all issued credentials. This is
                    referred to as a **static claim**.
                  example: claims.given_name
                type:
                  type: string
                  description: >-
                    Claim data type. `type` is optional when `defaultValue` is
                    provided.

                    - `date` must be in YYYY-MM-DD format.

                    - `dateTime` must be in YYYY-MM-DD HH:MM:SS format ([ISO
                    8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                    compliant).

                    - `org.iso.18013.5.1.driving_privileges` is a unique type
                    for Mobile Driver Licences (mDL) and detail the holder's
                    driving privileges:
                      - `issue_date`: In YYYY-MM-DD format.
                      - `expiry_date`: In YYYY-MM-DD format.
                      - `vehicle_category_code`
                  example: string
                  enum:
                    - boolean
                    - number
                    - string
                    - binary
                    - date
                    - dateTime
                    - array
                    - object
                    - org.iso.18013.5.1.driving_privileges
                required:
                  type: boolean
                  description: >-
                    Indicates whether the claim is required (`true`) or not
                    (`false`). When a required claim is not available,
                    credential issuance will fail.
                  default: false
                defaultValue:
                  description: >-
                    Indicates what value is used if `required` is set to `false`
                    (field is optional) and no value is provided by the claims
                    source. When `defaultValue` is provided, `mapFrom` and
                    `type` are optional.
                  type: string
    components-schemas-CredentialConfiguration:
      type: object
      properties:
        type:
          description: >-
            Used to differentiate between different Mobile credential
            configurations on your tenant. Thus, its value must:

            - Be unique across all Mobile credential configurations on your
            tenant.

            - Not be `VerifiableCredential`.
          type: string
          minLength: 1
          maxLength: 1024
          example: DriverLicence
        claimMappings:
          title: ClaimMappings
          type: object
          description: >-
            This is where you specify how to map claims (user attributes) into
            issued credentials.
          example:
            org.iso.18013.5.1:
              given_name:
                mapFrom: claims.given_name
                required: true
                type: string
              birth_date:
                mapFrom: claims.date_of_birth
                required: true
                type: dateTime
          properties:
            additionalProperties:
              description: >-
                Each object corresponds to a claims source and is referenced as
                a `namespace`.
              type: object
              properties:
                additionalProperties:
                  description: >-
                    Each object corresponds to a claim in the issued credential,
                    and contains fields that control the mapping logic.
                  type: object
                  properties:
                    mapFrom:
                      type: string
                      description: >-
                        Path to the mapped claim in the configured claims
                        source:

                        - When using a URL as a claims namespace identifier, use
                        bracket notation to access the claim value (e.g.
                        mapFrom: "claims['https://example.com/claim-name']").

                        - `mapForm` is optional when `defaultValue` is provided,
                        as the latter will be used for all issued credentials.
                        This is referred to as a **static claim**.
                      example: claims.given_name
                    type:
                      type: string
                      description: >-
                        Claim data type. `type` is optional when `defaultValue`
                        is provided.

                        - `date` must be in YYYY-MM-DD format.

                        - `dateTime` must be in YYYY-MM-DD HH:MM:SS format ([ISO
                        8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                        compliant).

                        - `org.iso.18013.5.1.driving_privileges` is a unique
                        type for Mobile Driver Licences (mDL) and detail the
                        holder's driving privileges:
                          - `issue_date`: In YYYY-MM-DD format.
                          - `expiry_date`: In YYYY-MM-DD format.
                          - `vehicle_category_code`
                      example: string
                      enum:
                        - boolean
                        - number
                        - string
                        - binary
                        - date
                        - dateTime
                        - array
                        - object
                        - org.iso.18013.5.1.driving_privileges
                    required:
                      type: boolean
                      description: >-
                        Indicates whether the claim is required (`true`) or not
                        (`false`). When a required claim is not available,
                        credential issuance will fail.
                      default: false
                    defaultValue:
                      description: >-
                        Indicates what value is used if `required` is set to
                        `false` (field is optional) and no value is provided by
                        the claims source. When `defaultValue` is provided,
                        `mapFrom` and `type` are optional.
                      type: string
        claimSourceId:
          type: string
          format: uuid
          description: >-
            References the unique identifier of a claims source that can be used
            to retrieve claims and include them in the issued credential.
        expiresIn:
          type: object
          description: >-
            Used to determine when will issued credentials expire. Can include
            any combination of years, months, weeks, days, hours, minutes and
            seconds. Note that credential issuance will fail if the credential
            expiry date is later than that of the [Document Signer Certificate
            (DSC)](#tag/DSC) used to sign it.
          properties:
            years:
              type: number
            months:
              type: number
              example: 1
            weeks:
              type: number
            days:
              type: number
            hours:
              type: number
            minutes:
              type: number
            seconds:
              type: number
    components-schemas-CredentialConfigurationResponse:
      required:
        - id
        - type
        - expiresIn
        - claimMappings
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: >-
                Uniquely identifies the created credential configuration. This
                identifier can be used to create an offer based on this
                credential configuration, or to retrieve, update or remove the
                credential configuration.
              example: 983c0a86-204f-4431-9371-f5a22e506599
            branding:
              type: object
              description: Credential branding information
              example:
                name: Credential name
                description: Credential Description
                backgroundColor: '#FFFFFF'
                watermarkImage: data:image/png;base64,{image-data}
                issuerLogo: data:image/png;base64,{image-data}
                issuerIcon: data:image/svg+xml;base64,{image-data}
              properties:
                name:
                  description: >-
                    This string is displayed on the top part of the credential
                    in the holder's digital wallet.
                  type: string
                description:
                  description: >-
                    This string is displayed below the name field on the
                    credential in the holder's digital wallet.
                  type: string
                backgroundColor:
                  description: >-
                    Colour hex code used for the credential background color in
                    the holder's digital wallet.
                  type: string
                watermarkImage:
                  description: >-
                    Watermarks are displayed included as a pattern on the
                    credential in the holder's digital wallet. You can provide
                    either a URL to the image, or a Data URI (base64 encoded)
                    with the following requirements:

                    - URL/URI must be publicly available.

                    - File must be 245x150 px in size.

                    - **svg** and **png** files are supported. We recommend
                    using **svg** files to allow proper scaling across the UI
                    and enable optimal performance.

                    - If no watermark image is provided, a wave pattern is
                    applied to the credentials by default.

                    - The recommended maximum size is 150 KB.
                  type: string
                issuerLogo:
                  description: >-
                    The issuer logo is displayed on the bottom part of the
                    credential in the holder's digital wallet. You can provide
                    either a URL to the image, or a Data URI (base64 encoded)
                    with the following requirements:

                    - URL/URI must be publicly available.

                    - File must be 140x42 px in size.

                    - **svg** and **png** files are supported. We recommend
                    using **svg** files to allow proper scaling across the UI
                    and enable optimal performance.

                    - Transparencies are allowed for **svg** and **png** files.

                    - The recommended maximum size is 50 KB.

                    - If no logo is provided, the first letter of the issuer
                    name is displayed instead.
                  type: string
                issuerIcon:
                  description: >-
                    The issuer icon is displayed next to the issuer's logo on
                    the bottom part of the credential in the holder's digital
                    wallet. You can provide either a URL to the image, or a Data
                    URI (base64 encoded) with the following requirements:

                    - URL/URI must be publicly available.

                    - File must be 32x32 px in size.

                    - **svg** and **png** files are supported. We recommend
                    using **svg** files to allow proper scaling across the UI
                    and enable optimal performance.

                    - Transparencies are allowed for **svg** and **png** files.

                    - The recommended maximum size is 15 KB.
                  type: string
        - type: object
          properties:
            type:
              description: >-
                Used to differentiate between different Mobile credential
                configurations on your tenant. Thus, its value must:

                - Be unique across all Mobile credential configurations on your
                tenant.

                - Not be `VerifiableCredential`.
              type: string
              minLength: 1
              maxLength: 1024
              example: DriverLicence
            claimMappings:
              title: ClaimMappings
              type: object
              description: >-
                This is where you specify how to map claims (user attributes)
                into issued credentials.
              example:
                org.iso.18013.5.1:
                  given_name:
                    mapFrom: claims.given_name
                    required: true
                    type: string
                  birth_date:
                    mapFrom: claims.date_of_birth
                    required: true
                    type: dateTime
              properties:
                additionalProperties:
                  description: >-
                    Each object corresponds to a claims source and is referenced
                    as a `namespace`.
                  type: object
                  properties:
                    additionalProperties:
                      description: >-
                        Each object corresponds to a claim in the issued
                        credential, and contains fields that control the mapping
                        logic.
                      type: object
                      properties:
                        mapFrom:
                          type: string
                          description: >-
                            Path to the mapped claim in the configured claims
                            source:

                            - When using a URL as a claims namespace identifier,
                            use bracket notation to access the claim value (e.g.
                            mapFrom:
                            "claims['https://example.com/claim-name']").

                            - `mapForm` is optional when `defaultValue` is
                            provided, as the latter will be used for all issued
                            credentials. This is referred to as a **static
                            claim**.
                          example: claims.given_name
                        type:
                          type: string
                          description: >-
                            Claim data type. `type` is optional when
                            `defaultValue` is provided.

                            - `date` must be in YYYY-MM-DD format.

                            - `dateTime` must be in YYYY-MM-DD HH:MM:SS format
                            ([ISO
                            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                            compliant).

                            - `org.iso.18013.5.1.driving_privileges` is a unique
                            type for Mobile Driver Licences (mDL) and detail the
                            holder's driving privileges:
                              - `issue_date`: In YYYY-MM-DD format.
                              - `expiry_date`: In YYYY-MM-DD format.
                              - `vehicle_category_code`
                          example: string
                          enum:
                            - boolean
                            - number
                            - string
                            - binary
                            - date
                            - dateTime
                            - array
                            - object
                            - org.iso.18013.5.1.driving_privileges
                        required:
                          type: boolean
                          description: >-
                            Indicates whether the claim is required (`true`) or
                            not (`false`). When a required claim is not
                            available, credential issuance will fail.
                          default: false
                        defaultValue:
                          description: >-
                            Indicates what value is used if `required` is set to
                            `false` (field is optional) and no value is provided
                            by the claims source. When `defaultValue` is
                            provided, `mapFrom` and `type` are optional.
                          type: string
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of years, months, weeks, days, hours,
                minutes and seconds. Note that credential issuance will fail if
                the credential expiry date is later than that of the [Document
                Signer Certificate (DSC)](#tag/DSC) used to sign it.
              properties:
                years:
                  type: number
                months:
                  type: number
                  example: 1
                weeks:
                  type: number
                days:
                  type: number
                hours:
                  type: number
                minutes:
                  type: number
                seconds:
                  type: number
      title: CredentialConfigurationResponse
    components-schemas-GetCredentialConfigurationsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            required:
              - id
              - type
              - expiresIn
              - claimMappings
            allOf:
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Uniquely identifies the created credential configuration.
                      This identifier can be used to create an offer based on
                      this credential configuration, or to retrieve, update or
                      remove the credential configuration.
                    example: 983c0a86-204f-4431-9371-f5a22e506599
                  branding:
                    type: object
                    description: Credential branding information
                    example:
                      name: Credential name
                      description: Credential Description
                      backgroundColor: '#FFFFFF'
                      watermarkImage: data:image/png;base64,{image-data}
                      issuerLogo: data:image/png;base64,{image-data}
                      issuerIcon: data:image/svg+xml;base64,{image-data}
                    properties:
                      name:
                        description: >-
                          This string is displayed on the top part of the
                          credential in the holder's digital wallet.
                        type: string
                      description:
                        description: >-
                          This string is displayed below the name field on the
                          credential in the holder's digital wallet.
                        type: string
                      backgroundColor:
                        description: >-
                          Colour hex code used for the credential background
                          color in the holder's digital wallet.
                        type: string
                      watermarkImage:
                        description: >-
                          Watermarks are displayed included as a pattern on the
                          credential in the holder's digital wallet. You can
                          provide either a URL to the image, or a Data URI
                          (base64 encoded) with the following requirements:

                          - URL/URI must be publicly available.

                          - File must be 245x150 px in size.

                          - **svg** and **png** files are supported. We
                          recommend using **svg** files to allow proper scaling
                          across the UI and enable optimal performance.

                          - If no watermark image is provided, a wave pattern is
                          applied to the credentials by default.

                          - The recommended maximum size is 150 KB.
                        type: string
                      issuerLogo:
                        description: >-
                          The issuer logo is displayed on the bottom part of the
                          credential in the holder's digital wallet. You can
                          provide either a URL to the image, or a Data URI
                          (base64 encoded) with the following requirements:

                          - URL/URI must be publicly available.

                          - File must be 140x42 px in size.

                          - **svg** and **png** files are supported. We
                          recommend using **svg** files to allow proper scaling
                          across the UI and enable optimal performance.

                          - Transparencies are allowed for **svg** and **png**
                          files.

                          - The recommended maximum size is 50 KB.

                          - If no logo is provided, the first letter of the
                          issuer name is displayed instead.
                        type: string
                      issuerIcon:
                        description: >-
                          The issuer icon is displayed next to the issuer's logo
                          on the bottom part of the credential in the holder's
                          digital wallet. You can provide either a URL to the
                          image, or a Data URI (base64 encoded) with the
                          following requirements:

                          - URL/URI must be publicly available.

                          - File must be 32x32 px in size.

                          - **svg** and **png** files are supported. We
                          recommend using **svg** files to allow proper scaling
                          across the UI and enable optimal performance.

                          - Transparencies are allowed for **svg** and **png**
                          files.

                          - The recommended maximum size is 15 KB.
                        type: string
              - type: object
                properties:
                  type:
                    description: >-
                      Used to differentiate between different Mobile credential
                      configurations on your tenant. Thus, its value must:

                      - Be unique across all Mobile credential configurations on
                      your tenant.

                      - Not be `VerifiableCredential`.
                    type: string
                    minLength: 1
                    maxLength: 1024
                    example: DriverLicence
                  claimMappings:
                    title: ClaimMappings
                    type: object
                    description: >-
                      This is where you specify how to map claims (user
                      attributes) into issued credentials.
                    example:
                      org.iso.18013.5.1:
                        given_name:
                          mapFrom: claims.given_name
                          required: true
                          type: string
                        birth_date:
                          mapFrom: claims.date_of_birth
                          required: true
                          type: dateTime
                    properties:
                      additionalProperties:
                        description: >-
                          Each object corresponds to a claims source and is
                          referenced as a `namespace`.
                        type: object
                        properties:
                          additionalProperties:
                            description: >-
                              Each object corresponds to a claim in the issued
                              credential, and contains fields that control the
                              mapping logic.
                            type: object
                            properties:
                              mapFrom:
                                type: string
                                description: >-
                                  Path to the mapped claim in the configured
                                  claims source:

                                  - When using a URL as a claims namespace
                                  identifier, use bracket notation to access the
                                  claim value (e.g. mapFrom:
                                  "claims['https://example.com/claim-name']").

                                  - `mapForm` is optional when `defaultValue` is
                                  provided, as the latter will be used for all
                                  issued credentials. This is referred to as a
                                  **static claim**.
                                example: claims.given_name
                              type:
                                type: string
                                description: >-
                                  Claim data type. `type` is optional when
                                  `defaultValue` is provided.

                                  - `date` must be in YYYY-MM-DD format.

                                  - `dateTime` must be in YYYY-MM-DD HH:MM:SS
                                  format ([ISO
                                  8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                                  compliant).

                                  - `org.iso.18013.5.1.driving_privileges` is a
                                  unique type for Mobile Driver Licences (mDL)
                                  and detail the holder's driving privileges:
                                    - `issue_date`: In YYYY-MM-DD format.
                                    - `expiry_date`: In YYYY-MM-DD format.
                                    - `vehicle_category_code`
                                example: string
                                enum:
                                  - boolean
                                  - number
                                  - string
                                  - binary
                                  - date
                                  - dateTime
                                  - array
                                  - object
                                  - org.iso.18013.5.1.driving_privileges
                              required:
                                type: boolean
                                description: >-
                                  Indicates whether the claim is required
                                  (`true`) or not (`false`). When a required
                                  claim is not available, credential issuance
                                  will fail.
                                default: false
                              defaultValue:
                                description: >-
                                  Indicates what value is used if `required` is
                                  set to `false` (field is optional) and no
                                  value is provided by the claims source. When
                                  `defaultValue` is provided, `mapFrom` and
                                  `type` are optional.
                                type: string
                  claimSourceId:
                    type: string
                    format: uuid
                    description: >-
                      References the unique identifier of a claims source that
                      can be used to retrieve claims and include them in the
                      issued credential.
                  expiresIn:
                    type: object
                    description: >-
                      Used to determine when will issued credentials expire. Can
                      include any combination of years, months, weeks, days,
                      hours, minutes and seconds. Note that credential issuance
                      will fail if the credential expiry date is later than that
                      of the [Document Signer Certificate (DSC)](#tag/DSC) used
                      to sign it.
                    properties:
                      years:
                        type: number
                      months:
                        type: number
                        example: 1
                      weeks:
                        type: number
                      days:
                        type: number
                      hours:
                        type: number
                      minutes:
                        type: number
                      seconds:
                        type: number
            title: CredentialConfigurationResponse
      title: GetCredentialConfigurationsResponse
    components-schemas-CredentialConfigurationRequest:
      required:
        - type
        - expiresIn
        - claimMappings
      allOf:
        - type: object
          properties:
            type:
              description: >-
                Used to differentiate between different Mobile credential
                configurations on your tenant. Thus, its value must:

                - Be unique across all Mobile credential configurations on your
                tenant.

                - Not be `VerifiableCredential`.
              type: string
              minLength: 1
              maxLength: 1024
              example: DriverLicence
            claimMappings:
              title: ClaimMappings
              type: object
              description: >-
                This is where you specify how to map claims (user attributes)
                into issued credentials.
              example:
                org.iso.18013.5.1:
                  given_name:
                    mapFrom: claims.given_name
                    required: true
                    type: string
                  birth_date:
                    mapFrom: claims.date_of_birth
                    required: true
                    type: dateTime
              properties:
                additionalProperties:
                  description: >-
                    Each object corresponds to a claims source and is referenced
                    as a `namespace`.
                  type: object
                  properties:
                    additionalProperties:
                      description: >-
                        Each object corresponds to a claim in the issued
                        credential, and contains fields that control the mapping
                        logic.
                      type: object
                      properties:
                        mapFrom:
                          type: string
                          description: >-
                            Path to the mapped claim in the configured claims
                            source:

                            - When using a URL as a claims namespace identifier,
                            use bracket notation to access the claim value (e.g.
                            mapFrom:
                            "claims['https://example.com/claim-name']").

                            - `mapForm` is optional when `defaultValue` is
                            provided, as the latter will be used for all issued
                            credentials. This is referred to as a **static
                            claim**.
                          example: claims.given_name
                        type:
                          type: string
                          description: >-
                            Claim data type. `type` is optional when
                            `defaultValue` is provided.

                            - `date` must be in YYYY-MM-DD format.

                            - `dateTime` must be in YYYY-MM-DD HH:MM:SS format
                            ([ISO
                            8601](https://www.iso.org/iso-8601-date-and-time-format.html)
                            compliant).

                            - `org.iso.18013.5.1.driving_privileges` is a unique
                            type for Mobile Driver Licences (mDL) and detail the
                            holder's driving privileges:
                              - `issue_date`: In YYYY-MM-DD format.
                              - `expiry_date`: In YYYY-MM-DD format.
                              - `vehicle_category_code`
                          example: string
                          enum:
                            - boolean
                            - number
                            - string
                            - binary
                            - date
                            - dateTime
                            - array
                            - object
                            - org.iso.18013.5.1.driving_privileges
                        required:
                          type: boolean
                          description: >-
                            Indicates whether the claim is required (`true`) or
                            not (`false`). When a required claim is not
                            available, credential issuance will fail.
                          default: false
                        defaultValue:
                          description: >-
                            Indicates what value is used if `required` is set to
                            `false` (field is optional) and no value is provided
                            by the claims source. When `defaultValue` is
                            provided, `mapFrom` and `type` are optional.
                          type: string
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of years, months, weeks, days, hours,
                minutes and seconds. Note that credential issuance will fail if
                the credential expiry date is later than that of the [Document
                Signer Certificate (DSC)](#tag/DSC) used to sign it.
              properties:
                years:
                  type: number
                months:
                  type: number
                  example: 1
                weeks:
                  type: number
                days:
                  type: number
                hours:
                  type: number
                minutes:
                  type: number
                seconds:
                  type: number
        - type: object
          properties:
            branding:
              type: object
              description: Used to apply branding to issued credentials.
              example:
                name: Credential name
                description: Credential Description
                backgroundColor: '#FFFFFF'
                watermarkImage: data:image/png;base64,{image-data}
                issuerLogo: https://example-path-to-image-data.com
                issuerIcon: data:image/svg+xml;base64,{image-data}
              properties:
                name:
                  description: >-
                    Insert a meaningful name for the credential. This string is
                    displayed on the top part of the credential in the holder's
                    digital wallet.
                  type: string
                description:
                  description: >-
                    Insert a meaningful description for the credential. This
                    string is displayed below the name field on the credential
                    in the holder's digital wallet.
                  type: string
                backgroundColor:
                  description: >-
                    Insert a colour hex code to use for the credential
                    background color in the holder's digital wallet.
                  type: string
                watermarkImage:
                  description: >-
                    Watermarks are displayed included as a pattern on the
                    credential in the holder's digital wallet. You can provide
                    either a URL to the image, or a Data URI (base64 encoded)
                    with the following requirements:

                    - URL/URI must be publicly available.

                    - File must be 245x150 px in size.

                    - **svg** and **png** files are supported. We recommend
                    using **svg** files to allow proper scaling across the UI
                    and enable optimal performance.

                    - If no watermark image is provided, a wave pattern is
                    applied to the credentials by default.

                    - The recommended maximum size is 150 KB.
                  type: string
                issuerLogo:
                  description: >-
                    The issuer logo is displayed on the bottom part of the
                    credential in the holder's digital wallet. When not
                    provided, the issuer's name and `issuerIcon` are used
                    instead. You can provide either a URL to the image, or a
                    Data URI (base64 encoded) with the following requirements:

                    - URL/URI must be publicly available.

                    - File must be 140x42 px in size.

                    - **svg** and **png** files are supported. We recommend
                    using **svg** files to allow proper scaling across the UI
                    and enable optimal performance.

                    - Transparencies are allowed for **svg** and **png** files.

                    - The recommended maximum size is 50 KB.

                    - If no logo is provided, the first letter of the issuer
                    name is displayed instead.
                  type: string
                issuerIcon:
                  description: >-
                    The issuer icon is displayed next to the issuer's name when
                    the credential is offered to the holder. It is also
                    displayed next to the issuer's name on the bottom part of
                    the credential when `issuerLogo` is not provided. When
                    `issuerIcon` is not provided, the first letter from the
                    issuer name is used instead. You can provide either a URL to
                    the image, or a Data URI (base64 encoded) with the following
                    requirements:

                    - URL/URI must be publicly available.

                    - File must be 32x32 px in size.

                    - **svg** and **png** files are supported. We recommend
                    using **svg** files to allow proper scaling across the UI
                    and enable optimal performance.

                    - Transparencies are allowed for **svg** and **png** files.

                    - The recommended maximum size is 15 KB.
                  type: string
      title: CreateCredentialConfigurationRequest
    GetUserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier.
          example: 0c3fad74-a8df-4a2d-8e75-f2d356b413ba
        claims:
          type: object
          description: User claims.
          example:
            givenName: Patrick John
            familyName: Smith
            dob: '1990-06-01'
      title: GetUserResponse
    SearchUsersResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          description: Includes all matching user objects.
          items:
            allOf:
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: User unique identifier.
                    example: 0c3fad74-a8df-4a2d-8e75-f2d356b413ba
                  claims:
                    type: object
                    description: User claims.
                    example:
                      givenName: Patrick John
                      familyName: Smith
                      dob: '1990-06-01'
                title: GetUserResponse
              - type: object
                properties:
                  authenticationProvider:
                    type: object
                    description: Authentication Provider information for the user.
                    properties:
                      url:
                        type: string
                        description: Authentication Provider url.
                        example: https://example-university.au.auth0.com
                      subjectId:
                        type: string
                        description: >-
                          Unique identifier of the user in the Authentication
                          Provider.
                        example: example-university-oauth2|123456789
      title: SearchUsersResponse
    GetUsersResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          description: Includes matching user objects.
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: User unique identifier.
                example: 0c3fad74-a8df-4a2d-8e75-f2d356b413ba
              claims:
                type: object
                description: User claims.
                example:
                  givenName: Patrick John
                  familyName: Smith
                  dob: '1990-06-01'
            title: GetUserResponse
      title: GetUsersResponse
    UpdateUserRequest:
      type: object
      required:
        - claims
      properties:
        claims:
          type: object
          description: User claims to be updated.
          example:
            givenName: Patrick John
            familyName: Smith
            dob: '1990-06-01'
      title: UpdateUserRequest
    GetUserCredentialsResponse:
      type: object
      properties:
        data:
          type: array
          description: >-
            Includes metadata for all credentials referenced by the provided
            `Userid`.
          items:
            type: object
            properties:
              id:
                type: string
                description: Credential unique identifier.
                example: 552b35fe-a3ed-4c33-8c3c-64810c712323
              type:
                type: string
                description: Credential type.
                example: CourseCredential
              profile:
                type: string
                enum:
                  - web-semantic
                description: Credential profile.
                example: web-semantic
      title: GetUserCredentialsResponse
    AuthenticationProviderSchema:
      type: object
      required:
        - clientId
      properties:
        scope:
          type: array
          description: >-
            OpenID scopes to use during authentication. Each scope returns a set
            of user attributes which are called claims. Be sure to test that
            right scopes are added to get all the information you need.
          example:
            - email
          default:
            - openid
            - profile
            - email
          items:
            type: string
        clientId:
          type: string
          description: The client ID of the application client created on your IdP.
          example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
        clientSecret:
          type: string
          description: The client secret of the application client created on your IdP.
        tokenEndpointAuthMethod:
          type: string
          description: >-
            Authentication method for your IdP token endpoint:

            - `client_secret_post`: Your credentials are passed as parameters in
            the request body.

            - `client_secret_basic` (default): Your credentials are passed as a
            base 64 encoded token.
          example: client_secret_post
          default: client_secret_basic
          enum:
            - client_secret_basic
            - client_secret_post
        staticRequestParameters:
          type: object
          maxProperties: 1000
          description: >-
            Additional parameters (maximum 1000 entries allowed) that will be
            included in the request to your IdP. These parameters are identical
            for every request as defined in your configuration. An example would
            be setting the prompt to be login to let your IdP know it should
            show the login page every time. Keys must be strings. Values of
            top-level object keys must stringify to less than 1000 characters.
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
              - type: array
              - type: object
          example:
            prompt: login
            max_age: 10000
        forwardedRequestParameters:
          type: array
          description: >-
            In contrast to `staticRequestParameters`, you can provide dynamic
            parameters that are fetched uniquely for each request to make the
            user journey more seamless. You can forward params to your IdP like
            `login_hint` which will pass the email of the user starting the
            flow. Values are limited to 1000 characters each, and cannot
            override any core [Authorize
            Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
          examples:
            - login_hint
          items:
            type: string
            maxLength: 1000
        claimsToPersist:
          type: array
          description: >-
            List of claims to persist from your IdP to MATTR VII. If you have
            attributes from the ID token (e.g. email, picture, etc.) that you
            would like persisted on MATTR VII, add them to this array. By
            default this array is empty, meaning no claims are persisted on
            MATTR VII.
          items:
            type: string
          default: []
          example:
            - first_name
            - last_name
            - email
    CreateAuthenticationProviderResponse:
      required:
        - clientSecret
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: >-
                Unique identifier for the configured authentication provider.
                This identifier can be used to retrieve, update or remove the
                authentication provider configuration.
              example: 983c0a86-204f-4431-9371-f5a22e506599
            redirectUrl:
              type: string
              format: uri
              description: >-
                You will need to add this URL to your IdP's allowed redirects
                list, to enable it to redirect the user back to the wallet upon
                successful authentication with your IdP. If you are using Auth0
                as your identity provider, [this
                guide](https://auth0.com/docs/authenticate/login/redirect-users-after-login)
                shows how to add callback URLs. For others, consult your
                provider for instructions on adding callback URLs.
              example: >-
                https://tenant.vii.mattr.global/core/v1/oauth/authentication/callback
            url:
              type: string
              format: uri
              description: Base url for your Authentication Provider well-known endpoint.
        - type: object
          required:
            - clientId
          properties:
            scope:
              type: array
              description: >-
                OpenID scopes to use during authentication. Each scope returns a
                set of user attributes which are called claims. Be sure to test
                that right scopes are added to get all the information you need.
              example:
                - email
              default:
                - openid
                - profile
                - email
              items:
                type: string
            clientId:
              type: string
              description: The client ID of the application client created on your IdP.
              example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
            clientSecret:
              type: string
              description: The client secret of the application client created on your IdP.
            tokenEndpointAuthMethod:
              type: string
              description: >-
                Authentication method for your IdP token endpoint:

                - `client_secret_post`: Your credentials are passed as
                parameters in the request body.

                - `client_secret_basic` (default): Your credentials are passed
                as a base 64 encoded token.
              example: client_secret_post
              default: client_secret_basic
              enum:
                - client_secret_basic
                - client_secret_post
            staticRequestParameters:
              type: object
              maxProperties: 1000
              description: >-
                Additional parameters (maximum 1000 entries allowed) that will
                be included in the request to your IdP. These parameters are
                identical for every request as defined in your configuration. An
                example would be setting the prompt to be login to let your IdP
                know it should show the login page every time. Keys must be
                strings. Values of top-level object keys must stringify to less
                than 1000 characters.
              additionalProperties:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: array
                  - type: object
              example:
                prompt: login
                max_age: 10000
            forwardedRequestParameters:
              type: array
              description: >-
                In contrast to `staticRequestParameters`, you can provide
                dynamic parameters that are fetched uniquely for each request to
                make the user journey more seamless. You can forward params to
                your IdP like `login_hint` which will pass the email of the user
                starting the flow. Values are limited to 1000 characters each,
                and cannot override any core [Authorize
                Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
              examples:
                - login_hint
              items:
                type: string
                maxLength: 1000
            claimsToPersist:
              type: array
              description: >-
                List of claims to persist from your IdP to MATTR VII. If you
                have attributes from the ID token (e.g. email, picture, etc.)
                that you would like persisted on MATTR VII, add them to this
                array. By default this array is empty, meaning no claims are
                persisted on MATTR VII.
              items:
                type: string
              default: []
              example:
                - first_name
                - last_name
                - email
        - type: object
          properties:
            clientSecret:
              type: string
              description: >-
                Your authentication provider client secret will be masked in the
                response without revealing the actual secret. If the secret is
                less than 20 characters it will be completely masked, and if it
                is over 20 only the last 5 characters are revealed.
              example: '***********************************************************6-OjH'
      title: CreateAuthenticationProviderResponse
    GetAuthenticationProvidersResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            required:
              - clientSecret
            allOf:
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: >-
                      Unique identifier for the configured authentication
                      provider. This identifier can be used to retrieve, update
                      or remove the authentication provider configuration.
                    example: 983c0a86-204f-4431-9371-f5a22e506599
                  redirectUrl:
                    type: string
                    format: uri
                    description: >-
                      You will need to add this URL to your IdP's allowed
                      redirects list, to enable it to redirect the user back to
                      the wallet upon successful authentication with your IdP.
                      If you are using Auth0 as your identity provider, [this
                      guide](https://auth0.com/docs/authenticate/login/redirect-users-after-login)
                      shows how to add callback URLs. For others, consult your
                      provider for instructions on adding callback URLs.
                    example: >-
                      https://tenant.vii.mattr.global/core/v1/oauth/authentication/callback
                  url:
                    type: string
                    format: uri
                    description: >-
                      Base url for your Authentication Provider well-known
                      endpoint.
              - type: object
                required:
                  - clientId
                properties:
                  scope:
                    type: array
                    description: >-
                      OpenID scopes to use during authentication. Each scope
                      returns a set of user attributes which are called claims.
                      Be sure to test that right scopes are added to get all the
                      information you need.
                    example:
                      - email
                    default:
                      - openid
                      - profile
                      - email
                    items:
                      type: string
                  clientId:
                    type: string
                    description: >-
                      The client ID of the application client created on your
                      IdP.
                    example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
                  clientSecret:
                    type: string
                    description: >-
                      The client secret of the application client created on
                      your IdP.
                  tokenEndpointAuthMethod:
                    type: string
                    description: >-
                      Authentication method for your IdP token endpoint:

                      - `client_secret_post`: Your credentials are passed as
                      parameters in the request body.

                      - `client_secret_basic` (default): Your credentials are
                      passed as a base 64 encoded token.
                    example: client_secret_post
                    default: client_secret_basic
                    enum:
                      - client_secret_basic
                      - client_secret_post
                  staticRequestParameters:
                    type: object
                    maxProperties: 1000
                    description: >-
                      Additional parameters (maximum 1000 entries allowed) that
                      will be included in the request to your IdP. These
                      parameters are identical for every request as defined in
                      your configuration. An example would be setting the prompt
                      to be login to let your IdP know it should show the login
                      page every time. Keys must be strings. Values of top-level
                      object keys must stringify to less than 1000 characters.
                    additionalProperties:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                        - type: object
                    example:
                      prompt: login
                      max_age: 10000
                  forwardedRequestParameters:
                    type: array
                    description: >-
                      In contrast to `staticRequestParameters`, you can provide
                      dynamic parameters that are fetched uniquely for each
                      request to make the user journey more seamless. You can
                      forward params to your IdP like `login_hint` which will
                      pass the email of the user starting the flow. Values are
                      limited to 1000 characters each, and cannot override any
                      core [Authorize
                      Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
                    examples:
                      - login_hint
                    items:
                      type: string
                      maxLength: 1000
                  claimsToPersist:
                    type: array
                    description: >-
                      List of claims to persist from your IdP to MATTR VII. If
                      you have attributes from the ID token (e.g. email,
                      picture, etc.) that you would like persisted on MATTR VII,
                      add them to this array. By default this array is empty,
                      meaning no claims are persisted on MATTR VII.
                    items:
                      type: string
                    default: []
                    example:
                      - first_name
                      - last_name
                      - email
              - type: object
                properties:
                  clientSecret:
                    type: string
                    description: >-
                      Your authentication provider client secret will be masked
                      in the response without revealing the actual secret. If
                      the secret is less than 20 characters it will be
                      completely masked, and if it is over 20 only the last 5
                      characters are revealed.
                    example: >-
                      ***********************************************************6-OjH
            title: CreateAuthenticationProviderResponse
      title: GetAuthenticationProvidersResponse
    AuthenticationProviderRequest:
      type: object
      allOf:
        - type: object
          required:
            - clientId
          properties:
            scope:
              type: array
              description: >-
                OpenID scopes to use during authentication. Each scope returns a
                set of user attributes which are called claims. Be sure to test
                that right scopes are added to get all the information you need.
              example:
                - email
              default:
                - openid
                - profile
                - email
              items:
                type: string
            clientId:
              type: string
              description: The client ID of the application client created on your IdP.
              example: vJ0SCKchr4XjC0xHNE8DkH6Pmlg2lkCN
            clientSecret:
              type: string
              description: The client secret of the application client created on your IdP.
            tokenEndpointAuthMethod:
              type: string
              description: >-
                Authentication method for your IdP token endpoint:

                - `client_secret_post`: Your credentials are passed as
                parameters in the request body.

                - `client_secret_basic` (default): Your credentials are passed
                as a base 64 encoded token.
              example: client_secret_post
              default: client_secret_basic
              enum:
                - client_secret_basic
                - client_secret_post
            staticRequestParameters:
              type: object
              maxProperties: 1000
              description: >-
                Additional parameters (maximum 1000 entries allowed) that will
                be included in the request to your IdP. These parameters are
                identical for every request as defined in your configuration. An
                example would be setting the prompt to be login to let your IdP
                know it should show the login page every time. Keys must be
                strings. Values of top-level object keys must stringify to less
                than 1000 characters.
              additionalProperties:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: array
                  - type: object
              example:
                prompt: login
                max_age: 10000
            forwardedRequestParameters:
              type: array
              description: >-
                In contrast to `staticRequestParameters`, you can provide
                dynamic parameters that are fetched uniquely for each request to
                make the user journey more seamless. You can forward params to
                your IdP like `login_hint` which will pass the email of the user
                starting the flow. Values are limited to 1000 characters each,
                and cannot override any core [Authorize
                Parameters](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
              examples:
                - login_hint
              items:
                type: string
                maxLength: 1000
            claimsToPersist:
              type: array
              description: >-
                List of claims to persist from your IdP to MATTR VII. If you
                have attributes from the ID token (e.g. email, picture, etc.)
                that you would like persisted on MATTR VII, add them to this
                array. By default this array is empty, meaning no claims are
                persisted on MATTR VII.
              items:
                type: string
              default: []
              example:
                - first_name
                - last_name
                - email
        - type: object
          properties:
            clientSecret:
              description: The client secret of the application client created on your IdP.
              example: QNwfa4Yi4Im9zy1u_15n7SzWKt-9G5cdH0r1bONRpUPfN-UIRaaXv_90z8V6-OjH
    OpenIdConfigurationInteractionHookRequest:
      type: object
      description: Interaction Hook configuration.
      properties:
        url:
          type: string
          format: uri
          description: >-
            The interaction hook URL that the user will be redirected to after
            completing the authentication process:

            - Must be a valid URL.

            - Must use the HTTPS protocol.

            - Must not be an IP address.

            - Must not include query parameters. Port and fragment parameters
            will be dropped. 

            - Must have a valid public TLD.

            - Unicode will be converted to ASCII.
          example: https://example-university.com/callback
        claims:
          type: array
          description: >-
            An array of user attributes that will be returned in the
            authentication response. These claims are included in the session
            token that is sent to the interaction hook. Claims can only include
            alphanumeric characters, ''_'', or ''-''. If the value is empty or
            not defined, no claims are sent.
          items:
            type: string
          default: []
          example:
            - first_name
            - last_name
            - email
        sessionTimeoutInSec:
          type: number
          description: >-
            Interaction hook session duration (in seconds). Once a session
            expires, the user is shown an error when they are redirected. If not
            specified, the default environment session duration is applied.
          example: 1200
          minimum: 300
          maximum: 7200
        disabled:
          type: boolean
          description: >-
            Indicates whether the interactions hook is disabled. When `false`,
            the interactions hook is **enabled** and users will be redirected to
            your configured interaction hook component after they've
            authenticated themselves against your IdP.
          default: true
          example: false
      title: OpenIdConfigurationInteractionHookRequest
    OpenIdConfigurationInteractionHook:
      type: object
      description: Interaction Hook configuration.
      allOf:
        - type: object
          description: Interaction Hook configuration.
          properties:
            url:
              type: string
              format: uri
              description: >-
                The interaction hook URL that the user will be redirected to
                after completing the authentication process:

                - Must be a valid URL.

                - Must use the HTTPS protocol.

                - Must not be an IP address.

                - Must not include query parameters. Port and fragment
                parameters will be dropped. 

                - Must have a valid public TLD.

                - Unicode will be converted to ASCII.
              example: https://example-university.com/callback
            claims:
              type: array
              description: >-
                An array of user attributes that will be returned in the
                authentication response. These claims are included in the
                session token that is sent to the interaction hook. Claims can
                only include alphanumeric characters, ''_'', or ''-''. If the
                value is empty or not defined, no claims are sent.
              items:
                type: string
              default: []
              example:
                - first_name
                - last_name
                - email
            sessionTimeoutInSec:
              type: number
              description: >-
                Interaction hook session duration (in seconds). Once a session
                expires, the user is shown an error when they are redirected. If
                not specified, the default environment session duration is
                applied.
              example: 1200
              minimum: 300
              maximum: 7200
            disabled:
              type: boolean
              description: >-
                Indicates whether the interactions hook is disabled. When
                `false`, the interactions hook is **enabled** and users will be
                redirected to your configured interaction hook component after
                they've authenticated themselves against your IdP.
              default: true
              example: false
          title: OpenIdConfigurationInteractionHookRequest
        - type: object
          properties:
            secret:
              type: string
              description: >-
                A Base64 encoded HMAC secret that must be used by your
                interaction hook component to sign a new JWT with any additional
                claims that you may include. Refer to [Use an interaction
                hook](https://learn.mattr.global/tutorials/offer/openid-credential-provisioning/configure-interaction-hook/use)
                for more information.
              example: dGtUrijBOT6UUJ8JO4kAFyGfhahDlVVeIk/sPbWTa7c=
      title: OpenIdConfigurationInteractionHook
    OpenIdConfiguration:
      type: object
      properties:
        interactionHook:
          type: object
          description: Interaction Hook configuration.
          allOf:
            - type: object
              description: Interaction Hook configuration.
              properties:
                url:
                  type: string
                  format: uri
                  description: >-
                    The interaction hook URL that the user will be redirected to
                    after completing the authentication process:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not include query parameters. Port and fragment
                    parameters will be dropped. 

                    - Must have a valid public TLD.

                    - Unicode will be converted to ASCII.
                  example: https://example-university.com/callback
                claims:
                  type: array
                  description: >-
                    An array of user attributes that will be returned in the
                    authentication response. These claims are included in the
                    session token that is sent to the interaction hook. Claims
                    can only include alphanumeric characters, ''_'', or ''-''.
                    If the value is empty or not defined, no claims are sent.
                  items:
                    type: string
                  default: []
                  example:
                    - first_name
                    - last_name
                    - email
                sessionTimeoutInSec:
                  type: number
                  description: >-
                    Interaction hook session duration (in seconds). Once a
                    session expires, the user is shown an error when they are
                    redirected. If not specified, the default environment
                    session duration is applied.
                  example: 1200
                  minimum: 300
                  maximum: 7200
                disabled:
                  type: boolean
                  description: >-
                    Indicates whether the interactions hook is disabled. When
                    `false`, the interactions hook is **enabled** and users will
                    be redirected to your configured interaction hook component
                    after they've authenticated themselves against your IdP.
                  default: true
                  example: false
              title: OpenIdConfigurationInteractionHookRequest
            - type: object
              properties:
                secret:
                  type: string
                  description: >-
                    A Base64 encoded HMAC secret that must be used by your
                    interaction hook component to sign a new JWT with any
                    additional claims that you may include. Refer to [Use an
                    interaction
                    hook](https://learn.mattr.global/tutorials/offer/openid-credential-provisioning/configure-interaction-hook/use)
                    for more information.
                  example: dGtUrijBOT6UUJ8JO4kAFyGfhahDlVVeIk/sPbWTa7c=
          title: OpenIdConfigurationInteractionHook
      title: OpenIdConfiguration
    UpdateOpenIdConfigurationRequest:
      type: object
      properties:
        interactionHook:
          type: object
          description: Interaction Hook configuration.
          properties:
            url:
              type: string
              format: uri
              description: >-
                The interaction hook URL that the user will be redirected to
                after completing the authentication process:

                - Must be a valid URL.

                - Must use the HTTPS protocol.

                - Must not be an IP address.

                - Must not include query parameters. Port and fragment
                parameters will be dropped. 

                - Must have a valid public TLD.

                - Unicode will be converted to ASCII.
              example: https://example-university.com/callback
            claims:
              type: array
              description: >-
                An array of user attributes that will be returned in the
                authentication response. These claims are included in the
                session token that is sent to the interaction hook. Claims can
                only include alphanumeric characters, ''_'', or ''-''. If the
                value is empty or not defined, no claims are sent.
              items:
                type: string
              default: []
              example:
                - first_name
                - last_name
                - email
            sessionTimeoutInSec:
              type: number
              description: >-
                Interaction hook session duration (in seconds). Once a session
                expires, the user is shown an error when they are redirected. If
                not specified, the default environment session duration is
                applied.
              example: 1200
              minimum: 300
              maximum: 7200
            disabled:
              type: boolean
              description: >-
                Indicates whether the interactions hook is disabled. When
                `false`, the interactions hook is **enabled** and users will be
                redirected to your configured interaction hook component after
                they've authenticated themselves against your IdP.
              default: true
              example: false
          title: OpenIdConfigurationInteractionHookRequest
      title: UpdateOpenIdConfigurationRequest
    ClaimSourceSchema:
      type: object
      required:
        - name
        - url
        - requestParameters
      properties:
        name:
          type: string
          description: Claims source name.
          example: My claims from example.com
        url:
          type: string
          description: |-
            Claims source URL:
            - Must be a valid URL.
            - Must use the HTTPS protocol.
            - Must not be an IP address.
            - Must not include query parameters.
            - Unicode will be converted to ASCII.
          example: https://example.com
        requestMethod:
          type: string
          description: >-
            Indicates the request method MATTR VII will use when retrieving data
            from this claims source. Both the GET and POST method are supported.
            If no value is provided, GET is used by default.

            When using POST, all `requestParameters` must be included in the
            request body in JSON format.
          enum:
            - GET
            - POST
        requestParameters:
          description: >-
            Use this object to define how to map request parameters that are
            sent to your claims source using the `mapFrom` and `defaultValue`
            properties:

            - When only providing `mapFrom`, the request parameter will be
            mapped from the defined path. If mapping fails, no alternative value
            is used. You can map data from both the `claims` and
            `credentialConfiguration` objects.

            - When providing both `mapFrom` and `defaultValue`, MATTR VII will
            attempt to map the request parameter from the defined path. If
            mapping fails, the `defaultValue` is used instead.

            - When only providing `defaultValue`, its value is used to populate
            the request parameter, regardless of any available claims values.
          oneOf:
            - type: object
              title: Mapping only
              required:
                - mapFrom
              properties:
                mapFrom:
                  type: string
                  description: Path to map the claim from.
                  example: claims.accountType
            - type: object
              title: Mapping with fallback
              required:
                - mapFrom
                - defaultValue
              properties:
                mapFrom:
                  type: string
                  description: Path to map the claim from.
                  example: claims.accountType
                defaultValue:
                  description: >-
                    Static value to be used when `mapFrom` fails or evaluated to
                    undefined (attribute doesn't exist).
                  oneOf:
                    - type: string
                    - type: array
                      items: {}
                    - type: object
            - type: object
              title: Static value
              required:
                - defaultValue
              properties:
                defaultValue:
                  description: >-
                    Static value to be used for all issued credentials, without
                    querying the claims source.
                  oneOf:
                    - type: string
                    - type: array
                      items: {}
                    - type: object
    ClaimSourceAuthorizationApiKeySchema:
      title: API Key
      description: API Key for claim source authorization.
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - api-key
          example: api-key
        value:
          type: string
          example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
    ClaimSourceAuthorizationApiKeyResponse:
      title: API Key
      description: API Key used to authenticate the request to the claims source server.
      required:
        - value
      allOf:
        - title: API Key
          description: API Key for claim source authorization.
          type: object
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - api-key
              example: api-key
            value:
              type: string
              example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
        - type: object
          properties:
            value:
              type: string
              description: >
                Masked API key value. Completely masked if it is less than 20
                characters, while if it is 20 characters or longer only the last
                5 characters are exposed.
              example: '****************************************61m1J'
    ClaimSourceAuthorizationOAuthSchema:
      type: object
      required:
        - type
        - tokenEndpoint
        - clientId
      properties:
        type:
          type: string
          enum:
            - oauth-client-credentials
          example:
            - oauth-client-credentials
        tokenEndpoint:
          type: string
          description: >-
            OAuth 2.0 token endpoint URL for obtaining an access token for this
            claims source.
          format: url
        clientId:
          type: string
          description: Your client identifier for this claims source.
        clientSecret:
          type: string
          description: Your client secret for this claims source.
        tokenEndpointAuthMethod:
          type: string
          enum:
            - client_secret_basic
            - client_secret_post
          description: >-
            Two authentication methods are available:

            - `client_secret_basic` (default): Credentials are passed as a base
            64 encoded basic token.

            - `client_secret_post`: Credentials are passed as parameters within
            the request body.
        audience:
          type: string
          description: Optional audience for the claims source token.
    ClaimSourceAuthorizationOAuthResponse:
      title: OAuth Client Credentials
      description: >-
        OAuth client credentials used for getting an access token for the claim
        source.
      required:
        - clientSecret
      allOf:
        - type: object
          required:
            - type
            - tokenEndpoint
            - clientId
          properties:
            type:
              type: string
              enum:
                - oauth-client-credentials
              example:
                - oauth-client-credentials
            tokenEndpoint:
              type: string
              description: >-
                OAuth 2.0 token endpoint URL for obtaining an access token for
                this claims source.
              format: url
            clientId:
              type: string
              description: Your client identifier for this claims source.
            clientSecret:
              type: string
              description: Your client secret for this claims source.
            tokenEndpointAuthMethod:
              type: string
              enum:
                - client_secret_basic
                - client_secret_post
              description: >-
                Two authentication methods are available:

                - `client_secret_basic` (default): Credentials are passed as a
                base 64 encoded basic token.

                - `client_secret_post`: Credentials are passed as parameters
                within the request body.
            audience:
              type: string
              description: Optional audience for the claims source token.
        - type: object
          properties:
            clientSecret:
              type: string
              description: >
                Masked OAuth 2.0 client secret. Completely masked if it is less
                than 20 characters, while if it is 20 characters or longer only
                the last 5 characters are exposed.
              example: '***********************************6d0f5'
    CreateClaimSourceResponse:
      description: >-
        Returns the claims source details, including a `claimSourceId`. You will
        use the this identifier to reference your claims source when creating
        your credential configuration.
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Claims source unique identifier
              example: 57fa09e2-82f3-4d3d-9eca-d0253e84a4e6
        - type: object
          required:
            - name
            - url
            - requestParameters
          properties:
            name:
              type: string
              description: Claims source name.
              example: My claims from example.com
            url:
              type: string
              description: |-
                Claims source URL:
                - Must be a valid URL.
                - Must use the HTTPS protocol.
                - Must not be an IP address.
                - Must not include query parameters.
                - Unicode will be converted to ASCII.
              example: https://example.com
            requestMethod:
              type: string
              description: >-
                Indicates the request method MATTR VII will use when retrieving
                data from this claims source. Both the GET and POST method are
                supported. If no value is provided, GET is used by default.

                When using POST, all `requestParameters` must be included in the
                request body in JSON format.
              enum:
                - GET
                - POST
            requestParameters:
              description: >-
                Use this object to define how to map request parameters that are
                sent to your claims source using the `mapFrom` and
                `defaultValue` properties:

                - When only providing `mapFrom`, the request parameter will be
                mapped from the defined path. If mapping fails, no alternative
                value is used. You can map data from both the `claims` and
                `credentialConfiguration` objects.

                - When providing both `mapFrom` and `defaultValue`, MATTR VII
                will attempt to map the request parameter from the defined path.
                If mapping fails, the `defaultValue` is used instead.

                - When only providing `defaultValue`, its value is used to
                populate the request parameter, regardless of any available
                claims values.
              oneOf:
                - type: object
                  title: Mapping only
                  required:
                    - mapFrom
                  properties:
                    mapFrom:
                      type: string
                      description: Path to map the claim from.
                      example: claims.accountType
                - type: object
                  title: Mapping with fallback
                  required:
                    - mapFrom
                    - defaultValue
                  properties:
                    mapFrom:
                      type: string
                      description: Path to map the claim from.
                      example: claims.accountType
                    defaultValue:
                      description: >-
                        Static value to be used when `mapFrom` fails or
                        evaluated to undefined (attribute doesn't exist).
                      oneOf:
                        - type: string
                        - type: array
                          items: {}
                        - type: object
                - type: object
                  title: Static value
                  required:
                    - defaultValue
                  properties:
                    defaultValue:
                      description: >-
                        Static value to be used for all issued credentials,
                        without querying the claims source.
                      oneOf:
                        - type: string
                        - type: array
                          items: {}
                        - type: object
        - type: object
          required:
            - authorization
          properties:
            authorization:
              description: Authentication method configuration to access the claims source.
              oneOf:
                - title: API Key
                  description: >-
                    API Key used to authenticate the request to the claims
                    source server.
                  required:
                    - value
                  allOf:
                    - title: API Key
                      description: API Key for claim source authorization.
                      type: object
                      required:
                        - type
                      properties:
                        type:
                          type: string
                          enum:
                            - api-key
                          example: api-key
                        value:
                          type: string
                          example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                    - type: object
                      properties:
                        value:
                          type: string
                          description: >
                            Masked API key value. Completely masked if it is
                            less than 20 characters, while if it is 20
                            characters or longer only the last 5 characters are
                            exposed.
                          example: '****************************************61m1J'
                - title: OAuth Client Credentials
                  description: >-
                    OAuth client credentials used for getting an access token
                    for the claim source.
                  required:
                    - clientSecret
                  allOf:
                    - type: object
                      required:
                        - type
                        - tokenEndpoint
                        - clientId
                      properties:
                        type:
                          type: string
                          enum:
                            - oauth-client-credentials
                          example:
                            - oauth-client-credentials
                        tokenEndpoint:
                          type: string
                          description: >-
                            OAuth 2.0 token endpoint URL for obtaining an access
                            token for this claims source.
                          format: url
                        clientId:
                          type: string
                          description: Your client identifier for this claims source.
                        clientSecret:
                          type: string
                          description: Your client secret for this claims source.
                        tokenEndpointAuthMethod:
                          type: string
                          enum:
                            - client_secret_basic
                            - client_secret_post
                          description: >-
                            Two authentication methods are available:

                            - `client_secret_basic` (default): Credentials are
                            passed as a base 64 encoded basic token.

                            - `client_secret_post`: Credentials are passed as
                            parameters within the request body.
                        audience:
                          type: string
                          description: Optional audience for the claims source token.
                    - type: object
                      properties:
                        clientSecret:
                          type: string
                          description: >
                            Masked OAuth 2.0 client secret. Completely masked if
                            it is less than 20 characters, while if it is 20
                            characters or longer only the last 5 characters are
                            exposed.
                          example: '***********************************6d0f5'
    GetClaimSourcesResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page.
        data:
          type: array
          items:
            description: >-
              Returns the claims source details, including a `claimSourceId`.
              You will use the this identifier to reference your claims source
              when creating your credential configuration.
            allOf:
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Claims source unique identifier
                    example: 57fa09e2-82f3-4d3d-9eca-d0253e84a4e6
              - type: object
                required:
                  - name
                  - url
                  - requestParameters
                properties:
                  name:
                    type: string
                    description: Claims source name.
                    example: My claims from example.com
                  url:
                    type: string
                    description: |-
                      Claims source URL:
                      - Must be a valid URL.
                      - Must use the HTTPS protocol.
                      - Must not be an IP address.
                      - Must not include query parameters.
                      - Unicode will be converted to ASCII.
                    example: https://example.com
                  requestMethod:
                    type: string
                    description: >-
                      Indicates the request method MATTR VII will use when
                      retrieving data from this claims source. Both the GET and
                      POST method are supported. If no value is provided, GET is
                      used by default.

                      When using POST, all `requestParameters` must be included
                      in the request body in JSON format.
                    enum:
                      - GET
                      - POST
                  requestParameters:
                    description: >-
                      Use this object to define how to map request parameters
                      that are sent to your claims source using the `mapFrom`
                      and `defaultValue` properties:

                      - When only providing `mapFrom`, the request parameter
                      will be mapped from the defined path. If mapping fails, no
                      alternative value is used. You can map data from both the
                      `claims` and `credentialConfiguration` objects.

                      - When providing both `mapFrom` and `defaultValue`, MATTR
                      VII will attempt to map the request parameter from the
                      defined path. If mapping fails, the `defaultValue` is used
                      instead.

                      - When only providing `defaultValue`, its value is used to
                      populate the request parameter, regardless of any
                      available claims values.
                    oneOf:
                      - type: object
                        title: Mapping only
                        required:
                          - mapFrom
                        properties:
                          mapFrom:
                            type: string
                            description: Path to map the claim from.
                            example: claims.accountType
                      - type: object
                        title: Mapping with fallback
                        required:
                          - mapFrom
                          - defaultValue
                        properties:
                          mapFrom:
                            type: string
                            description: Path to map the claim from.
                            example: claims.accountType
                          defaultValue:
                            description: >-
                              Static value to be used when `mapFrom` fails or
                              evaluated to undefined (attribute doesn't exist).
                            oneOf:
                              - type: string
                              - type: array
                                items: {}
                              - type: object
                      - type: object
                        title: Static value
                        required:
                          - defaultValue
                        properties:
                          defaultValue:
                            description: >-
                              Static value to be used for all issued
                              credentials, without querying the claims source.
                            oneOf:
                              - type: string
                              - type: array
                                items: {}
                              - type: object
              - type: object
                required:
                  - authorization
                properties:
                  authorization:
                    description: >-
                      Authentication method configuration to access the claims
                      source.
                    oneOf:
                      - title: API Key
                        description: >-
                          API Key used to authenticate the request to the claims
                          source server.
                        required:
                          - value
                        allOf:
                          - title: API Key
                            description: API Key for claim source authorization.
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - api-key
                                example: api-key
                              value:
                                type: string
                                example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                          - type: object
                            properties:
                              value:
                                type: string
                                description: >
                                  Masked API key value. Completely masked if it
                                  is less than 20 characters, while if it is 20
                                  characters or longer only the last 5
                                  characters are exposed.
                                example: '****************************************61m1J'
                      - title: OAuth Client Credentials
                        description: >-
                          OAuth client credentials used for getting an access
                          token for the claim source.
                        required:
                          - clientSecret
                        allOf:
                          - type: object
                            required:
                              - type
                              - tokenEndpoint
                              - clientId
                            properties:
                              type:
                                type: string
                                enum:
                                  - oauth-client-credentials
                                example:
                                  - oauth-client-credentials
                              tokenEndpoint:
                                type: string
                                description: >-
                                  OAuth 2.0 token endpoint URL for obtaining an
                                  access token for this claims source.
                                format: url
                              clientId:
                                type: string
                                description: Your client identifier for this claims source.
                              clientSecret:
                                type: string
                                description: Your client secret for this claims source.
                              tokenEndpointAuthMethod:
                                type: string
                                enum:
                                  - client_secret_basic
                                  - client_secret_post
                                description: >-
                                  Two authentication methods are available:

                                  - `client_secret_basic` (default): Credentials
                                  are passed as a base 64 encoded basic token.

                                  - `client_secret_post`: Credentials are passed
                                  as parameters within the request body.
                              audience:
                                type: string
                                description: Optional audience for the claims source token.
                          - type: object
                            properties:
                              clientSecret:
                                type: string
                                description: >
                                  Masked OAuth 2.0 client secret. Completely
                                  masked if it is less than 20 characters, while
                                  if it is 20 characters or longer only the last
                                  5 characters are exposed.
                                example: '***********************************6d0f5'
    ClaimSourceAuthorizationApiKeyRequest:
      title: API Key
      description: API Key used to authenticate the request to the claims source server.
      allOf:
        - title: API Key
          description: API Key for claim source authorization.
          type: object
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - api-key
              example: api-key
            value:
              type: string
              example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
        - type: object
          properties:
            value:
              type: string
              description: >-
                API key value. Note that MATTR VII does not validate your input,
                which means it's up to you to provide the correct API key for
                your claim sources.
              example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
    ClaimSourceAuthorizationOAuthRequest:
      title: OAuth Client Credentials
      description: >-
        OAuth client credentials used for getting an access token for the claim
        source.
      type: object
      allOf:
        - type: object
          required:
            - type
            - tokenEndpoint
            - clientId
          properties:
            type:
              type: string
              enum:
                - oauth-client-credentials
              example:
                - oauth-client-credentials
            tokenEndpoint:
              type: string
              description: >-
                OAuth 2.0 token endpoint URL for obtaining an access token for
                this claims source.
              format: url
            clientId:
              type: string
              description: Your client identifier for this claims source.
            clientSecret:
              type: string
              description: Your client secret for this claims source.
            tokenEndpointAuthMethod:
              type: string
              enum:
                - client_secret_basic
                - client_secret_post
              description: >-
                Two authentication methods are available:

                - `client_secret_basic` (default): Credentials are passed as a
                base 64 encoded basic token.

                - `client_secret_post`: Credentials are passed as parameters
                within the request body.
            audience:
              type: string
              description: Optional audience for the claims source token.
        - type: object
          properties:
            clientSecret:
              type: string
              description: >-
                OAuth 2.0 client secret that will be used for the token endpoint
                request.
              example: 1b41186347e4cc716155155cdecbded07536d0f5
    ClaimSourceRequest:
      allOf:
        - type: object
          required:
            - name
            - url
            - requestParameters
          properties:
            name:
              type: string
              description: Claims source name.
              example: My claims from example.com
            url:
              type: string
              description: |-
                Claims source URL:
                - Must be a valid URL.
                - Must use the HTTPS protocol.
                - Must not be an IP address.
                - Must not include query parameters.
                - Unicode will be converted to ASCII.
              example: https://example.com
            requestMethod:
              type: string
              description: >-
                Indicates the request method MATTR VII will use when retrieving
                data from this claims source. Both the GET and POST method are
                supported. If no value is provided, GET is used by default.

                When using POST, all `requestParameters` must be included in the
                request body in JSON format.
              enum:
                - GET
                - POST
            requestParameters:
              description: >-
                Use this object to define how to map request parameters that are
                sent to your claims source using the `mapFrom` and
                `defaultValue` properties:

                - When only providing `mapFrom`, the request parameter will be
                mapped from the defined path. If mapping fails, no alternative
                value is used. You can map data from both the `claims` and
                `credentialConfiguration` objects.

                - When providing both `mapFrom` and `defaultValue`, MATTR VII
                will attempt to map the request parameter from the defined path.
                If mapping fails, the `defaultValue` is used instead.

                - When only providing `defaultValue`, its value is used to
                populate the request parameter, regardless of any available
                claims values.
              oneOf:
                - type: object
                  title: Mapping only
                  required:
                    - mapFrom
                  properties:
                    mapFrom:
                      type: string
                      description: Path to map the claim from.
                      example: claims.accountType
                - type: object
                  title: Mapping with fallback
                  required:
                    - mapFrom
                    - defaultValue
                  properties:
                    mapFrom:
                      type: string
                      description: Path to map the claim from.
                      example: claims.accountType
                    defaultValue:
                      description: >-
                        Static value to be used when `mapFrom` fails or
                        evaluated to undefined (attribute doesn't exist).
                      oneOf:
                        - type: string
                        - type: array
                          items: {}
                        - type: object
                - type: object
                  title: Static value
                  required:
                    - defaultValue
                  properties:
                    defaultValue:
                      description: >-
                        Static value to be used for all issued credentials,
                        without querying the claims source.
                      oneOf:
                        - type: string
                        - type: array
                          items: {}
                        - type: object
        - type: object
          required:
            - authorization
          properties:
            authorization:
              required:
                - clientSecret
                - value
              description: Authentication method configuration to access the claims source.
              oneOf:
                - title: API Key
                  description: >-
                    API Key used to authenticate the request to the claims
                    source server.
                  allOf:
                    - title: API Key
                      description: API Key for claim source authorization.
                      type: object
                      required:
                        - type
                      properties:
                        type:
                          type: string
                          enum:
                            - api-key
                          example: api-key
                        value:
                          type: string
                          example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                    - type: object
                      properties:
                        value:
                          type: string
                          description: >-
                            API key value. Note that MATTR VII does not validate
                            your input, which means it's up to you to provide
                            the correct API key for your claim sources.
                          example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                - title: OAuth Client Credentials
                  description: >-
                    OAuth client credentials used for getting an access token
                    for the claim source.
                  type: object
                  allOf:
                    - type: object
                      required:
                        - type
                        - tokenEndpoint
                        - clientId
                      properties:
                        type:
                          type: string
                          enum:
                            - oauth-client-credentials
                          example:
                            - oauth-client-credentials
                        tokenEndpoint:
                          type: string
                          description: >-
                            OAuth 2.0 token endpoint URL for obtaining an access
                            token for this claims source.
                          format: url
                        clientId:
                          type: string
                          description: Your client identifier for this claims source.
                        clientSecret:
                          type: string
                          description: Your client secret for this claims source.
                        tokenEndpointAuthMethod:
                          type: string
                          enum:
                            - client_secret_basic
                            - client_secret_post
                          description: >-
                            Two authentication methods are available:

                            - `client_secret_basic` (default): Credentials are
                            passed as a base 64 encoded basic token.

                            - `client_secret_post`: Credentials are passed as
                            parameters within the request body.
                        audience:
                          type: string
                          description: Optional audience for the claims source token.
                    - type: object
                      properties:
                        clientSecret:
                          type: string
                          description: >-
                            OAuth 2.0 client secret that will be used for the
                            token endpoint request.
                          example: 1b41186347e4cc716155155cdecbded07536d0f5
    UpdateClaimSourcesRequest:
      allOf:
        - type: object
          required:
            - name
            - url
            - requestParameters
          properties:
            name:
              type: string
              description: Claims source name.
              example: My claims from example.com
            url:
              type: string
              description: |-
                Claims source URL:
                - Must be a valid URL.
                - Must use the HTTPS protocol.
                - Must not be an IP address.
                - Must not include query parameters.
                - Unicode will be converted to ASCII.
              example: https://example.com
            requestMethod:
              type: string
              description: >-
                Indicates the request method MATTR VII will use when retrieving
                data from this claims source. Both the GET and POST method are
                supported. If no value is provided, GET is used by default.

                When using POST, all `requestParameters` must be included in the
                request body in JSON format.
              enum:
                - GET
                - POST
            requestParameters:
              description: >-
                Use this object to define how to map request parameters that are
                sent to your claims source using the `mapFrom` and
                `defaultValue` properties:

                - When only providing `mapFrom`, the request parameter will be
                mapped from the defined path. If mapping fails, no alternative
                value is used. You can map data from both the `claims` and
                `credentialConfiguration` objects.

                - When providing both `mapFrom` and `defaultValue`, MATTR VII
                will attempt to map the request parameter from the defined path.
                If mapping fails, the `defaultValue` is used instead.

                - When only providing `defaultValue`, its value is used to
                populate the request parameter, regardless of any available
                claims values.
              oneOf:
                - type: object
                  title: Mapping only
                  required:
                    - mapFrom
                  properties:
                    mapFrom:
                      type: string
                      description: Path to map the claim from.
                      example: claims.accountType
                - type: object
                  title: Mapping with fallback
                  required:
                    - mapFrom
                    - defaultValue
                  properties:
                    mapFrom:
                      type: string
                      description: Path to map the claim from.
                      example: claims.accountType
                    defaultValue:
                      description: >-
                        Static value to be used when `mapFrom` fails or
                        evaluated to undefined (attribute doesn't exist).
                      oneOf:
                        - type: string
                        - type: array
                          items: {}
                        - type: object
                - type: object
                  title: Static value
                  required:
                    - defaultValue
                  properties:
                    defaultValue:
                      description: >-
                        Static value to be used for all issued credentials,
                        without querying the claims source.
                      oneOf:
                        - type: string
                        - type: array
                          items: {}
                        - type: object
        - type: object
          required:
            - authorization
          properties:
            authorization:
              description: Authentication method configuration to access the claims source.
              oneOf:
                - title: API Key
                  description: >-
                    API Key used to authenticate the request to the claims
                    source server.
                  allOf:
                    - title: API Key
                      description: API Key for claim source authorization.
                      type: object
                      required:
                        - type
                      properties:
                        type:
                          type: string
                          enum:
                            - api-key
                          example: api-key
                        value:
                          type: string
                          example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                    - type: object
                      properties:
                        value:
                          type: string
                          description: >-
                            API key value. Note that MATTR VII does not validate
                            your input, which means it's up to you to provide
                            the correct API key for your claim sources.
                          example: 6hrFDATxrG9w14QY9wwnmVhLE0Wg6LIvwOwUaxz761m1J
                - title: OAuth Client Credentials
                  description: >-
                    OAuth client credentials used for getting an access token
                    for the claim source.
                  type: object
                  allOf:
                    - type: object
                      required:
                        - type
                        - tokenEndpoint
                        - clientId
                      properties:
                        type:
                          type: string
                          enum:
                            - oauth-client-credentials
                          example:
                            - oauth-client-credentials
                        tokenEndpoint:
                          type: string
                          description: >-
                            OAuth 2.0 token endpoint URL for obtaining an access
                            token for this claims source.
                          format: url
                        clientId:
                          type: string
                          description: Your client identifier for this claims source.
                        clientSecret:
                          type: string
                          description: Your client secret for this claims source.
                        tokenEndpointAuthMethod:
                          type: string
                          enum:
                            - client_secret_basic
                            - client_secret_post
                          description: >-
                            Two authentication methods are available:

                            - `client_secret_basic` (default): Credentials are
                            passed as a base 64 encoded basic token.

                            - `client_secret_post`: Credentials are passed as
                            parameters within the request body.
                        audience:
                          type: string
                          description: Optional audience for the claims source token.
                    - type: object
                      properties:
                        clientSecret:
                          type: string
                          description: >-
                            OAuth 2.0 client secret that will be used for the
                            token endpoint request.
                          example: 1b41186347e4cc716155155cdecbded07536d0f5
    ldpvcIssueCredentialRequest:
      title: Web
      type: object
      required:
        - format
        - credential_definition
      properties:
        format:
          type: string
          description: Credential format, always `ldp_vc` for Web Semantic Credentials.
          enum:
            - ldp_vc
        credential_definition:
          type: object
          properties:
            type:
              type: array
              description: Credential types, as defined in the credential schema.
              items:
                type: string
            '@context':
              type: array
              description: Credential contexts, as defined in the credential schema.
              items:
                type: string
          required:
            - type
            - '@context'
        proof:
          type: object
          description: >-
            JSON object containing proof of possession of the key material the
            issued Credential shall be bound to.
          properties:
            proof_type:
              type: string
              description: Proof type - must be `jwt`.
              enum:
                - jwt
            jwt:
              type: string
              description: The JSON Web Token (JWT) containing the proof data.
    cwtIssueCredentialRequest:
      title: Compact
      type: object
      required:
        - format
        - type
      properties:
        format:
          type: string
          description: Credential format, always `cwt` for Compact Credentials.
          example: cwt
          enum:
            - cwt
        type:
          type: string
    cwtvcIssueCredentialRequest:
      title: Compact Semantic
      type: object
      required:
        - format
        - types
      properties:
        format:
          type: string
          description: Credential format, always `cwt_vc` for Compact Semantic Credentials.
          enum:
            - cwt_vc
        types:
          type: array
          items:
            type: string
    msomdocIssueCredentialRequest:
      title: Mobile
      type: object
      required:
        - format
        - doctype
      properties:
        format:
          type: string
          description: Credential format, always `mso_mdoc` for Mobile Credentials.
          enum:
            - mso_mdoc
        doctype:
          type: string
        proof:
          type: object
          description: >-
            JSON object containing proof of possession of the key material the
            issued credential shall be bound to.
          properties:
            proof_type:
              type: string
              description: Proof type - must be `jwt`.
              enum:
                - jwt
            jwt:
              type: string
              description: The JSON Web Token (JWT) containing the proof data.
    ldpvcSupportedCredential:
      type: object
      properties:
        format:
          type: string
        id:
          type: string
        scope:
          type: string
        '@context':
          type: array
          items:
            type: string
        type:
          type: array
          items:
            type: string
        credentialSubject:
          type: object
        cryptographic_binding_methods_supported:
          type: string
        cryptographic_suites_supported:
          type: string
    cwtvcSupportedCredential:
      type: object
      properties:
        format:
          type: string
        id:
          type: string
        scope:
          type: string
        '@context':
          type: array
          items:
            type: string
        type:
          type: array
          items:
            type: string
        credentialSubject:
          type: object
        cryptographic_binding_methods_supported:
          type: string
        cryptographic_suites_supported:
          type: string
    cwtSupportedCredential:
      type: object
      properties:
        format:
          type: string
        id:
          type: string
        scope:
          type: string
        type:
          type: string
        claims:
          type: object
        cryptographic_binding_methods_supported:
          type: string
        cryptographic_suites_supported:
          type: string
    msomdocSupportedCredential:
      type: object
      properties:
        format:
          type: string
          example: mso_mdoc
        doctype:
          type: string
          example: org.iso.18013.5.1.mDL
        id:
          type: string
        cryptographic_binding_methods_supported:
          type: array
          example:
            - mso
          items:
            type: string
        cryptographic_suites_supported:
          type: array
          example:
            - ES256
          items:
            type: string
        claims:
          type: object
    WebSemanticCredentialSignRequest:
      title: SignWebSemanticCredentialRequest
      type: object
      required:
        - payload
      properties:
        payload:
          type: object
          properties:
            name:
              type: string
              example: Course credential
              description: >-
                Insert a meaningful name for the credential. This string is
                displayed on the top part of the credential in the holder's
                digital wallet. Maximum length is 18 characters, and additional
                characters will not be displayed.
            description:
              type: string
              description: >-
                Insert a meaningful description for the credential. This string
                is displayed below the `name` field on the credential in the
                holder's digital wallet. Maximum length is 38 characters, and
                additional characters will not be displayed.
              example: >-
                This credential shows that the person has attended the mention
                course and attained the relevant awards.
            '@context':
              type: array
              description: >-
                Optional array of contexts that can be used to expand credential
                claims and convey their meaning. As part of the credential
                creation MATTR VII will auto-inject the following contexts,
                which reference the W3C Verifiable Credential definitions:

                -
                https://www.w3.org/2018/credentials/v1https://www.w3.org/2018/credentials/v1

                -
                https://mattr.global/contexts/vc-extensions/v2https://mattr.global/contexts/vc-extensions/v2

                -
                https://w3id.org/vc-revocation-list-2020/v1https://w3id.org/vc-revocation-list-2020/v1
                (only for revocable credentials).

                If you require introducing a different context for your
                production implementation, please contact us. Referenced
                contexts must be whitelisted or credential issuance will fail.
                In-line context definitions would also result in an error.
              minLength: 1
              example:
                - https://optionalschema.example/
              items:
                type: string
                minLength: 0
            type:
              description: >-
                This array of credential types indicates what sort of
                information a credential holds. This is a unique identifier used
                to differentiate between various Web Credential types. MATTR VII
                automatically injects `VerifiableCredential` as the first value
                of this array, and you must include at least one additional
                value in the request payload.
              type: array
              example:
                - EducationalOccupationalCredential
                - AlumniCredential
              items:
                type: string
                minLength: 1
                description: >-
                  Describes the additional specific types of the claimed data,
                  must be within the scope of @context, resulting credential
                  will always include VerifiableCredential.
            credentialSubject:
              type: object
              description: Each value is a claim defined by one of the JSON-LD schemas.
              minItems: 1
              example:
                id: did:example:abcdb1f712ebc6f1c276e12ec21
                givenName: Jamie
                familyName: Doe
                alumniOf: <span lang="en">Example University</span>
            credentialBranding:
              type: object
              description: >-
                Includes optional credential branding properties. Refer to [this
                video](https://www.youtube.com/watch?v=Tu8ApHBWG90) for branding
                best practices.
              properties:
                backgroundColor:
                  type: string
                  example: '#B00AA0'
                  description: >-
                    Insert a colour hex code to use for the credential
                    background color in the holder's digital wallet.
                watermarkImageUrl:
                  type: string
                  example: https://example.edu/img/watermark.png
                  description: >-
                    Insert a URL for a watermark image to be included as a
                    pattern on the credential in the holder's digital wallet:

                    - URL must be publicly available.

                    - Must be 245x150 px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended.
            issuer:
              type: object
              description: Includes Issuer id (DID) and domain name.
              required:
                - id
                - name
              properties:
                id:
                  type: string
                  example: did:issuer:abcdb1f712ebc6f1c276e12ec21
                  description: >-
                    Use the DID that identifies the credential's issuer, which
                    attests the claims in the credential. This must be a
                    publicly available and resolvable `did:web` for the
                    credential to be valid and verifiable.
                name:
                  type: string
                  description: >-
                    Insert a meaningful name to indicate the issuer. This string
                    is used when the credential is offered to the holder. It is
                    also used on the bottom part of the credential when
                    `logoURL` is not provided.
                  example: ABC University
                logoUrl:
                  type: string
                  description: >-
                    Insert a URL for a logo that is displayed on the bottom part
                    of the credential. If no logo is provided, the issuer's
                    `name` and `iconURL` are used instead. The logo must meet
                    the following criteria:

                    - URL must be publicly available.

                    - Must be 140x42 px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended. Raster images, whilst supported, are
                    currently displayed at 1x resolution and may look pixelated
                    on some devices.

                    - Transparencies are allowed for **svg** or **png** images.

                    - If no logo is provided, the first letter of the issuer
                    name is displayed instead.

                    - The recommended maximum size is 50 KB.
                  example: https://example.edu/img/logo.png
                iconUrl:
                  type: string
                  example: https://example.edu/img/icon.png
                  description: >-
                    Insert a URL for an icon that is displayed next to the
                    issuer's name when the credential is offered to the holder.
                    It is also displayed next to the issuer's name on the bottom
                    part of the credential when `logoURL` is not provided. When
                    `iconURL` is not provided, the first letter from `name` is
                    used instead. The icon must meet the following criteria:

                    - URL must be publicly available.

                    - Must be 32x32 px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended. Raster images, whilst supported, are
                    currently displayed at 1x resolution and may look pixelated
                    on some devices.

                    - Transparencies are allowed for svg or png images.

                    - The recommended maximum size is 15 KB.
            expirationDate:
              type: string
              example: '2024-02-01T08:12:38.156Z'
              description: >-
                Insert the credential expiration date, after which it will not
                be considered valid and cannot be verified. Expiration date can
                not be in the past or before `issuanceDate`. When not specified,
                the credential will not have an expiration date and never
                expire.
            issuanceDate:
              type: string
              description: >-
                The timestamp at which the credential becomes valid. This can be
                used to issue future-dated credentials. Must not be in the past
                or after `expirationDate`, when the latter is specified. When
                not specified, `issuanceDate` will default to the current time.
              example: '2023-02-01T08:12:38.156Z'
          required:
            - type
            - claims
            - issuer
            - credentialSubject
        proofType:
          description: >-
            This is an _optional_ field which defines the cryptographic
            algorithm used to sign the credential. The credential Issuer's DID
            must contain a key that supports the corresponding signing
            capability. If no `proofType` is provided, the credential will be
            signed using the key that is available in the Issuer's DID:

            - If a `Bls12381G2` key is available, the credential will be signed
            with a `BbsSignature2022` proof. Credentials signed with this proof
            type support [selective
            disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

            - If a `Bls12381G2` key is unavailable but a `Ed25519` key is
            available, the credential will be signed with a
            `Ed25519Signature2018 proof`. Credentials signed with this proof
            type **do not** support [selective
            disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

            - If none of the two suitable keys are available, the request will
            be rejected and the credential will not be created.
          type: string
          enum:
            - Ed25519Signature2018
            - BbsSignature2022
          example: Ed25519Signature2018
        tag:
          type: string
          description: >-
            Insert a case sensitive tag to reference this credential. The gets
            stored as part of the credential metadata and can be used to search
            for it in the [credential
            registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
          example: identifier123
          minLength: 1
          maxLength: 1024
        persist:
          type: boolean
          description: >-
            When set to `true`, both the credential and the credential metadata
            are stored in the [credential
            registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
            When set to `false`, only the following metadata is stored in the
            credential registry:

            - `id`

            - `tag`

            - `credentialStatus`

            - `issuanceDate`

            > Credentials by nature tend to hold Personally Identifying
            Information (PII). Before storing credential data, familiarise
            yourself with compliance to any PII restrictions that may apply to
            your use-case.
          default: false
        revocable:
          type: boolean
          description: >-
            When set to `true`, the created credential can later be revoked.
            When set to `false`, the credential cannot be revoked. When set to
            `true`, `https://w3id.org/vc-revocation-list-2020/v1` is injected
            into the credential `@context` object when it is issued. This
            references the JSON-LD definition of the `credentialStatus` object.
          default: false
        includeId:
          type: boolean
          description: >-
            When set to `true`, the signed credential identifier is included in
            both the `credential` object and the credential metadata. When set
            to `false` it is only included in the credential metadata.
          default: false
          example: true
      description: Sign Web Semantic Credential Request
    schemas-VerifiableCredential:
      type: object
      properties:
        id:
          type: string
          example: 873277c0-a162-11ea-8a1d-a111119347e6
          description: Unique identifier of the new web credential.
        '@context':
          type: array
          description: >-
            As part of the credential creation MATTR VII will auto-inject the
            following contexts, which reference the W3C Verifiable Credential
            definitions:

            - https://www.w3.org/2018/credentials/v1

            - https://mattr.global/contexts/vc-extensions/v2

            - https://w3id.org/vc-revocation-list-2020/v1 (only for revocable
            credentials).

            If you require introducing a different context for your production
            implementation, please [contact us](https://mattr.global/contact).
            Referenced contexts must be whitelisted or credential issuance will
            fail. In-line context definitions would also result in an error.
          example:
            - https://www.w3.org/2018/credentials/v1
            - https://mattr.global/contexts/vc-extensions/v2
            - https://w3id.org/vc-revocation-list-2020/v1
            - https://optionalschema.example/
          items:
            type: string
            minLength: 1
            example: >-
              "https://www.w3.org/2018/credentials/v1","https://mattr.global/contexts/vc-extensions/v2","https://w3id.org/vc-revocation-list-2020/v1","https://optionalschema.example/"
        type:
          type: array
          example:
            - VerifiableCredential
            - AlumniCredential
          items:
            type: string
            minLength: 1
            example: '"AlumniCredential", "VerifiableCredential"'
        issuer:
          description: Includes issuer id (did) and its domain (inside name parameter)
          oneOf:
            - type: object
              properties:
                id:
                  type: string
                  example: did:web:organization.com
                name:
                  type: string
                  example: Example University
            - type: string
        issuanceDate:
          type: string
          format: date-time
          example: '2020-05-02T12:06:29.156Z'
        credentialStatus:
          type: object
          description: Credential status location information
          properties:
            id:
              type: string
              description: Unique ID for the credential status
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
            type:
              type: string
              description: Indicates that the status contains revocation information
              example: RevocationList2020Status
            revocationListIndex:
              type: integer
              example: 1
              description: The location within the revocation list for the credential
            revocationListCredential:
              type: string
              description: The location of the revocation list
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
          title: CredentialStatus
        credentialSubject:
          type: object
          example:
            givenName: Jamie
            familyName: Doe
            alumniOf: Example University
          properties:
            givenName:
              type: string
              example: Jamie
            familyName:
              type: string
              example: Doe
            alumniOf:
              type: string
              example: Example University
        proof:
          type: object
          properties:
            type:
              type: string
              example: Ed25519Signature2018
            created:
              type: string
              format: date-time
              example: '2020-05-02T12:06:29Z'
            jws:
              type: string
              description: Compact form of JWS
              example: >-
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            proofPurpose:
              type: string
              example: assertionMethod
            verificationMethod:
              type: string
              example: did:web:organization.com
          title: ED25519Signature2018
        name:
          type: string
          example: Alumni Credential
          description: Name of the credential (requires v2 data model)
        description:
          type: string
          example: >-
            This credential shows that the person has attended the mentioned
            university.
          description: Description of the credential (requires v2 data model)
      required:
        - type
        - issuanceDate
        - credentialSubject
        - proof
      title: VerifiableCredential
    WebSemanticCredentialSignResponse:
      title: SignWebSemanticCredentialResponse
      type: object
      x-examples: {}
      properties:
        id:
          type: string
          example: 873277c0-a162-11ea-8a1d-a111119347e6
          description: Unique identifier of the new web credential.
        credential:
          type: object
          properties:
            id:
              type: string
              example: 873277c0-a162-11ea-8a1d-a111119347e6
              description: Unique identifier of the new web credential.
            '@context':
              type: array
              description: >-
                As part of the credential creation MATTR VII will auto-inject
                the following contexts, which reference the W3C Verifiable
                Credential definitions:

                - https://www.w3.org/2018/credentials/v1

                - https://mattr.global/contexts/vc-extensions/v2

                - https://w3id.org/vc-revocation-list-2020/v1 (only for
                revocable credentials).

                If you require introducing a different context for your
                production implementation, please [contact
                us](https://mattr.global/contact). Referenced contexts must be
                whitelisted or credential issuance will fail. In-line context
                definitions would also result in an error.
              example:
                - https://www.w3.org/2018/credentials/v1
                - https://mattr.global/contexts/vc-extensions/v2
                - https://w3id.org/vc-revocation-list-2020/v1
                - https://optionalschema.example/
              items:
                type: string
                minLength: 1
                example: >-
                  "https://www.w3.org/2018/credentials/v1","https://mattr.global/contexts/vc-extensions/v2","https://w3id.org/vc-revocation-list-2020/v1","https://optionalschema.example/"
            type:
              type: array
              example:
                - VerifiableCredential
                - AlumniCredential
              items:
                type: string
                minLength: 1
                example: '"AlumniCredential", "VerifiableCredential"'
            issuer:
              description: Includes issuer id (did) and its domain (inside name parameter)
              oneOf:
                - type: object
                  properties:
                    id:
                      type: string
                      example: did:web:organization.com
                    name:
                      type: string
                      example: Example University
                - type: string
            issuanceDate:
              type: string
              format: date-time
              example: '2020-05-02T12:06:29.156Z'
            credentialStatus:
              type: object
              description: Credential status location information
              properties:
                id:
                  type: string
                  description: Unique ID for the credential status
                  example: >-
                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                type:
                  type: string
                  description: Indicates that the status contains revocation information
                  example: RevocationList2020Status
                revocationListIndex:
                  type: integer
                  example: 1
                  description: The location within the revocation list for the credential
                revocationListCredential:
                  type: string
                  description: The location of the revocation list
                  example: >-
                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
              title: CredentialStatus
            credentialSubject:
              type: object
              example:
                givenName: Jamie
                familyName: Doe
                alumniOf: Example University
              properties:
                givenName:
                  type: string
                  example: Jamie
                familyName:
                  type: string
                  example: Doe
                alumniOf:
                  type: string
                  example: Example University
            proof:
              type: object
              properties:
                type:
                  type: string
                  example: Ed25519Signature2018
                created:
                  type: string
                  format: date-time
                  example: '2020-05-02T12:06:29Z'
                jws:
                  type: string
                  description: Compact form of JWS
                  example: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                proofPurpose:
                  type: string
                  example: assertionMethod
                verificationMethod:
                  type: string
                  example: did:web:organization.com
              title: ED25519Signature2018
            name:
              type: string
              example: Alumni Credential
              description: Name of the credential (requires v2 data model)
            description:
              type: string
              example: >-
                This credential shows that the person has attended the mentioned
                university.
              description: Description of the credential (requires v2 data model)
          required:
            - type
            - issuanceDate
            - credentialSubject
            - proof
          title: VerifiableCredential
        tag:
          type: string
          example: identifier123
          description: >-
            Credential tag, as inserted in the request. Can be used to search
            the [credential
            registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview)
        credentialStatus:
          type: object
          description: Credential status location information
          properties:
            id:
              type: string
              description: Unique ID for the credential status
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
            type:
              type: string
              description: Indicates that the status contains revocation information
              example: RevocationList2020Status
            revocationListIndex:
              type: integer
              example: 1
              description: The location within the revocation list for the credential
            revocationListCredential:
              type: string
              description: The location of the revocation list
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
          title: CredentialStatus
        issuanceDate:
          type: string
          example: '2020-05-02T12:06:29.156Z'
      required:
        - id
        - credential
        - issuanceDate
      description: Sign Web Semantic Credential response
    GetCredentialResponse:
      type: object
      x-examples: {}
      title: WebManifestResponse
      properties:
        id:
          type: string
          example: 873277c0-a162-11ea-8a1d-a111119347e6
        credential:
          type: object
          properties:
            '@context':
              type: array
              example:
                - https://www.w3.org/2018/credentials/v1
                - https://www.w3.org/2018/credentials/examples/v1
              items:
                type: string
                minLength: 1
                example: >-
                  "https://www.w3.org/2018/credentials/v1",
                  "https://www.w3.org/2018/credentials/examples/v1"
            type:
              type: array
              example:
                - VerifiableCredential
                - AlumniCredential
              items:
                type: string
                minLength: 1
                example: '"AlumniCredential", "VerifiableCredential"'
            issuer:
              description: >-
                Includes Issuer id (DID), domain name and optional branding
                properties.
              oneOf:
                - type: object
                  properties:
                    id:
                      type: string
                      example: did:web:organization.com
                    name:
                      type: string
                      example: Example University
                    logoUrl:
                      type: string
                      example: https://example.edu/img/logo.png
                      description: >-
                        The location of the logo image. The supported formats
                        are jpg, png, and svg.
                    iconUrl:
                      type: string
                      example: https://example.edu/img/icon.png
                      description: >-
                        The location of the icon image. The supported formats
                        are jpg, png, and svg.
                - type: string
            credentialBranding:
              type: object
              description: Includes optional credential branding properties.
              properties:
                backgroundColor:
                  type: string
                  example: '#B00AA0'
                  description: >-
                    The background colour used for the credential card. The
                    format is "#rrggbb" where "rrggbb" is a hex RGB triplet,
                    such as "#FFCC00".
                watermarkImageUrl:
                  type: string
                  example: https://example.edu/img/watermark.png
                  description: >-
                    The location of the watermark image. The supported formats
                    are jpg, png, and svg.
            issuanceDate:
              type: string
              format: date-time
              example: '2020-05-02T12:06:29.156Z'
            credentialStatus:
              type: object
              description: Credential status location information
              properties:
                id:
                  type: string
                  description: Unique ID for the credential status
                  example: >-
                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                type:
                  type: string
                  description: Indicates that the status contains revocation information
                  example: RevocationList2020Status
                revocationListIndex:
                  type: integer
                  example: 1
                  description: The location within the revocation list for the credential
                revocationListCredential:
                  type: string
                  description: The location of the revocation list
                  example: >-
                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
              title: CredentialStatus
            credentialSubject:
              type: object
              example:
                givenName: Jamie
                familyName: Doe
                alumniOf: Example University
              properties:
                givenName:
                  type: string
                  example: Jamie
                familyName:
                  type: string
                  example: Doe
                alumniOf:
                  type: string
                  example: Example University
            proof:
              type: object
              properties:
                type:
                  type: string
                  example: Ed25519Signature2018
                created:
                  type: string
                  format: date-time
                  example: '2020-05-02T12:06:29Z'
                jws:
                  type: string
                  description: Compact form of JWS
                  example: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                proofPurpose:
                  type: string
                  example: assertionMethod
                verificationMethod:
                  type: string
                  example: did:web:organization.com
              title: ED25519Signature2018
            name:
              type: string
              example: Alumni Credential
              description: Name of the credential (requires v2 data model)
            description:
              type: string
              example: >-
                This credential shows that the person has attended the mentioned
                university.
              description: Description of the credential (requires v2 data model)
          required:
            - '@context'
            - type
            - issuanceDate
            - credentialSubject
            - proof
          title: VerifiableCredential
        tag:
          type: string
          example: identifier123
        credentialStatus:
          type: object
          description: Credential status location information
          properties:
            id:
              type: string
              description: Unique ID for the credential status
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
            type:
              type: string
              description: Indicates that the status contains revocation information
              example: RevocationList2020Status
            revocationListIndex:
              type: integer
              example: 1
              description: The location within the revocation list for the credential
            revocationListCredential:
              type: string
              description: The location of the revocation list
              example: >-
                https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
          title: CredentialStatus
        issuanceDate:
          type: string
          example: '2020-05-02T12:06:29.156Z'
      required:
        - id
        - issuanceDate
    GetCredentialsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            type: object
            x-examples: {}
            title: WebManifestResponse
            properties:
              id:
                type: string
                example: 873277c0-a162-11ea-8a1d-a111119347e6
              credential:
                type: object
                properties:
                  '@context':
                    type: array
                    example:
                      - https://www.w3.org/2018/credentials/v1
                      - https://www.w3.org/2018/credentials/examples/v1
                    items:
                      type: string
                      minLength: 1
                      example: >-
                        "https://www.w3.org/2018/credentials/v1",
                        "https://www.w3.org/2018/credentials/examples/v1"
                  type:
                    type: array
                    example:
                      - VerifiableCredential
                      - AlumniCredential
                    items:
                      type: string
                      minLength: 1
                      example: '"AlumniCredential", "VerifiableCredential"'
                  issuer:
                    description: >-
                      Includes Issuer id (DID), domain name and optional
                      branding properties.
                    oneOf:
                      - type: object
                        properties:
                          id:
                            type: string
                            example: did:web:organization.com
                          name:
                            type: string
                            example: Example University
                          logoUrl:
                            type: string
                            example: https://example.edu/img/logo.png
                            description: >-
                              The location of the logo image. The supported
                              formats are jpg, png, and svg.
                          iconUrl:
                            type: string
                            example: https://example.edu/img/icon.png
                            description: >-
                              The location of the icon image. The supported
                              formats are jpg, png, and svg.
                      - type: string
                  credentialBranding:
                    type: object
                    description: Includes optional credential branding properties.
                    properties:
                      backgroundColor:
                        type: string
                        example: '#B00AA0'
                        description: >-
                          The background colour used for the credential card.
                          The format is "#rrggbb" where "rrggbb" is a hex RGB
                          triplet, such as "#FFCC00".
                      watermarkImageUrl:
                        type: string
                        example: https://example.edu/img/watermark.png
                        description: >-
                          The location of the watermark image. The supported
                          formats are jpg, png, and svg.
                  issuanceDate:
                    type: string
                    format: date-time
                    example: '2020-05-02T12:06:29.156Z'
                  credentialStatus:
                    type: object
                    description: Credential status location information
                    properties:
                      id:
                        type: string
                        description: Unique ID for the credential status
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                      type:
                        type: string
                        description: >-
                          Indicates that the status contains revocation
                          information
                        example: RevocationList2020Status
                      revocationListIndex:
                        type: integer
                        example: 1
                        description: >-
                          The location within the revocation list for the
                          credential
                      revocationListCredential:
                        type: string
                        description: The location of the revocation list
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                    title: CredentialStatus
                  credentialSubject:
                    type: object
                    example:
                      givenName: Jamie
                      familyName: Doe
                      alumniOf: Example University
                    properties:
                      givenName:
                        type: string
                        example: Jamie
                      familyName:
                        type: string
                        example: Doe
                      alumniOf:
                        type: string
                        example: Example University
                  proof:
                    type: object
                    properties:
                      type:
                        type: string
                        example: Ed25519Signature2018
                      created:
                        type: string
                        format: date-time
                        example: '2020-05-02T12:06:29Z'
                      jws:
                        type: string
                        description: Compact form of JWS
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      proofPurpose:
                        type: string
                        example: assertionMethod
                      verificationMethod:
                        type: string
                        example: did:web:organization.com
                    title: ED25519Signature2018
                  name:
                    type: string
                    example: Alumni Credential
                    description: Name of the credential (requires v2 data model)
                  description:
                    type: string
                    example: >-
                      This credential shows that the person has attended the
                      mentioned university.
                    description: Description of the credential (requires v2 data model)
                required:
                  - '@context'
                  - type
                  - issuanceDate
                  - credentialSubject
                  - proof
                title: VerifiableCredential
              tag:
                type: string
                example: identifier123
              credentialStatus:
                type: object
                description: Credential status location information
                properties:
                  id:
                    type: string
                    description: Unique ID for the credential status
                    example: >-
                      https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                  type:
                    type: string
                    description: Indicates that the status contains revocation information
                    example: RevocationList2020Status
                  revocationListIndex:
                    type: integer
                    example: 1
                    description: The location within the revocation list for the credential
                  revocationListCredential:
                    type: string
                    description: The location of the revocation list
                    example: >-
                      https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                title: CredentialStatus
              issuanceDate:
                type: string
                example: '2020-05-02T12:06:29.156Z'
            required:
              - id
              - issuanceDate
      title: GetCredentialsResponse
    VerifyWebSemanticCredentialRequest:
      title: VerifyWebSemanticCredentialRequest
      type: object
      description: VerifyWebSemanticCredentialRequest
      required:
        - payload
      properties:
        payload:
          description: >-
            Replace with the contents of the credential object from the response
            obtained when [creating a Web
            Credential](https://learn.mattr.global/tutorials/create/web-credentials/basic).
            Make sure you only include the contents of the `credential` object
            and not the entire response.
          type: object
          properties:
            id:
              type: string
              example: 873277c0-a162-11ea-8a1d-a111119347e6
              description: Unique identifier of the new web credential.
            '@context':
              type: array
              description: >-
                As part of the credential creation MATTR VII will auto-inject
                the following contexts, which reference the W3C Verifiable
                Credential definitions:

                - https://www.w3.org/2018/credentials/v1

                - https://mattr.global/contexts/vc-extensions/v2

                - https://w3id.org/vc-revocation-list-2020/v1 (only for
                revocable credentials).

                If you require introducing a different context for your
                production implementation, please [contact
                us](https://mattr.global/contact). Referenced contexts must be
                whitelisted or credential issuance will fail. In-line context
                definitions would also result in an error.
              example:
                - https://www.w3.org/2018/credentials/v1
                - https://mattr.global/contexts/vc-extensions/v2
                - https://w3id.org/vc-revocation-list-2020/v1
                - https://optionalschema.example/
              items:
                type: string
                minLength: 1
                example: >-
                  "https://www.w3.org/2018/credentials/v1","https://mattr.global/contexts/vc-extensions/v2","https://w3id.org/vc-revocation-list-2020/v1","https://optionalschema.example/"
            type:
              type: array
              example:
                - VerifiableCredential
                - AlumniCredential
              items:
                type: string
                minLength: 1
                example: '"AlumniCredential", "VerifiableCredential"'
            issuer:
              description: Includes issuer id (did) and its domain (inside name parameter)
              oneOf:
                - type: object
                  properties:
                    id:
                      type: string
                      example: did:web:organization.com
                    name:
                      type: string
                      example: Example University
                - type: string
            issuanceDate:
              type: string
              format: date-time
              example: '2020-05-02T12:06:29.156Z'
            credentialStatus:
              type: object
              description: Credential status location information
              properties:
                id:
                  type: string
                  description: Unique ID for the credential status
                  example: >-
                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                type:
                  type: string
                  description: Indicates that the status contains revocation information
                  example: RevocationList2020Status
                revocationListIndex:
                  type: integer
                  example: 1
                  description: The location within the revocation list for the credential
                revocationListCredential:
                  type: string
                  description: The location of the revocation list
                  example: >-
                    https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
              title: CredentialStatus
            credentialSubject:
              type: object
              example:
                givenName: Jamie
                familyName: Doe
                alumniOf: Example University
              properties:
                givenName:
                  type: string
                  example: Jamie
                familyName:
                  type: string
                  example: Doe
                alumniOf:
                  type: string
                  example: Example University
            proof:
              type: object
              properties:
                type:
                  type: string
                  example: Ed25519Signature2018
                created:
                  type: string
                  format: date-time
                  example: '2020-05-02T12:06:29Z'
                jws:
                  type: string
                  description: Compact form of JWS
                  example: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                proofPurpose:
                  type: string
                  example: assertionMethod
                verificationMethod:
                  type: string
                  example: did:web:organization.com
              title: ED25519Signature2018
            name:
              type: string
              example: Alumni Credential
              description: Name of the credential (requires v2 data model)
            description:
              type: string
              example: >-
                This credential shows that the person has attended the mentioned
                university.
              description: Description of the credential (requires v2 data model)
          required:
            - type
            - issuanceDate
            - credentialSubject
            - proof
          title: VerifiableCredential
        assertExpiry:
          type: boolean
          description: >-
            When set to `true`, verification will fail when expiration date has
            passed. This field is deprecated in favour of `assertValidUntil`,
            and will be disabled from September 2024.
          default: true
          deprecated: true
        checkRevocation:
          type: boolean
          description: >-
            When set to `true`, verification will fail when the credential has
            been revoked.
          default: true
        assertValidFrom:
          type: boolean
          description: >-
            When set to `true`, verification will fail when `issuanceDate` has
            not been reached.
          default: true
        assertValidUntil:
          type: boolean
          description: >-
            When set to `true`, verification will fail when `expirationDate` has
            passed. When specified, this overrides the deprecated `assertExpiry`
            property.
          default: false
    VerifyWebSemanticCredentialResponse:
      title: VerifyWebSemanticCredentialResponse
      type: object
      description: VerifyWebSemanticCredentialResponse
      required:
        - verified
      properties:
        verified:
          type: boolean
          description: >-
            Indicates whether the verification status is `true` or `false`. For
            responses that show the verified status to be `false`, a further
            error body is returned with more details about the error:

            - The credential has been revoked.

            - The Issuer DID cannot be resolved.

            - The issuer public key is invalid.

            - The credential JSON-LD context is invalid.

            - The credential signature is invalid.
        reason:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
          required:
            - type
            - message
    RevocationStatusResponse:
      type: object
      properties:
        isRevoked:
          type: boolean
          description: >-
            Indicates whether the credential is revoked (`true`) or not
            (`false`).
          example: false
      required:
        - isRevoked
      description: ''
      title: RevocationStatusResponse
    SetRevocationStatus:
      type: object
      properties:
        isRevoked:
          type: boolean
          description: >-
            Indicates whether the credential is revoked (`true`) or not
            (`false`).
          example: false
      required:
        - isRevoked
      description: ''
      title: SetRevocationStatus
    CreatePayloadRequest:
      description: Create a payload
      type: object
      properties:
        from:
          type: string
          minLength: 1
          description: >-
            The sender's DID URL, obtained from the `id` field of the first
            `keyAgreement` entry of the DID document. This must be a DID with a
            key type suitable for messaging (not a BLS key type).
          example: did:web:organization.com
        to:
          type: array
          description: The intended recipients DID URL.
          items:
            type: string
          example:
            - did:key:subjectDid1
            - did:key:subjectDid2
            - did:key:subjectDid3
      required:
        - from
        - to
      title: CreatePayloadRequest
    RevocationStatusNotification:
      title: RevocationStatusNotification
      type: object
      properties:
        id:
          type: string
          minLength: 1
        type:
          type: string
          minLength: 1
        to:
          type: array
          items:
            required:
              - string
            properties: {}
          example:
            - did:key:subjectDid1
            - did:key:subjectDid2
            - did:key:subjectDid3
        from:
          type: string
          minLength: 1
          example: did:web:organization.com
        created_time:
          type: number
        body:
          type: object
          properties:
            revocationListCredential:
              type: string
              minLength: 1
            revocationListIndex:
              type: string
              minLength: 1
            isRevoked:
              type: boolean
          required:
            - revocationListCredential
            - revocationListIndex
            - isRevoked
      required:
        - id
        - type
        - to
        - from
        - created_time
        - body
    CreatePresentationQueryByExample:
      type: object
      x-examples: {}
      title: CreatePresentationQueryByExample
      properties:
        type:
          type: string
          example: QueryByExample
          description: >-
            Indicates what type of query method would be used by presentation
            requests created from this presentation template. For basic
            presentation templates you must use `QueryByExample`.
        credentialQuery:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            minProperties: 1
            properties:
              required:
                type: boolean
                description: >-
                  When set to `true`, the verification workflow will fail if a
                  matching credential is not provided in the verifiable
                  presentation response. You can only change this to `false`
                  when your templates has multiple `credentialQuery` objects.
              reason:
                type: string
                description: >-
                  This value is displayed in the mobile wallet to provide the
                  holder with context around why a credential is being
                  requested. Ensure that this is written exactly as you would
                  like it to appear to the user.
              example:
                type: array
                items:
                  type: object
                  properties:
                    '@context':
                      type: array
                      description: >-
                        This is the JSON-LD schema used to expand the `example`
                        in the `query`. Only matched credentials will be
                        included in the presentation response. In case the
                        credential uses a specific JSON-LD schema, you must add
                        that schema into the `@context` array so that the
                        credential could be matched against the presentation
                        request.
                      items: {}
                    type:
                      description: >-
                        The credential type that the mobile wallet will use to
                        return matching credentials. Upon the holder's consent,
                        the wallet would only return credentials that match this
                        type and have been issued by the issuers included in the
                        `trustedIssuer` object. When you include multiple
                        credential types, the wallet will only return
                        credentials that match **all** of the included types.
                      oneOf:
                        - type: string
                          example: AlumniCredential
                        - type: array
                          example:
                            - '[AlumniCredential]'
                          items:
                            type: string
                    trustedIssuer:
                      type: array
                      description: >-
                        This array is used to determine what credential issuers
                        to accept in this verification workflow.
                      items:
                        type: object
                        properties:
                          required:
                            type: boolean
                            description: >-
                              Indicates whether this issuer is required for a
                              credential to be accepted in this workflow.
                          issuer:
                            type: string
                            description: Issuer's DID.
                        required:
                          - required
                          - issuer
                  required:
                    - '@context'
                    - type
                    - trustedIssuer
            required:
              - required
              - example
      required:
        - type
        - credentialQuery
    CreatePresentationQueryByFrame:
      type: object
      title: CreatePresentationQueryByFrame
      properties:
        type:
          type: string
          description: >-
            Indicates what type of query method would be used by presentation
            requests created from this presentation template. For
            selective-disclosure presentation templates you must use
            `QueryByFrame`.
        credentialQuery:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            properties:
              reason:
                type: string
                description: >-
                  This value is displayed in the mobile wallet to provide the
                  holder with context around why a credential is being
                  requested. Ensure that this is written exactly as you would
                  like it to appear to the user.
              frame:
                type: object
                required:
                  - '@context'
                  - type
                  - credentialSubject
                properties:
                  '@context':
                    type: array
                    description: >-
                      This is the JSON-LD schema used to expand the
                      `credentialSubject`.
                    items:
                      type: object
                  type:
                    description: >-
                      The credential type that the mobile wallet will use to
                      return matching credentials. Upon the holder's consent,
                      the wallet would only return credentials that match this
                      type and have been issued by the issuers included in the
                      `trustedIssuer` object. When you include multiple
                      credential types, the wallet will only return credentials
                      that match **all** of the included types.
                    oneOf:
                      - type: string
                        example: VerifiableCredential
                        description: The value must be VerifiableCredential
                      - type: array
                        example:
                          - '[VerifiableCredential, AlumniCredential]'
                        items:
                          type: string
                          description: VerifiableCredential must be the first value
                  credentialSubject:
                    type: object
                    description: >-
                      This object details what claims are required for this
                      verification workflow. Only claims included in this object
                      will be included in the verifiable presentation, as long
                      as you set `@explicit` to `true`.
                    required:
                      - '@explicit'
                      - educationalCredentialAwarded
                      - familyName
                    properties:
                      '@explicit':
                        type: boolean
                      educationalCredentialAwarded:
                        type: object
                      familyName:
                        type: object
              trustedIssuer:
                type: array
                description: >-
                  This array is used to determine what credential issuers to
                  accept in this verification workflow. If you want to accept
                  credentials from any issuer as long as they match the defined
                  credential `type`, leave this array empty.
                uniqueItems: true
                minItems: 0
                items:
                  type: object
                  properties:
                    required:
                      type: boolean
                      description: >-
                        Indicates whether this issuer is required for a
                        credential to be accepted in this workflow.
                    issuer:
                      type: string
                      description: Issuer's DID, must include a BLS key type.
                  required:
                    - required
                    - issuer
            required:
              - reason
              - frame
              - trustedIssuer
      required:
        - type
        - credentialQuery
    CreatePresentationDidAuthTemplate:
      type: object
      title: CreatePresentationDidAuthTemplate
      properties:
        type:
          type: string
          description: DIDAuth
          example: DIDAuth
      required:
        - type
    PresentationTemplateResponse:
      type: object
      properties:
        id:
          type: string
          example: 64e45290-9980-11ea-b872-f1bee5fb328f
          description: >-
            Unique identifier for this presentation template. You will need it
            to [create a presentation request](#operation/createPresRequestV2)
            based on this template. You can also use it to
            [retrieve](#operation/retrievePresTemplateV2),
            [update](#operation/updatePresTemplateV2) or
            [remove](#operation/removePresTemplateV2) this presentation
            template.
        domain:
          type: string
          example: tenant.vii.mattr.global
        name:
          type: string
          example: alumni_credential_request
        query:
          type: array
          items:
            anyOf:
              - type: object
                x-examples: {}
                title: CreatePresentationQueryByExample
                properties:
                  type:
                    type: string
                    example: QueryByExample
                    description: >-
                      Indicates what type of query method would be used by
                      presentation requests created from this presentation
                      template. For basic presentation templates you must use
                      `QueryByExample`.
                  credentialQuery:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      minProperties: 1
                      properties:
                        required:
                          type: boolean
                          description: >-
                            When set to `true`, the verification workflow will
                            fail if a matching credential is not provided in the
                            verifiable presentation response. You can only
                            change this to `false` when your templates has
                            multiple `credentialQuery` objects.
                        reason:
                          type: string
                          description: >-
                            This value is displayed in the mobile wallet to
                            provide the holder with context around why a
                            credential is being requested. Ensure that this is
                            written exactly as you would like it to appear to
                            the user.
                        example:
                          type: array
                          items:
                            type: object
                            properties:
                              '@context':
                                type: array
                                description: >-
                                  This is the JSON-LD schema used to expand the
                                  `example` in the `query`. Only matched
                                  credentials will be included in the
                                  presentation response. In case the credential
                                  uses a specific JSON-LD schema, you must add
                                  that schema into the `@context` array so that
                                  the credential could be matched against the
                                  presentation request.
                                items: {}
                              type:
                                description: >-
                                  The credential type that the mobile wallet
                                  will use to return matching credentials. Upon
                                  the holder's consent, the wallet would only
                                  return credentials that match this type and
                                  have been issued by the issuers included in
                                  the `trustedIssuer` object. When you include
                                  multiple credential types, the wallet will
                                  only return credentials that match **all** of
                                  the included types.
                                oneOf:
                                  - type: string
                                    example: AlumniCredential
                                  - type: array
                                    example:
                                      - '[AlumniCredential]'
                                    items:
                                      type: string
                              trustedIssuer:
                                type: array
                                description: >-
                                  This array is used to determine what
                                  credential issuers to accept in this
                                  verification workflow.
                                items:
                                  type: object
                                  properties:
                                    required:
                                      type: boolean
                                      description: >-
                                        Indicates whether this issuer is
                                        required for a credential to be accepted
                                        in this workflow.
                                    issuer:
                                      type: string
                                      description: Issuer's DID.
                                  required:
                                    - required
                                    - issuer
                            required:
                              - '@context'
                              - type
                              - trustedIssuer
                      required:
                        - required
                        - example
                required:
                  - type
                  - credentialQuery
              - type: object
                title: CreatePresentationQueryByFrame
                properties:
                  type:
                    type: string
                    description: >-
                      Indicates what type of query method would be used by
                      presentation requests created from this presentation
                      template. For selective-disclosure presentation templates
                      you must use `QueryByFrame`.
                  credentialQuery:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        reason:
                          type: string
                          description: >-
                            This value is displayed in the mobile wallet to
                            provide the holder with context around why a
                            credential is being requested. Ensure that this is
                            written exactly as you would like it to appear to
                            the user.
                        frame:
                          type: object
                          required:
                            - '@context'
                            - type
                            - credentialSubject
                          properties:
                            '@context':
                              type: array
                              description: >-
                                This is the JSON-LD schema used to expand the
                                `credentialSubject`.
                              items:
                                type: object
                            type:
                              description: >-
                                The credential type that the mobile wallet will
                                use to return matching credentials. Upon the
                                holder's consent, the wallet would only return
                                credentials that match this type and have been
                                issued by the issuers included in the
                                `trustedIssuer` object. When you include
                                multiple credential types, the wallet will only
                                return credentials that match **all** of the
                                included types.
                              oneOf:
                                - type: string
                                  example: VerifiableCredential
                                  description: The value must be VerifiableCredential
                                - type: array
                                  example:
                                    - '[VerifiableCredential, AlumniCredential]'
                                  items:
                                    type: string
                                    description: >-
                                      VerifiableCredential must be the first
                                      value
                            credentialSubject:
                              type: object
                              description: >-
                                This object details what claims are required for
                                this verification workflow. Only claims included
                                in this object will be included in the
                                verifiable presentation, as long as you set
                                `@explicit` to `true`.
                              required:
                                - '@explicit'
                                - educationalCredentialAwarded
                                - familyName
                              properties:
                                '@explicit':
                                  type: boolean
                                educationalCredentialAwarded:
                                  type: object
                                familyName:
                                  type: object
                        trustedIssuer:
                          type: array
                          description: >-
                            This array is used to determine what credential
                            issuers to accept in this verification workflow. If
                            you want to accept credentials from any issuer as
                            long as they match the defined credential `type`,
                            leave this array empty.
                          uniqueItems: true
                          minItems: 0
                          items:
                            type: object
                            properties:
                              required:
                                type: boolean
                                description: >-
                                  Indicates whether this issuer is required for
                                  a credential to be accepted in this workflow.
                              issuer:
                                type: string
                                description: Issuer's DID, must include a BLS key type.
                            required:
                              - required
                              - issuer
                      required:
                        - reason
                        - frame
                        - trustedIssuer
                required:
                  - type
                  - credentialQuery
              - type: object
                title: CreatePresentationDidAuthTemplate
                properties:
                  type:
                    type: string
                    description: DIDAuth
                    example: DIDAuth
                required:
                  - type
      required:
        - id
        - domain
        - name
        - query
      title: PresentationTemplateResponse
    PresentationTemplateArrayResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 64e45290-9980-11ea-b872-f1bee5fb328f
                description: >-
                  Unique identifier for this presentation template. You will
                  need it to [create a presentation
                  request](#operation/createPresRequestV2) based on this
                  template. You can also use it to
                  [retrieve](#operation/retrievePresTemplateV2),
                  [update](#operation/updatePresTemplateV2) or
                  [remove](#operation/removePresTemplateV2) this presentation
                  template.
              domain:
                type: string
                example: tenant.vii.mattr.global
              name:
                type: string
                example: alumni_credential_request
              query:
                type: array
                items:
                  anyOf:
                    - type: object
                      x-examples: {}
                      title: CreatePresentationQueryByExample
                      properties:
                        type:
                          type: string
                          example: QueryByExample
                          description: >-
                            Indicates what type of query method would be used by
                            presentation requests created from this presentation
                            template. For basic presentation templates you must
                            use `QueryByExample`.
                        credentialQuery:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            minProperties: 1
                            properties:
                              required:
                                type: boolean
                                description: >-
                                  When set to `true`, the verification workflow
                                  will fail if a matching credential is not
                                  provided in the verifiable presentation
                                  response. You can only change this to `false`
                                  when your templates has multiple
                                  `credentialQuery` objects.
                              reason:
                                type: string
                                description: >-
                                  This value is displayed in the mobile wallet
                                  to provide the holder with context around why
                                  a credential is being requested. Ensure that
                                  this is written exactly as you would like it
                                  to appear to the user.
                              example:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    '@context':
                                      type: array
                                      description: >-
                                        This is the JSON-LD schema used to
                                        expand the `example` in the `query`.
                                        Only matched credentials will be
                                        included in the presentation response.
                                        In case the credential uses a specific
                                        JSON-LD schema, you must add that schema
                                        into the `@context` array so that the
                                        credential could be matched against the
                                        presentation request.
                                      items: {}
                                    type:
                                      description: >-
                                        The credential type that the mobile
                                        wallet will use to return matching
                                        credentials. Upon the holder's consent,
                                        the wallet would only return credentials
                                        that match this type and have been
                                        issued by the issuers included in the
                                        `trustedIssuer` object. When you include
                                        multiple credential types, the wallet
                                        will only return credentials that match
                                        **all** of the included types.
                                      oneOf:
                                        - type: string
                                          example: AlumniCredential
                                        - type: array
                                          example:
                                            - '[AlumniCredential]'
                                          items:
                                            type: string
                                    trustedIssuer:
                                      type: array
                                      description: >-
                                        This array is used to determine what
                                        credential issuers to accept in this
                                        verification workflow.
                                      items:
                                        type: object
                                        properties:
                                          required:
                                            type: boolean
                                            description: >-
                                              Indicates whether this issuer is
                                              required for a credential to be accepted
                                              in this workflow.
                                          issuer:
                                            type: string
                                            description: Issuer's DID.
                                        required:
                                          - required
                                          - issuer
                                  required:
                                    - '@context'
                                    - type
                                    - trustedIssuer
                            required:
                              - required
                              - example
                      required:
                        - type
                        - credentialQuery
                    - type: object
                      title: CreatePresentationQueryByFrame
                      properties:
                        type:
                          type: string
                          description: >-
                            Indicates what type of query method would be used by
                            presentation requests created from this presentation
                            template. For selective-disclosure presentation
                            templates you must use `QueryByFrame`.
                        credentialQuery:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              reason:
                                type: string
                                description: >-
                                  This value is displayed in the mobile wallet
                                  to provide the holder with context around why
                                  a credential is being requested. Ensure that
                                  this is written exactly as you would like it
                                  to appear to the user.
                              frame:
                                type: object
                                required:
                                  - '@context'
                                  - type
                                  - credentialSubject
                                properties:
                                  '@context':
                                    type: array
                                    description: >-
                                      This is the JSON-LD schema used to expand
                                      the `credentialSubject`.
                                    items:
                                      type: object
                                  type:
                                    description: >-
                                      The credential type that the mobile wallet
                                      will use to return matching credentials.
                                      Upon the holder's consent, the wallet
                                      would only return credentials that match
                                      this type and have been issued by the
                                      issuers included in the `trustedIssuer`
                                      object. When you include multiple
                                      credential types, the wallet will only
                                      return credentials that match **all** of
                                      the included types.
                                    oneOf:
                                      - type: string
                                        example: VerifiableCredential
                                        description: The value must be VerifiableCredential
                                      - type: array
                                        example:
                                          - '[VerifiableCredential, AlumniCredential]'
                                        items:
                                          type: string
                                          description: >-
                                            VerifiableCredential must be the first
                                            value
                                  credentialSubject:
                                    type: object
                                    description: >-
                                      This object details what claims are
                                      required for this verification workflow.
                                      Only claims included in this object will
                                      be included in the verifiable
                                      presentation, as long as you set
                                      `@explicit` to `true`.
                                    required:
                                      - '@explicit'
                                      - educationalCredentialAwarded
                                      - familyName
                                    properties:
                                      '@explicit':
                                        type: boolean
                                      educationalCredentialAwarded:
                                        type: object
                                      familyName:
                                        type: object
                              trustedIssuer:
                                type: array
                                description: >-
                                  This array is used to determine what
                                  credential issuers to accept in this
                                  verification workflow. If you want to accept
                                  credentials from any issuer as long as they
                                  match the defined credential `type`, leave
                                  this array empty.
                                uniqueItems: true
                                minItems: 0
                                items:
                                  type: object
                                  properties:
                                    required:
                                      type: boolean
                                      description: >-
                                        Indicates whether this issuer is
                                        required for a credential to be accepted
                                        in this workflow.
                                    issuer:
                                      type: string
                                      description: >-
                                        Issuer's DID, must include a BLS key
                                        type.
                                  required:
                                    - required
                                    - issuer
                            required:
                              - reason
                              - frame
                              - trustedIssuer
                      required:
                        - type
                        - credentialQuery
                    - type: object
                      title: CreatePresentationDidAuthTemplate
                      properties:
                        type:
                          type: string
                          description: DIDAuth
                          example: DIDAuth
                      required:
                        - type
            required:
              - id
              - domain
              - name
              - query
            title: PresentationTemplateResponse
      title: PresentationTemplateArrayResponse
    CreatePresentationTemplate:
      type: object
      title: CreatePresentationTemplate
      description: ''
      properties:
        domain:
          type: string
          description: >-
            Informs the wallet holder what domain is the verification request
            coming from. The value must match your tenant URL or your custom
            domain (if you have one set up). If the domain validation is
            unsuccessful, the wallet will not let the user proceed with the
            verification workflow.


            > If you set up a custom domain later, any previous templates
            created where the domain is your tenant URL will become invalid. You
            will need to change any prior templates to use the custom domain.
        name:
          type: string
          description: >-
            Unique value that is used internally to manage your templates. It
            must be unique across all presentation templates on your tenant, but
            is not shown to the holder.
        query:
          type: array
          description: >-
            Indicates what type of query method would be used by presentation
            requests created from this presentation template:

            - QueryByExample: This query method uses the credential `type` and
            `trustedIssuer` to only accept verifiable presentations that match
            these parameters.

            - QueryByFrame: This query method is used to create presentation
            requests that wonly require specific claims in the verifiable
            presentations and thus enable [selective
            disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

            - DidAuth: This query method id used to authenticate with the tenant
            and provide the holder's DID.

            You can request multiple credentials in one request by adding
            additioanl `credentialQuery` objects to the `query` array.
          items:
            anyOf:
              - type: object
                x-examples: {}
                title: CreatePresentationQueryByExample
                properties:
                  type:
                    type: string
                    example: QueryByExample
                    description: >-
                      Indicates what type of query method would be used by
                      presentation requests created from this presentation
                      template. For basic presentation templates you must use
                      `QueryByExample`.
                  credentialQuery:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      minProperties: 1
                      properties:
                        required:
                          type: boolean
                          description: >-
                            When set to `true`, the verification workflow will
                            fail if a matching credential is not provided in the
                            verifiable presentation response. You can only
                            change this to `false` when your templates has
                            multiple `credentialQuery` objects.
                        reason:
                          type: string
                          description: >-
                            This value is displayed in the mobile wallet to
                            provide the holder with context around why a
                            credential is being requested. Ensure that this is
                            written exactly as you would like it to appear to
                            the user.
                        example:
                          type: array
                          items:
                            type: object
                            properties:
                              '@context':
                                type: array
                                description: >-
                                  This is the JSON-LD schema used to expand the
                                  `example` in the `query`. Only matched
                                  credentials will be included in the
                                  presentation response. In case the credential
                                  uses a specific JSON-LD schema, you must add
                                  that schema into the `@context` array so that
                                  the credential could be matched against the
                                  presentation request.
                                items: {}
                              type:
                                description: >-
                                  The credential type that the mobile wallet
                                  will use to return matching credentials. Upon
                                  the holder's consent, the wallet would only
                                  return credentials that match this type and
                                  have been issued by the issuers included in
                                  the `trustedIssuer` object. When you include
                                  multiple credential types, the wallet will
                                  only return credentials that match **all** of
                                  the included types.
                                oneOf:
                                  - type: string
                                    example: AlumniCredential
                                  - type: array
                                    example:
                                      - '[AlumniCredential]'
                                    items:
                                      type: string
                              trustedIssuer:
                                type: array
                                description: >-
                                  This array is used to determine what
                                  credential issuers to accept in this
                                  verification workflow.
                                items:
                                  type: object
                                  properties:
                                    required:
                                      type: boolean
                                      description: >-
                                        Indicates whether this issuer is
                                        required for a credential to be accepted
                                        in this workflow.
                                    issuer:
                                      type: string
                                      description: Issuer's DID.
                                  required:
                                    - required
                                    - issuer
                            required:
                              - '@context'
                              - type
                              - trustedIssuer
                      required:
                        - required
                        - example
                required:
                  - type
                  - credentialQuery
              - type: object
                title: CreatePresentationQueryByFrame
                properties:
                  type:
                    type: string
                    description: >-
                      Indicates what type of query method would be used by
                      presentation requests created from this presentation
                      template. For selective-disclosure presentation templates
                      you must use `QueryByFrame`.
                  credentialQuery:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        reason:
                          type: string
                          description: >-
                            This value is displayed in the mobile wallet to
                            provide the holder with context around why a
                            credential is being requested. Ensure that this is
                            written exactly as you would like it to appear to
                            the user.
                        frame:
                          type: object
                          required:
                            - '@context'
                            - type
                            - credentialSubject
                          properties:
                            '@context':
                              type: array
                              description: >-
                                This is the JSON-LD schema used to expand the
                                `credentialSubject`.
                              items:
                                type: object
                            type:
                              description: >-
                                The credential type that the mobile wallet will
                                use to return matching credentials. Upon the
                                holder's consent, the wallet would only return
                                credentials that match this type and have been
                                issued by the issuers included in the
                                `trustedIssuer` object. When you include
                                multiple credential types, the wallet will only
                                return credentials that match **all** of the
                                included types.
                              oneOf:
                                - type: string
                                  example: VerifiableCredential
                                  description: The value must be VerifiableCredential
                                - type: array
                                  example:
                                    - '[VerifiableCredential, AlumniCredential]'
                                  items:
                                    type: string
                                    description: >-
                                      VerifiableCredential must be the first
                                      value
                            credentialSubject:
                              type: object
                              description: >-
                                This object details what claims are required for
                                this verification workflow. Only claims included
                                in this object will be included in the
                                verifiable presentation, as long as you set
                                `@explicit` to `true`.
                              required:
                                - '@explicit'
                                - educationalCredentialAwarded
                                - familyName
                              properties:
                                '@explicit':
                                  type: boolean
                                educationalCredentialAwarded:
                                  type: object
                                familyName:
                                  type: object
                        trustedIssuer:
                          type: array
                          description: >-
                            This array is used to determine what credential
                            issuers to accept in this verification workflow. If
                            you want to accept credentials from any issuer as
                            long as they match the defined credential `type`,
                            leave this array empty.
                          uniqueItems: true
                          minItems: 0
                          items:
                            type: object
                            properties:
                              required:
                                type: boolean
                                description: >-
                                  Indicates whether this issuer is required for
                                  a credential to be accepted in this workflow.
                              issuer:
                                type: string
                                description: Issuer's DID, must include a BLS key type.
                            required:
                              - required
                              - issuer
                      required:
                        - reason
                        - frame
                        - trustedIssuer
                required:
                  - type
                  - credentialQuery
              - type: object
                title: CreatePresentationDidAuthTemplate
                properties:
                  type:
                    type: string
                    description: DIDAuth
                    example: DIDAuth
                required:
                  - type
      required:
        - domain
        - name
        - query
    UpdatePresentationTemplate:
      title: UpdatePresentationTemplate
      allOf:
        - type: object
          properties:
            id:
              type: string
        - type: object
          title: CreatePresentationTemplate
          description: ''
          properties:
            domain:
              type: string
              description: >-
                Informs the wallet holder what domain is the verification
                request coming from. The value must match your tenant URL or
                your custom domain (if you have one set up). If the domain
                validation is unsuccessful, the wallet will not let the user
                proceed with the verification workflow.


                > If you set up a custom domain later, any previous templates
                created where the domain is your tenant URL will become invalid.
                You will need to change any prior templates to use the custom
                domain.
            name:
              type: string
              description: >-
                Unique value that is used internally to manage your templates.
                It must be unique across all presentation templates on your
                tenant, but is not shown to the holder.
            query:
              type: array
              description: >-
                Indicates what type of query method would be used by
                presentation requests created from this presentation template:

                - QueryByExample: This query method uses the credential `type`
                and `trustedIssuer` to only accept verifiable presentations that
                match these parameters.

                - QueryByFrame: This query method is used to create presentation
                requests that wonly require specific claims in the verifiable
                presentations and thus enable [selective
                disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                - DidAuth: This query method id used to authenticate with the
                tenant and provide the holder's DID.

                You can request multiple credentials in one request by adding
                additioanl `credentialQuery` objects to the `query` array.
              items:
                anyOf:
                  - type: object
                    x-examples: {}
                    title: CreatePresentationQueryByExample
                    properties:
                      type:
                        type: string
                        example: QueryByExample
                        description: >-
                          Indicates what type of query method would be used by
                          presentation requests created from this presentation
                          template. For basic presentation templates you must
                          use `QueryByExample`.
                      credentialQuery:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          type: object
                          minProperties: 1
                          properties:
                            required:
                              type: boolean
                              description: >-
                                When set to `true`, the verification workflow
                                will fail if a matching credential is not
                                provided in the verifiable presentation
                                response. You can only change this to `false`
                                when your templates has multiple
                                `credentialQuery` objects.
                            reason:
                              type: string
                              description: >-
                                This value is displayed in the mobile wallet to
                                provide the holder with context around why a
                                credential is being requested. Ensure that this
                                is written exactly as you would like it to
                                appear to the user.
                            example:
                              type: array
                              items:
                                type: object
                                properties:
                                  '@context':
                                    type: array
                                    description: >-
                                      This is the JSON-LD schema used to expand
                                      the `example` in the `query`. Only matched
                                      credentials will be included in the
                                      presentation response. In case the
                                      credential uses a specific JSON-LD schema,
                                      you must add that schema into the
                                      `@context` array so that the credential
                                      could be matched against the presentation
                                      request.
                                    items: {}
                                  type:
                                    description: >-
                                      The credential type that the mobile wallet
                                      will use to return matching credentials.
                                      Upon the holder's consent, the wallet
                                      would only return credentials that match
                                      this type and have been issued by the
                                      issuers included in the `trustedIssuer`
                                      object. When you include multiple
                                      credential types, the wallet will only
                                      return credentials that match **all** of
                                      the included types.
                                    oneOf:
                                      - type: string
                                        example: AlumniCredential
                                      - type: array
                                        example:
                                          - '[AlumniCredential]'
                                        items:
                                          type: string
                                  trustedIssuer:
                                    type: array
                                    description: >-
                                      This array is used to determine what
                                      credential issuers to accept in this
                                      verification workflow.
                                    items:
                                      type: object
                                      properties:
                                        required:
                                          type: boolean
                                          description: >-
                                            Indicates whether this issuer is
                                            required for a credential to be accepted
                                            in this workflow.
                                        issuer:
                                          type: string
                                          description: Issuer's DID.
                                      required:
                                        - required
                                        - issuer
                                required:
                                  - '@context'
                                  - type
                                  - trustedIssuer
                          required:
                            - required
                            - example
                    required:
                      - type
                      - credentialQuery
                  - type: object
                    title: CreatePresentationQueryByFrame
                    properties:
                      type:
                        type: string
                        description: >-
                          Indicates what type of query method would be used by
                          presentation requests created from this presentation
                          template. For selective-disclosure presentation
                          templates you must use `QueryByFrame`.
                      credentialQuery:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          type: object
                          properties:
                            reason:
                              type: string
                              description: >-
                                This value is displayed in the mobile wallet to
                                provide the holder with context around why a
                                credential is being requested. Ensure that this
                                is written exactly as you would like it to
                                appear to the user.
                            frame:
                              type: object
                              required:
                                - '@context'
                                - type
                                - credentialSubject
                              properties:
                                '@context':
                                  type: array
                                  description: >-
                                    This is the JSON-LD schema used to expand
                                    the `credentialSubject`.
                                  items:
                                    type: object
                                type:
                                  description: >-
                                    The credential type that the mobile wallet
                                    will use to return matching credentials.
                                    Upon the holder's consent, the wallet would
                                    only return credentials that match this type
                                    and have been issued by the issuers included
                                    in the `trustedIssuer` object. When you
                                    include multiple credential types, the
                                    wallet will only return credentials that
                                    match **all** of the included types.
                                  oneOf:
                                    - type: string
                                      example: VerifiableCredential
                                      description: The value must be VerifiableCredential
                                    - type: array
                                      example:
                                        - '[VerifiableCredential, AlumniCredential]'
                                      items:
                                        type: string
                                        description: >-
                                          VerifiableCredential must be the first
                                          value
                                credentialSubject:
                                  type: object
                                  description: >-
                                    This object details what claims are required
                                    for this verification workflow. Only claims
                                    included in this object will be included in
                                    the verifiable presentation, as long as you
                                    set `@explicit` to `true`.
                                  required:
                                    - '@explicit'
                                    - educationalCredentialAwarded
                                    - familyName
                                  properties:
                                    '@explicit':
                                      type: boolean
                                    educationalCredentialAwarded:
                                      type: object
                                    familyName:
                                      type: object
                            trustedIssuer:
                              type: array
                              description: >-
                                This array is used to determine what credential
                                issuers to accept in this verification workflow.
                                If you want to accept credentials from any
                                issuer as long as they match the defined
                                credential `type`, leave this array empty.
                              uniqueItems: true
                              minItems: 0
                              items:
                                type: object
                                properties:
                                  required:
                                    type: boolean
                                    description: >-
                                      Indicates whether this issuer is required
                                      for a credential to be accepted in this
                                      workflow.
                                  issuer:
                                    type: string
                                    description: Issuer's DID, must include a BLS key type.
                                required:
                                  - required
                                  - issuer
                          required:
                            - reason
                            - frame
                            - trustedIssuer
                    required:
                      - type
                      - credentialQuery
                  - type: object
                    title: CreatePresentationDidAuthTemplate
                    properties:
                      type:
                        type: string
                        description: DIDAuth
                        example: DIDAuth
                    required:
                      - type
          required:
            - domain
            - name
            - query
    CreatePresentationRequestRequest:
      type: object
      required:
        - challenge
        - templateId
        - did
        - callbackUrl
      properties:
        challenge:
          type: string
          description: >-
            This unique identifier will be used to validate the presentation
            response sent to the configured `callbackUrl`. By comparing
            `challenge` with the `challengeId` value in the response, you can
            ensure it was sent by the intended MATTR VII tenant.
          example: 64e45290-9980-11ea-b872-f1bee5fb328f
        did:
          type: string
          description: >-
            This is the DID associated with the verifier. It must be available
            on the tenant and have a key type that is able to be used for
            messaging (e.g. a ed25519 key type).
          example: did:key:z6Mkt7bFYc4V2HdAxwhMtaY6cgJckYXwhYdPLJCcnVqzrkpr
        templateId:
          type: string
          description: >-
            The `id` value of an existing presentation template that will be
            used to create the presentation request.
          example: 64e45290-9980-11ea-b872-f1bee5fb328f
        expiresTime:
          type: number
          description: >-
            Once the time (Unix time) is reached the presentation corresponding
            to the challenge will not be accepted. For the purpose of testing
            you may wish to extend this out. Value cannot be more than 30
            minutes (1800000ms) in the future, which is the maximal expiry
            period for a presentation request. Defaults to five minutes if no
            value is provided.
          example: 1592955632103
        callbackUrl:
          type: string
          format: uri
          description: >-
            This is the path that you want MATTR VII to message (in the form of
            a JSON body) once it has received and processed the verifiable
            presentation from the mobile wallet holder:

            - Must be a valid URL.

            - Must use the HTTPS protocol.

            - Must not be an IP address.

            - Must not include query parameters.

            - Must be available, accept POST requests and respond with a 200 OK.

            > The callback URL will not be present directly in the signed
            presentation request. We highly recommend protecting the callback
            endpoint by including a unique identifier in the URL to create a
            unique callback URL for each request, which would make it hard to
            guess.

            > We recommend the callback endpoint always responds with a 404
            header to any unsuccessful calls.
          example: https://your-website.com/api/callback
      title: CreatePresentationRequestRequest
    CreatePresentationRequestResponse:
      type: object
      properties:
        id:
          type: string
          description: Presentation Request id
          example: c74128a0-9949-11ea-9554-b5a630b3c119
        callbackUrl:
          type: string
          format: uri
          description: Endpoint that will receive the Verifiable Presentation
          example: https://your-website.com/api/callback
        request:
          type: object
          description: Presentation Request Details
          properties:
            id:
              type: string
              format: uuid
              description: Presentation Request id
              example: c74128a0-9949-11ea-9554-b5a630b3c119
            type:
              type: string
              format: uri
              description: Presentation Request schema
              example: >-
                https://mattr.global/schemas/verifiable-presentation/request/QueryByExample
            from:
              type: string
              description: Verifier DID
              example: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
            created_time:
              type: number
              description: Creation time
              example: 1606709582907
            expires_time:
              type: number
              description: Expiry time
              example: 2594859115000
            reply_url:
              type: string
              description: Endpoint that will receive the Verifiable Presentation
              example: https://your-website.com/api/callback
            reply_to:
              type: array
              description: Verifier DID
              items:
                type: string
                example: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
            body:
              description: Definition of what type of Credential is being requested
              allOf:
                - type: object
                  properties:
                    id:
                      type: string
                      example: 64e45290-9980-11ea-b872-f1bee5fb328f
                      description: >-
                        Unique identifier for this presentation template. You
                        will need it to [create a presentation
                        request](#operation/createPresRequestV2) based on this
                        template. You can also use it to
                        [retrieve](#operation/retrievePresTemplateV2),
                        [update](#operation/updatePresTemplateV2) or
                        [remove](#operation/removePresTemplateV2) this
                        presentation template.
                    domain:
                      type: string
                      example: tenant.vii.mattr.global
                    name:
                      type: string
                      example: alumni_credential_request
                    query:
                      type: array
                      items:
                        anyOf:
                          - type: object
                            x-examples: {}
                            title: CreatePresentationQueryByExample
                            properties:
                              type:
                                type: string
                                example: QueryByExample
                                description: >-
                                  Indicates what type of query method would be
                                  used by presentation requests created from
                                  this presentation template. For basic
                                  presentation templates you must use
                                  `QueryByExample`.
                              credentialQuery:
                                type: array
                                uniqueItems: true
                                minItems: 1
                                items:
                                  type: object
                                  minProperties: 1
                                  properties:
                                    required:
                                      type: boolean
                                      description: >-
                                        When set to `true`, the verification
                                        workflow will fail if a matching
                                        credential is not provided in the
                                        verifiable presentation response. You
                                        can only change this to `false` when
                                        your templates has multiple
                                        `credentialQuery` objects.
                                    reason:
                                      type: string
                                      description: >-
                                        This value is displayed in the mobile
                                        wallet to provide the holder with
                                        context around why a credential is being
                                        requested. Ensure that this is written
                                        exactly as you would like it to appear
                                        to the user.
                                    example:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          '@context':
                                            type: array
                                            description: >-
                                              This is the JSON-LD schema used to
                                              expand the `example` in the `query`.
                                              Only matched credentials will be
                                              included in the presentation response.
                                              In case the credential uses a specific
                                              JSON-LD schema, you must add that schema
                                              into the `@context` array so that the
                                              credential could be matched against the
                                              presentation request.
                                            items: {}
                                          type:
                                            description: >-
                                              The credential type that the mobile
                                              wallet will use to return matching
                                              credentials. Upon the holder's consent,
                                              the wallet would only return credentials
                                              that match this type and have been
                                              issued by the issuers included in the
                                              `trustedIssuer` object. When you include
                                              multiple credential types, the wallet
                                              will only return credentials that match
                                              **all** of the included types.
                                            oneOf:
                                              - type: string
                                                example: AlumniCredential
                                              - type: array
                                                example:
                                                  - '[AlumniCredential]'
                                                items:
                                                  type: string
                                          trustedIssuer:
                                            type: array
                                            description: >-
                                              This array is used to determine what
                                              credential issuers to accept in this
                                              verification workflow.
                                            items:
                                              type: object
                                              properties:
                                                required:
                                                  type: boolean
                                                  description: >-
                                                    Indicates whether this issuer is
                                                    required for a credential to be accepted
                                                    in this workflow.
                                                issuer:
                                                  type: string
                                                  description: Issuer's DID.
                                              required:
                                                - required
                                                - issuer
                                        required:
                                          - '@context'
                                          - type
                                          - trustedIssuer
                                  required:
                                    - required
                                    - example
                            required:
                              - type
                              - credentialQuery
                          - type: object
                            title: CreatePresentationQueryByFrame
                            properties:
                              type:
                                type: string
                                description: >-
                                  Indicates what type of query method would be
                                  used by presentation requests created from
                                  this presentation template. For
                                  selective-disclosure presentation templates
                                  you must use `QueryByFrame`.
                              credentialQuery:
                                type: array
                                uniqueItems: true
                                minItems: 1
                                items:
                                  type: object
                                  properties:
                                    reason:
                                      type: string
                                      description: >-
                                        This value is displayed in the mobile
                                        wallet to provide the holder with
                                        context around why a credential is being
                                        requested. Ensure that this is written
                                        exactly as you would like it to appear
                                        to the user.
                                    frame:
                                      type: object
                                      required:
                                        - '@context'
                                        - type
                                        - credentialSubject
                                      properties:
                                        '@context':
                                          type: array
                                          description: >-
                                            This is the JSON-LD schema used to
                                            expand the `credentialSubject`.
                                          items:
                                            type: object
                                        type:
                                          description: >-
                                            The credential type that the mobile
                                            wallet will use to return matching
                                            credentials. Upon the holder's consent,
                                            the wallet would only return credentials
                                            that match this type and have been
                                            issued by the issuers included in the
                                            `trustedIssuer` object. When you include
                                            multiple credential types, the wallet
                                            will only return credentials that match
                                            **all** of the included types.
                                          oneOf:
                                            - type: string
                                              example: VerifiableCredential
                                              description: The value must be VerifiableCredential
                                            - type: array
                                              example:
                                                - '[VerifiableCredential, AlumniCredential]'
                                              items:
                                                type: string
                                                description: >-
                                                  VerifiableCredential must be the first
                                                  value
                                        credentialSubject:
                                          type: object
                                          description: >-
                                            This object details what claims are
                                            required for this verification workflow.
                                            Only claims included in this object will
                                            be included in the verifiable
                                            presentation, as long as you set
                                            `@explicit` to `true`.
                                          required:
                                            - '@explicit'
                                            - educationalCredentialAwarded
                                            - familyName
                                          properties:
                                            '@explicit':
                                              type: boolean
                                            educationalCredentialAwarded:
                                              type: object
                                            familyName:
                                              type: object
                                    trustedIssuer:
                                      type: array
                                      description: >-
                                        This array is used to determine what
                                        credential issuers to accept in this
                                        verification workflow. If you want to
                                        accept credentials from any issuer as
                                        long as they match the defined
                                        credential `type`, leave this array
                                        empty.
                                      uniqueItems: true
                                      minItems: 0
                                      items:
                                        type: object
                                        properties:
                                          required:
                                            type: boolean
                                            description: >-
                                              Indicates whether this issuer is
                                              required for a credential to be accepted
                                              in this workflow.
                                          issuer:
                                            type: string
                                            description: >-
                                              Issuer's DID, must include a BLS key
                                              type.
                                        required:
                                          - required
                                          - issuer
                                  required:
                                    - reason
                                    - frame
                                    - trustedIssuer
                            required:
                              - type
                              - credentialQuery
                          - type: object
                            title: CreatePresentationDidAuthTemplate
                            properties:
                              type:
                                type: string
                                description: DIDAuth
                                example: DIDAuth
                            required:
                              - type
                  required:
                    - id
                    - domain
                    - name
                    - query
                  title: PresentationTemplateResponse
                - type: object
                  properties:
                    challenge:
                      type: string
                      format: uuid
                      description: Challenge to match the response to a request
                      example: e1b35ae0-9e0e-11ea-9bbf-a387b27c9e60
        didcommUri:
          type: string
          format: uri
          description: >-
            A DIDComm URI that is pointing to a shortened presentation request
            JWS message
      title: CreatePresentationRequestResponse
    VerifiablePresentation:
      description: ''
      type: object
      x-examples: {}
      title: VerifiablePresentation
      properties:
        presentation:
          type: object
          required:
            - '@context'
            - type
            - verifiableCredential
            - id
            - holder
            - proof
          properties:
            '@context':
              type: array
              items:
                type: object
            type:
              type: array
              items:
                type: object
            verifiableCredential:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: object
                properties:
                  '@context':
                    type: array
                    example:
                      - https://www.w3.org/2018/credentials/v1
                      - https://www.w3.org/2018/credentials/examples/v1
                    items:
                      type: string
                      minLength: 1
                      example: >-
                        "https://www.w3.org/2018/credentials/v1",
                        "https://www.w3.org/2018/credentials/examples/v1"
                  type:
                    type: array
                    example:
                      - VerifiableCredential
                      - AlumniCredential
                    items:
                      type: string
                      minLength: 1
                      example: '"AlumniCredential", "VerifiableCredential"'
                  issuer:
                    description: >-
                      Includes Issuer id (DID), domain name and optional
                      branding properties.
                    oneOf:
                      - type: object
                        properties:
                          id:
                            type: string
                            example: did:web:organization.com
                          name:
                            type: string
                            example: Example University
                          logoUrl:
                            type: string
                            example: https://example.edu/img/logo.png
                            description: >-
                              The location of the logo image. The supported
                              formats are jpg, png, and svg.
                          iconUrl:
                            type: string
                            example: https://example.edu/img/icon.png
                            description: >-
                              The location of the icon image. The supported
                              formats are jpg, png, and svg.
                      - type: string
                  credentialBranding:
                    type: object
                    description: Includes optional credential branding properties.
                    properties:
                      backgroundColor:
                        type: string
                        example: '#B00AA0'
                        description: >-
                          The background colour used for the credential card.
                          The format is "#rrggbb" where "rrggbb" is a hex RGB
                          triplet, such as "#FFCC00".
                      watermarkImageUrl:
                        type: string
                        example: https://example.edu/img/watermark.png
                        description: >-
                          The location of the watermark image. The supported
                          formats are jpg, png, and svg.
                  issuanceDate:
                    type: string
                    format: date-time
                    example: '2020-05-02T12:06:29.156Z'
                  credentialStatus:
                    type: object
                    description: Credential status location information
                    properties:
                      id:
                        type: string
                        description: Unique ID for the credential status
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3#1
                      type:
                        type: string
                        description: >-
                          Indicates that the status contains revocation
                          information
                        example: RevocationList2020Status
                      revocationListIndex:
                        type: integer
                        example: 1
                        description: >-
                          The location within the revocation list for the
                          credential
                      revocationListCredential:
                        type: string
                        description: The location of the revocation list
                        example: >-
                          https://tenant.vii.mattr.global/core/v1/revocation-lists/cc641396-3750-43c8-b8b8-f30d74eb3fb3
                    title: CredentialStatus
                  credentialSubject:
                    type: object
                    example:
                      givenName: Jamie
                      familyName: Doe
                      alumniOf: Example University
                    properties:
                      givenName:
                        type: string
                        example: Jamie
                      familyName:
                        type: string
                        example: Doe
                      alumniOf:
                        type: string
                        example: Example University
                  proof:
                    type: object
                    properties:
                      type:
                        type: string
                        example: Ed25519Signature2018
                      created:
                        type: string
                        format: date-time
                        example: '2020-05-02T12:06:29Z'
                      jws:
                        type: string
                        description: Compact form of JWS
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                      proofPurpose:
                        type: string
                        example: assertionMethod
                      verificationMethod:
                        type: string
                        example: did:web:organization.com
                    title: ED25519Signature2018
                  name:
                    type: string
                    example: Alumni Credential
                    description: Name of the credential (requires v2 data model)
                  description:
                    type: string
                    example: >-
                      This credential shows that the person has attended the
                      mentioned university.
                    description: Description of the credential (requires v2 data model)
                required:
                  - '@context'
                  - type
                  - issuanceDate
                  - credentialSubject
                  - proof
                title: VerifiableCredential
            id:
              type: string
              minLength: 1
            holder:
              type: string
              minLength: 1
            proof:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                type: object
                properties:
                  type:
                    type: string
                    minLength: 1
                  created:
                    type: string
                    minLength: 1
                  challenge:
                    type: string
                    minLength: 1
                  domain:
                    type: string
                    minLength: 1
                  jws:
                    type: string
                    minLength: 1
                  proofPurpose:
                    type: string
                    minLength: 1
                  verificationMethod:
                    type: string
                    minLength: 1
                required:
                  - type
                  - created
                  - challenge
                  - domain
                  - jws
                  - proofPurpose
                  - verificationMethod
        challenge:
          type: string
          example: 3182bdea-63d9-11ea-b6de-3b7c1404d57f
        domain:
          type: string
          example: example.com
      required:
        - presentation
    VerifyPresentation:
      title: VerifyPresentation
      type: object
      properties:
        verified:
          type: boolean
          description: >-
            Set to `true` if the presentation passed all checks, and `false`
            otherwise.
        reason:
          type: string
          description: When `verified` is `false`, details why the verification had failed.
      required:
        - verified
    LinkedDataRequest:
      type: object
      description: >
        Request to convert into a CBOR-LD document

        JSON-LD input encoding defaults to none, while CBOR-LD input encoding
        defaults to base64
      properties:
        options:
          type: object
          required:
            - inputFormat
            - outputFormat
          properties:
            inputFormat:
              type: string
              enum:
                - jsonld
                - cborld
            outputFormat:
              type: string
              enum:
                - jsonld
                - cborld
            outputEncoding:
              type: string
              description: >
                When output format is `cborld`, the output encoding is
                `base64`. 

                If output format is `jsonld`, the output encoding can be either
                `none` (object) or `base64` (string)
              default: base64
              enum:
                - base64
                - none
        data:
          oneOf:
            - type: string
              description: The payload CBOR-LD or JSON-LD base64 string
            - type: object
              description: The payload JSON-LD object
      required:
        - options
        - data
    LinkedDataResponse:
      type: object
      x-examples: {}
      title: ''
      properties:
        metadata:
          type: object
          properties:
            encoding:
              type: string
              description: the encoding applied on top of actual result
              enum:
                - base64
                - none
            format:
              type: string
              enum:
                - cborld
                - jsonld
        data:
          oneOf:
            - type: string
              description: The output CBOR-LD or JSON-LD base64 string
            - type: object
              description: The output JSON-LD object
    web-semantic-credential-configurations_components-schemas-CredentialConfiguration:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 1024
          description: >-
            Insert a meaningful name for the credential. This string is
            displayed on the top part of the credential in the holder's digital
            wallet. It is recommended to limit this value to 18 characters as
            any additional characters are not displayed on the credential.
          example: Course credential
        description:
          type: string
          maxLength: 1024
          description: >-
            Insert a meaningful description for the credential. This string is
            displayed below the name field on the credential in the holder's
            digital wallet. It is recommended to limist this value to 38
            characters as any additional characters are not displayed on the
            credential.
          example: This credential shows that the person has attended a course.
        type:
          description: >-
            Used to differentiate between different Web credential
            configurations on your tenant. Thus, its value must:

            - Be unique across all Web credential configurations on your tenant.

            - Not be `VerifiableCredential`.
          type: string
          minLength: 1
          maxLength: 1024
          example: CourseCredential
        additionalTypes:
          description: >-
            Additional credential types that can be referenced. Each entry must
            be 1-1024 characters long, with no whitespaces allowed.
          type: array
          example:
            - AlumniCredential
            - EducationCredential
          items:
            type: string
            maxLength: 1024
        contexts:
          type: array
          description: >-
            Additional JSON-LD contexts to be included in the credential. As
            part of the credential issuance MATTR VII will auto-inject the
            following contexts, which reference the W3C Verifiable Credential
            definitions:

            - https://www.w3.org/2018/credentials/v1

            - https://mattr.global/contexts/vc-extensions/v2

            - https://w3id.org/vc-revocation-list-2020/v1

            If you require introducing a different context for your production
            implementation, please [contact us](https://mattr.global/contact).
            Referenced contexts must be whitelisted or credential issuance will
            fail.
          example:
            - https://optionalschema.example/
          items:
            type: string
            description: Must be an HTTPS URL.
        issuer:
          type: object
          description: >-
            Issuer details and branding for issued credentials. Refer to this
            [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to learn more
            about branding best practices.
          required:
            - name
          properties:
            name:
              type: string
              description: >-
                Insert a meaningful name to indicate the issuer. This string is
                used when the credential is offered to the holder. It is also
                used on the bottom part of the credential when `logoURL` is not
                provided.
              example: ABC University
            logoUrl:
              type: string
              description: >-
                Insert a URL for a logo that is displayed on the bottom part of
                the credential. If no logo is provided, the issuer's `name` and
                `iconURL` are used instead. The logo must meet the following
                criteria:

                - URL must be publicly available.

                - Must be 140x42 px in size.

                - **svg**, **png** and **jpg** files are supported, but **svg**
                is recommended. Raster images, whilst supported, are currently
                displayed at 1x resolution and may look pixelated on some
                devices.

                - Transparencies are allowed for **svg** or **png** images.

                - If no logo is provided, the first letter of the issuer name is
                displayed instead.

                - The recommended maximum size is 50 KB.
              example: https://example.edu/img/logo.png
            iconUrl:
              type: string
              example: https://example.edu/img/icon.png
              description: >-
                Insert a URL for an icon that is displayed next to the issuer's
                name when the credential is offered to the holder. It is also
                displayed next to the issuer's name on the bottom part of the
                credential when `logoURL` is not provided. When `iconURL` is not
                provided, the first letter from `name` is used instead. The icon
                must meet the following criteria:

                - URL must be publicly available.

                - Must be 32x32 px in size.

                - **svg**, **png** and **jpg** files are supported, but **svg**
                is recommended. Raster images, whilst supported, are currently
                displayed at 1x resolution and may look pixelated on some
                devices.

                - Transparencies are allowed for svg or png images.

                - The recommended maximum size is 15 KB.
        proofType:
          description: >-
            This is an _optional_ field which defines the cryptographic
            algorithm used to sign the credential. The credential Issuer's DID
            must contain a key that supports the corresponding signing
            capability. If no `proofType` is provided, the credential will be
            signed using the key that is available in the Issuer's DID:

            - If a `Bls12381G2` key is available, the credential will be signed
            with a `BbsSignature2022` proof. Credentials signed with this proof
            type support [selective
            disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

            - If a `Bls12381G2` key is unavailable and a `Ed25519` key is
            available, the credential will be signed with a
            `Ed25519Signature2018` proof. Credentials signed with this proof
            type do not support [selective
            disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

            - If none of the two suitable keys are available, the request will
            be rejected and the credential will not be created.
          type: string
          enum:
            - Ed25519Signature2018
            - BbsSignature2022
          example: Ed25519Signature2018
        credentialBranding:
          type: object
          description: >-
            Additional branding that will be applied to issued credentials.
            Refer to this [video](https://www.youtube.com/watch?v=Tu8ApHBWG90)
            to learn more about branding best practices.
          properties:
            backgroundColor:
              type: string
              example: '#B00AA0'
              description: >-
                Insert a colour hex code to use for the credential background
                color in the holder's digital wallet.
            watermarkImageUrl:
              type: string
              example: https://example.edu/img/watermark.png
              description: >-
                Insert a URL for a watermark image to be included as a pattern
                on the credential in the holder's digital wallet:

                - URL must be publicly available.

                - Must be 245x150px in size.

                - **svg**, **png** and **jpg** files are supported, but **svg**
                is recommended.

                - If no watermark image is provided, a wave pattern is applied
                to the credentials by default.

                - The recommended maximum size is 150 KB.
        claimMappings:
          type: object
          description: >
            This is where you specify how to map claims (user attributes) into
            issued credentials. Each field in the object corresponds to a claim
            in the issued credential, and contains one or more from the
            following attributes:

            - `mapFrom`: References the path in the user object where the claim
            is available.
              - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
              - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
            - `defaultValue`: Indicates what value is used if required is set to
            `false` (field is optional) and no value is provided by the claims
            source. When `defaultValue` is provided, `mapFrom` is optional.

            - `required`: Indicates whether the claim is required (default:
            `false`). When a required claim cannot be retrieved and no
            `defaultValue` is available, credential issuance will fail.

            **Example source context object**

            ```json

            {
              "claims": {
                "given_name": "Jamie",
                "family_name": "Doe",
                "address": {
                  "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                }
              },
              "authenticationProvider": {
                "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                "url": "https://accounts.google.com"
              }
            }

            ```
          example:
            firstName:
              mapFrom: claims.given_name
              required: true
            address:
              mapFrom: claims.address.formatted
            picture:
              mapFrom: claims.picture
              defaultValue: http://example.edu/img/placeholder.png
            badge:
              defaultValue: http://example.edu/img/badge.png
            providerSubjectId:
              mapFrom: authenticationProvider.subjectId
          additionalProperties:
            type: object
            properties:
              mapFrom:
                type: string
                description: The path of the property in the source context object.
              required:
                type: boolean
                description: >-
                  Indicates whether value of the property must be resolvable. If
                  set to true and does not map to a value, issuance will fail.
              defaultValue:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: array
                  - type: object
                description: >-
                  Default value to be used when unable to resolve from the
                  supplied context object. Required when `mapFrom` is not
                  defined.
        persist:
          type: boolean
          default: false
          description: >-
            When set to `true`, both the issued credential and its metadata are
            stored in the [credential
            registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
            When set to `false` (default) only the following metadata is stored:

            - `id`

            - `tag`

            - `credentialStatus`

            - `issuanceDate`
        revocable:
          type: boolean
          default: true
          description: >-
            When set to `true` (default), the created credential can later be
            revoked. When set to `false`, the credential cannot be revoked. When
            set to `true`, `https://w3id.org/vc-revocation-list-2020/v1` is
            injected into the credential `@context` object when it is issued.
            This references the JSON-LD definition of the `credentialStatus`
            object used to manage revocation status.
        includeId:
          type: boolean
          description: >-
            When set to `true`, the signed credential identifier is included in
            both the `credential` object and the credential metadata. When set
            to `false` it is only included in the credential metadata.
          default: false
          example: true
        claimSourceId:
          type: string
          format: uuid
          description: >-
            References the unique identifier of a claims source that can be used
            to retrieve claims and include them in the issued credential.
        expiresIn:
          type: object
          description: >-
            Used to determine when will issued credentials expire. Can include
            any combination of `years`, `months`, `weeks`, `days`, `hours`,
            `minutes` and `seconds`.
          properties:
            years:
              type: number
            months:
              type: number
              example: 3
            weeks:
              type: number
            days:
              type: number
            hours:
              type: number
            minutes:
              type: number
            seconds:
              type: number
    web-semantic-credential-configurations_components-schemas-CredentialConfigurationResponse:
      required:
        - id
        - name
        - type
        - issuer
        - persist
        - revocable
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Credential Configuration ID
              example: 983c0a86-204f-4431-9371-f5a22e506599
        - type: object
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 1024
              description: >-
                Insert a meaningful name for the credential. This string is
                displayed on the top part of the credential in the holder's
                digital wallet. It is recommended to limit this value to 18
                characters as any additional characters are not displayed on the
                credential.
              example: Course credential
            description:
              type: string
              maxLength: 1024
              description: >-
                Insert a meaningful description for the credential. This string
                is displayed below the name field on the credential in the
                holder's digital wallet. It is recommended to limist this value
                to 38 characters as any additional characters are not displayed
                on the credential.
              example: This credential shows that the person has attended a course.
            type:
              description: >-
                Used to differentiate between different Web credential
                configurations on your tenant. Thus, its value must:

                - Be unique across all Web credential configurations on your
                tenant.

                - Not be `VerifiableCredential`.
              type: string
              minLength: 1
              maxLength: 1024
              example: CourseCredential
            additionalTypes:
              description: >-
                Additional credential types that can be referenced. Each entry
                must be 1-1024 characters long, with no whitespaces allowed.
              type: array
              example:
                - AlumniCredential
                - EducationCredential
              items:
                type: string
                maxLength: 1024
            contexts:
              type: array
              description: >-
                Additional JSON-LD contexts to be included in the credential. As
                part of the credential issuance MATTR VII will auto-inject the
                following contexts, which reference the W3C Verifiable
                Credential definitions:

                - https://www.w3.org/2018/credentials/v1

                - https://mattr.global/contexts/vc-extensions/v2

                - https://w3id.org/vc-revocation-list-2020/v1

                If you require introducing a different context for your
                production implementation, please [contact
                us](https://mattr.global/contact). Referenced contexts must be
                whitelisted or credential issuance will fail.
              example:
                - https://optionalschema.example/
              items:
                type: string
                description: Must be an HTTPS URL.
            issuer:
              type: object
              description: >-
                Issuer details and branding for issued credentials. Refer to
                this [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                learn more about branding best practices.
              required:
                - name
              properties:
                name:
                  type: string
                  description: >-
                    Insert a meaningful name to indicate the issuer. This string
                    is used when the credential is offered to the holder. It is
                    also used on the bottom part of the credential when
                    `logoURL` is not provided.
                  example: ABC University
                logoUrl:
                  type: string
                  description: >-
                    Insert a URL for a logo that is displayed on the bottom part
                    of the credential. If no logo is provided, the issuer's
                    `name` and `iconURL` are used instead. The logo must meet
                    the following criteria:

                    - URL must be publicly available.

                    - Must be 140x42 px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended. Raster images, whilst supported, are
                    currently displayed at 1x resolution and may look pixelated
                    on some devices.

                    - Transparencies are allowed for **svg** or **png** images.

                    - If no logo is provided, the first letter of the issuer
                    name is displayed instead.

                    - The recommended maximum size is 50 KB.
                  example: https://example.edu/img/logo.png
                iconUrl:
                  type: string
                  example: https://example.edu/img/icon.png
                  description: >-
                    Insert a URL for an icon that is displayed next to the
                    issuer's name when the credential is offered to the holder.
                    It is also displayed next to the issuer's name on the bottom
                    part of the credential when `logoURL` is not provided. When
                    `iconURL` is not provided, the first letter from `name` is
                    used instead. The icon must meet the following criteria:

                    - URL must be publicly available.

                    - Must be 32x32 px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended. Raster images, whilst supported, are
                    currently displayed at 1x resolution and may look pixelated
                    on some devices.

                    - Transparencies are allowed for svg or png images.

                    - The recommended maximum size is 15 KB.
            proofType:
              description: >-
                This is an _optional_ field which defines the cryptographic
                algorithm used to sign the credential. The credential Issuer's
                DID must contain a key that supports the corresponding signing
                capability. If no `proofType` is provided, the credential will
                be signed using the key that is available in the Issuer's DID:

                - If a `Bls12381G2` key is available, the credential will be
                signed with a `BbsSignature2022` proof. Credentials signed with
                this proof type support [selective
                disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                - If a `Bls12381G2` key is unavailable and a `Ed25519` key is
                available, the credential will be signed with a
                `Ed25519Signature2018` proof. Credentials signed with this proof
                type do not support [selective
                disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                - If none of the two suitable keys are available, the request
                will be rejected and the credential will not be created.
              type: string
              enum:
                - Ed25519Signature2018
                - BbsSignature2022
              example: Ed25519Signature2018
            credentialBranding:
              type: object
              description: >-
                Additional branding that will be applied to issued credentials.
                Refer to this
                [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to learn
                more about branding best practices.
              properties:
                backgroundColor:
                  type: string
                  example: '#B00AA0'
                  description: >-
                    Insert a colour hex code to use for the credential
                    background color in the holder's digital wallet.
                watermarkImageUrl:
                  type: string
                  example: https://example.edu/img/watermark.png
                  description: >-
                    Insert a URL for a watermark image to be included as a
                    pattern on the credential in the holder's digital wallet:

                    - URL must be publicly available.

                    - Must be 245x150px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended.

                    - If no watermark image is provided, a wave pattern is
                    applied to the credentials by default.

                    - The recommended maximum size is 150 KB.
            claimMappings:
              type: object
              description: >
                This is where you specify how to map claims (user attributes)
                into issued credentials. Each field in the object corresponds to
                a claim in the issued credential, and contains one or more from
                the following attributes:

                - `mapFrom`: References the path in the user object where the
                claim is available.
                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                - `defaultValue`: Indicates what value is used if required is
                set to `false` (field is optional) and no value is provided by
                the claims source. When `defaultValue` is provided, `mapFrom` is
                optional.

                - `required`: Indicates whether the claim is required (default:
                `false`). When a required claim cannot be retrieved and no
                `defaultValue` is available, credential issuance will fail.

                **Example source context object**

                ```json

                {
                  "claims": {
                    "given_name": "Jamie",
                    "family_name": "Doe",
                    "address": {
                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                    }
                  },
                  "authenticationProvider": {
                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                    "url": "https://accounts.google.com"
                  }
                }

                ```
              example:
                firstName:
                  mapFrom: claims.given_name
                  required: true
                address:
                  mapFrom: claims.address.formatted
                picture:
                  mapFrom: claims.picture
                  defaultValue: http://example.edu/img/placeholder.png
                badge:
                  defaultValue: http://example.edu/img/badge.png
                providerSubjectId:
                  mapFrom: authenticationProvider.subjectId
              additionalProperties:
                type: object
                properties:
                  mapFrom:
                    type: string
                    description: The path of the property in the source context object.
                  required:
                    type: boolean
                    description: >-
                      Indicates whether value of the property must be
                      resolvable. If set to true and does not map to a value,
                      issuance will fail.
                  defaultValue:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: array
                      - type: object
                    description: >-
                      Default value to be used when unable to resolve from the
                      supplied context object. Required when `mapFrom` is not
                      defined.
            persist:
              type: boolean
              default: false
              description: >-
                When set to `true`, both the issued credential and its metadata
                are stored in the [credential
                registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                When set to `false` (default) only the following metadata is
                stored:

                - `id`

                - `tag`

                - `credentialStatus`

                - `issuanceDate`
            revocable:
              type: boolean
              default: true
              description: >-
                When set to `true` (default), the created credential can later
                be revoked. When set to `false`, the credential cannot be
                revoked. When set to `true`,
                `https://w3id.org/vc-revocation-list-2020/v1` is injected into
                the credential `@context` object when it is issued. This
                references the JSON-LD definition of the `credentialStatus`
                object used to manage revocation status.
            includeId:
              type: boolean
              description: >-
                When set to `true`, the signed credential identifier is included
                in both the `credential` object and the credential metadata.
                When set to `false` it is only included in the credential
                metadata.
              default: false
              example: true
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of `years`, `months`, `weeks`, `days`,
                `hours`, `minutes` and `seconds`.
              properties:
                years:
                  type: number
                months:
                  type: number
                  example: 3
                weeks:
                  type: number
                days:
                  type: number
                hours:
                  type: number
                minutes:
                  type: number
                seconds:
                  type: number
      title: CredentialConfigurationResponse
    web-semantic-credential-configurations_components-schemas-GetCredentialConfigurationsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          type: array
          items:
            required:
              - id
              - name
              - type
              - issuer
              - persist
              - revocable
            allOf:
              - type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Credential Configuration ID
                    example: 983c0a86-204f-4431-9371-f5a22e506599
              - type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                    maxLength: 1024
                    description: >-
                      Insert a meaningful name for the credential. This string
                      is displayed on the top part of the credential in the
                      holder's digital wallet. It is recommended to limit this
                      value to 18 characters as any additional characters are
                      not displayed on the credential.
                    example: Course credential
                  description:
                    type: string
                    maxLength: 1024
                    description: >-
                      Insert a meaningful description for the credential. This
                      string is displayed below the name field on the credential
                      in the holder's digital wallet. It is recommended to
                      limist this value to 38 characters as any additional
                      characters are not displayed on the credential.
                    example: >-
                      This credential shows that the person has attended a
                      course.
                  type:
                    description: >-
                      Used to differentiate between different Web credential
                      configurations on your tenant. Thus, its value must:

                      - Be unique across all Web credential configurations on
                      your tenant.

                      - Not be `VerifiableCredential`.
                    type: string
                    minLength: 1
                    maxLength: 1024
                    example: CourseCredential
                  additionalTypes:
                    description: >-
                      Additional credential types that can be referenced. Each
                      entry must be 1-1024 characters long, with no whitespaces
                      allowed.
                    type: array
                    example:
                      - AlumniCredential
                      - EducationCredential
                    items:
                      type: string
                      maxLength: 1024
                  contexts:
                    type: array
                    description: >-
                      Additional JSON-LD contexts to be included in the
                      credential. As part of the credential issuance MATTR VII
                      will auto-inject the following contexts, which reference
                      the W3C Verifiable Credential definitions:

                      - https://www.w3.org/2018/credentials/v1

                      - https://mattr.global/contexts/vc-extensions/v2

                      - https://w3id.org/vc-revocation-list-2020/v1

                      If you require introducing a different context for your
                      production implementation, please [contact
                      us](https://mattr.global/contact). Referenced contexts
                      must be whitelisted or credential issuance will fail.
                    example:
                      - https://optionalschema.example/
                    items:
                      type: string
                      description: Must be an HTTPS URL.
                  issuer:
                    type: object
                    description: >-
                      Issuer details and branding for issued credentials. Refer
                      to this
                      [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                      learn more about branding best practices.
                    required:
                      - name
                    properties:
                      name:
                        type: string
                        description: >-
                          Insert a meaningful name to indicate the issuer. This
                          string is used when the credential is offered to the
                          holder. It is also used on the bottom part of the
                          credential when `logoURL` is not provided.
                        example: ABC University
                      logoUrl:
                        type: string
                        description: >-
                          Insert a URL for a logo that is displayed on the
                          bottom part of the credential. If no logo is provided,
                          the issuer's `name` and `iconURL` are used instead.
                          The logo must meet the following criteria:

                          - URL must be publicly available.

                          - Must be 140x42 px in size.

                          - **svg**, **png** and **jpg** files are supported,
                          but **svg** is recommended. Raster images, whilst
                          supported, are currently displayed at 1x resolution
                          and may look pixelated on some devices.

                          - Transparencies are allowed for **svg** or **png**
                          images.

                          - If no logo is provided, the first letter of the
                          issuer name is displayed instead.

                          - The recommended maximum size is 50 KB.
                        example: https://example.edu/img/logo.png
                      iconUrl:
                        type: string
                        example: https://example.edu/img/icon.png
                        description: >-
                          Insert a URL for an icon that is displayed next to the
                          issuer's name when the credential is offered to the
                          holder. It is also displayed next to the issuer's name
                          on the bottom part of the credential when `logoURL` is
                          not provided. When `iconURL` is not provided, the
                          first letter from `name` is used instead. The icon
                          must meet the following criteria:

                          - URL must be publicly available.

                          - Must be 32x32 px in size.

                          - **svg**, **png** and **jpg** files are supported,
                          but **svg** is recommended. Raster images, whilst
                          supported, are currently displayed at 1x resolution
                          and may look pixelated on some devices.

                          - Transparencies are allowed for svg or png images.

                          - The recommended maximum size is 15 KB.
                  proofType:
                    description: >-
                      This is an _optional_ field which defines the
                      cryptographic algorithm used to sign the credential. The
                      credential Issuer's DID must contain a key that supports
                      the corresponding signing capability. If no `proofType` is
                      provided, the credential will be signed using the key that
                      is available in the Issuer's DID:

                      - If a `Bls12381G2` key is available, the credential will
                      be signed with a `BbsSignature2022` proof. Credentials
                      signed with this proof type support [selective
                      disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                      - If a `Bls12381G2` key is unavailable and a `Ed25519` key
                      is available, the credential will be signed with a
                      `Ed25519Signature2018` proof. Credentials signed with this
                      proof type do not support [selective
                      disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                      - If none of the two suitable keys are available, the
                      request will be rejected and the credential will not be
                      created.
                    type: string
                    enum:
                      - Ed25519Signature2018
                      - BbsSignature2022
                    example: Ed25519Signature2018
                  credentialBranding:
                    type: object
                    description: >-
                      Additional branding that will be applied to issued
                      credentials. Refer to this
                      [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                      learn more about branding best practices.
                    properties:
                      backgroundColor:
                        type: string
                        example: '#B00AA0'
                        description: >-
                          Insert a colour hex code to use for the credential
                          background color in the holder's digital wallet.
                      watermarkImageUrl:
                        type: string
                        example: https://example.edu/img/watermark.png
                        description: >-
                          Insert a URL for a watermark image to be included as a
                          pattern on the credential in the holder's digital
                          wallet:

                          - URL must be publicly available.

                          - Must be 245x150px in size.

                          - **svg**, **png** and **jpg** files are supported,
                          but **svg** is recommended.

                          - If no watermark image is provided, a wave pattern is
                          applied to the credentials by default.

                          - The recommended maximum size is 150 KB.
                  claimMappings:
                    type: object
                    description: >
                      This is where you specify how to map claims (user
                      attributes) into issued credentials. Each field in the
                      object corresponds to a claim in the issued credential,
                      and contains one or more from the following attributes:

                      - `mapFrom`: References the path in the user object where
                      the claim is available.
                        - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                        - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                      - `defaultValue`: Indicates what value is used if required
                      is set to `false` (field is optional) and no value is
                      provided by the claims source. When `defaultValue` is
                      provided, `mapFrom` is optional.

                      - `required`: Indicates whether the claim is required
                      (default: `false`). When a required claim cannot be
                      retrieved and no `defaultValue` is available, credential
                      issuance will fail.

                      **Example source context object**

                      ```json

                      {
                        "claims": {
                          "given_name": "Jamie",
                          "family_name": "Doe",
                          "address": {
                            "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                          }
                        },
                        "authenticationProvider": {
                          "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                          "url": "https://accounts.google.com"
                        }
                      }

                      ```
                    example:
                      firstName:
                        mapFrom: claims.given_name
                        required: true
                      address:
                        mapFrom: claims.address.formatted
                      picture:
                        mapFrom: claims.picture
                        defaultValue: http://example.edu/img/placeholder.png
                      badge:
                        defaultValue: http://example.edu/img/badge.png
                      providerSubjectId:
                        mapFrom: authenticationProvider.subjectId
                    additionalProperties:
                      type: object
                      properties:
                        mapFrom:
                          type: string
                          description: >-
                            The path of the property in the source context
                            object.
                        required:
                          type: boolean
                          description: >-
                            Indicates whether value of the property must be
                            resolvable. If set to true and does not map to a
                            value, issuance will fail.
                        defaultValue:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
                            - type: array
                            - type: object
                          description: >-
                            Default value to be used when unable to resolve from
                            the supplied context object. Required when `mapFrom`
                            is not defined.
                  persist:
                    type: boolean
                    default: false
                    description: >-
                      When set to `true`, both the issued credential and its
                      metadata are stored in the [credential
                      registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                      When set to `false` (default) only the following metadata
                      is stored:

                      - `id`

                      - `tag`

                      - `credentialStatus`

                      - `issuanceDate`
                  revocable:
                    type: boolean
                    default: true
                    description: >-
                      When set to `true` (default), the created credential can
                      later be revoked. When set to `false`, the credential
                      cannot be revoked. When set to `true`,
                      `https://w3id.org/vc-revocation-list-2020/v1` is injected
                      into the credential `@context` object when it is issued.
                      This references the JSON-LD definition of the
                      `credentialStatus` object used to manage revocation
                      status.
                  includeId:
                    type: boolean
                    description: >-
                      When set to `true`, the signed credential identifier is
                      included in both the `credential` object and the
                      credential metadata. When set to `false` it is only
                      included in the credential metadata.
                    default: false
                    example: true
                  claimSourceId:
                    type: string
                    format: uuid
                    description: >-
                      References the unique identifier of a claims source that
                      can be used to retrieve claims and include them in the
                      issued credential.
                  expiresIn:
                    type: object
                    description: >-
                      Used to determine when will issued credentials expire. Can
                      include any combination of `years`, `months`, `weeks`,
                      `days`, `hours`, `minutes` and `seconds`.
                    properties:
                      years:
                        type: number
                      months:
                        type: number
                        example: 3
                      weeks:
                        type: number
                      days:
                        type: number
                      hours:
                        type: number
                      minutes:
                        type: number
                      seconds:
                        type: number
            title: CredentialConfigurationResponse
      title: GetCredentialConfigurationsResponse
    web-semantic-credential-configurations_components-schemas-CredentialConfigurationRequest:
      required:
        - name
        - type
        - issuer
      allOf:
        - type: object
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 1024
              description: >-
                Insert a meaningful name for the credential. This string is
                displayed on the top part of the credential in the holder's
                digital wallet. It is recommended to limit this value to 18
                characters as any additional characters are not displayed on the
                credential.
              example: Course credential
            description:
              type: string
              maxLength: 1024
              description: >-
                Insert a meaningful description for the credential. This string
                is displayed below the name field on the credential in the
                holder's digital wallet. It is recommended to limist this value
                to 38 characters as any additional characters are not displayed
                on the credential.
              example: This credential shows that the person has attended a course.
            type:
              description: >-
                Used to differentiate between different Web credential
                configurations on your tenant. Thus, its value must:

                - Be unique across all Web credential configurations on your
                tenant.

                - Not be `VerifiableCredential`.
              type: string
              minLength: 1
              maxLength: 1024
              example: CourseCredential
            additionalTypes:
              description: >-
                Additional credential types that can be referenced. Each entry
                must be 1-1024 characters long, with no whitespaces allowed.
              type: array
              example:
                - AlumniCredential
                - EducationCredential
              items:
                type: string
                maxLength: 1024
            contexts:
              type: array
              description: >-
                Additional JSON-LD contexts to be included in the credential. As
                part of the credential issuance MATTR VII will auto-inject the
                following contexts, which reference the W3C Verifiable
                Credential definitions:

                - https://www.w3.org/2018/credentials/v1

                - https://mattr.global/contexts/vc-extensions/v2

                - https://w3id.org/vc-revocation-list-2020/v1

                If you require introducing a different context for your
                production implementation, please [contact
                us](https://mattr.global/contact). Referenced contexts must be
                whitelisted or credential issuance will fail.
              example:
                - https://optionalschema.example/
              items:
                type: string
                description: Must be an HTTPS URL.
            issuer:
              type: object
              description: >-
                Issuer details and branding for issued credentials. Refer to
                this [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to
                learn more about branding best practices.
              required:
                - name
              properties:
                name:
                  type: string
                  description: >-
                    Insert a meaningful name to indicate the issuer. This string
                    is used when the credential is offered to the holder. It is
                    also used on the bottom part of the credential when
                    `logoURL` is not provided.
                  example: ABC University
                logoUrl:
                  type: string
                  description: >-
                    Insert a URL for a logo that is displayed on the bottom part
                    of the credential. If no logo is provided, the issuer's
                    `name` and `iconURL` are used instead. The logo must meet
                    the following criteria:

                    - URL must be publicly available.

                    - Must be 140x42 px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended. Raster images, whilst supported, are
                    currently displayed at 1x resolution and may look pixelated
                    on some devices.

                    - Transparencies are allowed for **svg** or **png** images.

                    - If no logo is provided, the first letter of the issuer
                    name is displayed instead.

                    - The recommended maximum size is 50 KB.
                  example: https://example.edu/img/logo.png
                iconUrl:
                  type: string
                  example: https://example.edu/img/icon.png
                  description: >-
                    Insert a URL for an icon that is displayed next to the
                    issuer's name when the credential is offered to the holder.
                    It is also displayed next to the issuer's name on the bottom
                    part of the credential when `logoURL` is not provided. When
                    `iconURL` is not provided, the first letter from `name` is
                    used instead. The icon must meet the following criteria:

                    - URL must be publicly available.

                    - Must be 32x32 px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended. Raster images, whilst supported, are
                    currently displayed at 1x resolution and may look pixelated
                    on some devices.

                    - Transparencies are allowed for svg or png images.

                    - The recommended maximum size is 15 KB.
            proofType:
              description: >-
                This is an _optional_ field which defines the cryptographic
                algorithm used to sign the credential. The credential Issuer's
                DID must contain a key that supports the corresponding signing
                capability. If no `proofType` is provided, the credential will
                be signed using the key that is available in the Issuer's DID:

                - If a `Bls12381G2` key is available, the credential will be
                signed with a `BbsSignature2022` proof. Credentials signed with
                this proof type support [selective
                disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                - If a `Bls12381G2` key is unavailable and a `Ed25519` key is
                available, the credential will be signed with a
                `Ed25519Signature2018` proof. Credentials signed with this proof
                type do not support [selective
                disclosure](https://learn.mattr.global/docs/concepts/selective-disclosure).

                - If none of the two suitable keys are available, the request
                will be rejected and the credential will not be created.
              type: string
              enum:
                - Ed25519Signature2018
                - BbsSignature2022
              example: Ed25519Signature2018
            credentialBranding:
              type: object
              description: >-
                Additional branding that will be applied to issued credentials.
                Refer to this
                [video](https://www.youtube.com/watch?v=Tu8ApHBWG90) to learn
                more about branding best practices.
              properties:
                backgroundColor:
                  type: string
                  example: '#B00AA0'
                  description: >-
                    Insert a colour hex code to use for the credential
                    background color in the holder's digital wallet.
                watermarkImageUrl:
                  type: string
                  example: https://example.edu/img/watermark.png
                  description: >-
                    Insert a URL for a watermark image to be included as a
                    pattern on the credential in the holder's digital wallet:

                    - URL must be publicly available.

                    - Must be 245x150px in size.

                    - **svg**, **png** and **jpg** files are supported, but
                    **svg** is recommended.

                    - If no watermark image is provided, a wave pattern is
                    applied to the credentials by default.

                    - The recommended maximum size is 150 KB.
            claimMappings:
              type: object
              description: >
                This is where you specify how to map claims (user attributes)
                into issued credentials. Each field in the object corresponds to
                a claim in the issued credential, and contains one or more from
                the following attributes:

                - `mapFrom`: References the path in the user object where the
                claim is available.
                  - When using a URL as a claims namespace identifier, use bracket notation to access the claim value (e.g. `mapFrom: "claims['https://example.com/claim-name']"`).
                  - `mapForm` is optional when `defaultValue` is provided, as the latter will be used for all issued credentials. This is referred to as a **static claim**.
                - `defaultValue`: Indicates what value is used if required is
                set to `false` (field is optional) and no value is provided by
                the claims source. When `defaultValue` is provided, `mapFrom` is
                optional.

                - `required`: Indicates whether the claim is required (default:
                `false`). When a required claim cannot be retrieved and no
                `defaultValue` is available, credential issuance will fail.

                **Example source context object**

                ```json

                {
                  "claims": {
                    "given_name": "Jamie",
                    "family_name": "Doe",
                    "address": {
                      "formatted": "116-118 Quay Street, Auckland CBD, Auckland 1010"
                    }
                  },
                  "authenticationProvider": {
                    "subjectId": "6d3aab7d-73af-5f61-b47c-109ef6f7558c",
                    "url": "https://accounts.google.com"
                  }
                }

                ```
              example:
                firstName:
                  mapFrom: claims.given_name
                  required: true
                address:
                  mapFrom: claims.address.formatted
                picture:
                  mapFrom: claims.picture
                  defaultValue: http://example.edu/img/placeholder.png
                badge:
                  defaultValue: http://example.edu/img/badge.png
                providerSubjectId:
                  mapFrom: authenticationProvider.subjectId
              additionalProperties:
                type: object
                properties:
                  mapFrom:
                    type: string
                    description: The path of the property in the source context object.
                  required:
                    type: boolean
                    description: >-
                      Indicates whether value of the property must be
                      resolvable. If set to true and does not map to a value,
                      issuance will fail.
                  defaultValue:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: array
                      - type: object
                    description: >-
                      Default value to be used when unable to resolve from the
                      supplied context object. Required when `mapFrom` is not
                      defined.
            persist:
              type: boolean
              default: false
              description: >-
                When set to `true`, both the issued credential and its metadata
                are stored in the [credential
                registry](https://learn.mattr.global/tutorials/create/web-credentials/registry/overview).
                When set to `false` (default) only the following metadata is
                stored:

                - `id`

                - `tag`

                - `credentialStatus`

                - `issuanceDate`
            revocable:
              type: boolean
              default: true
              description: >-
                When set to `true` (default), the created credential can later
                be revoked. When set to `false`, the credential cannot be
                revoked. When set to `true`,
                `https://w3id.org/vc-revocation-list-2020/v1` is injected into
                the credential `@context` object when it is issued. This
                references the JSON-LD definition of the `credentialStatus`
                object used to manage revocation status.
            includeId:
              type: boolean
              description: >-
                When set to `true`, the signed credential identifier is included
                in both the `credential` object and the credential metadata.
                When set to `false` it is only included in the credential
                metadata.
              default: false
              example: true
            claimSourceId:
              type: string
              format: uuid
              description: >-
                References the unique identifier of a claims source that can be
                used to retrieve claims and include them in the issued
                credential.
            expiresIn:
              type: object
              description: >-
                Used to determine when will issued credentials expire. Can
                include any combination of `years`, `months`, `weeks`, `days`,
                `hours`, `minutes` and `seconds`.
              properties:
                years:
                  type: number
                months:
                  type: number
                  example: 3
                weeks:
                  type: number
                days:
                  type: number
                hours:
                  type: number
                minutes:
                  type: number
                seconds:
                  type: number
      title: CreateCredentialConfigurationRequest
    CreateOidcVerifierRequest:
      type: object
      properties:
        verifierDid:
          type: string
          description: Specifies the DID where the verifiable presenation will be sent to.
          example: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
        presentationTemplateId:
          type: string
          format: uuid
          description: >-
            References the unique idetnifier of a Presentation Request Template
            that will be used by this verifier to create presentation requests.
          example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
        claimMappings:
          type: array
          description: >-
            As part of verifying a credential, the OIDC client initiates the
            request expecting a standard OIDC ID Token. However, as the digital
            wallet provides the credential in JSON-LD terms, it is required to
            map JSON-LD claims to OpenID Connect terms.

            - Currently the platform only supports `schema.org` for data
            vocabularies.

            - Make sure to use `http://` and not `https://` when entering
            jsonLdFqn values for schema.org. Otherwise you may not get the
            claims returned in your ID Token.

            - Standard OIDC claims are available on the [Common Credential to
            OIDC Claim mappings
            page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
            so you can just copy & paste into your payload.
          items:
            type: object
            required:
              - jsonLdFqn
              - oidcClaim
            properties:
              jsonLdFqn:
                type: string
                description: Fully qualified JSON-LD term.
                example: http://schema.org/alumniOf
              oidcClaim:
                type: string
                description: OpenID Connect term.
                example: alumni_of
        includePresentation:
          type: boolean
          description: >-
            When set to `true`, the generated `id_token` will include the
            original presentation from the wallet.
          example: true
      required:
        - verifierDid
        - presentationTemplateId
        - claimMappings
      title: CreateOidcVerifierRequest
    CreateOidcVerifierResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: >-
                Uniquely identifies this OIDC Verifier. You will need it to
                configure an OIDC Client on your OIDC Verifier. You can also use
                it to retrieve, update or remove this OIDC Verifier.
              example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
        - type: object
          properties:
            verifierDid:
              type: string
              description: >-
                Specifies the DID where the verifiable presenation will be sent
                to.
              example: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
            presentationTemplateId:
              type: string
              format: uuid
              description: >-
                References the unique idetnifier of a Presentation Request
                Template that will be used by this verifier to create
                presentation requests.
              example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
            claimMappings:
              type: array
              description: >-
                As part of verifying a credential, the OIDC client initiates the
                request expecting a standard OIDC ID Token. However, as the
                digital wallet provides the credential in JSON-LD terms, it is
                required to map JSON-LD claims to OpenID Connect terms.

                - Currently the platform only supports `schema.org` for data
                vocabularies.

                - Make sure to use `http://` and not `https://` when entering
                jsonLdFqn values for schema.org. Otherwise you may not get the
                claims returned in your ID Token.

                - Standard OIDC claims are available on the [Common Credential
                to OIDC Claim mappings
                page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                so you can just copy & paste into your payload.
              items:
                type: object
                required:
                  - jsonLdFqn
                  - oidcClaim
                properties:
                  jsonLdFqn:
                    type: string
                    description: Fully qualified JSON-LD term.
                    example: http://schema.org/alumniOf
                  oidcClaim:
                    type: string
                    description: OpenID Connect term.
                    example: alumni_of
            includePresentation:
              type: boolean
              description: >-
                When set to `true`, the generated `id_token` will include the
                original presentation from the wallet.
              example: true
          required:
            - verifierDid
            - presentationTemplateId
            - claimMappings
          title: CreateOidcVerifierRequest
      title: CreateOidcVerifierResponse
    GetOidcVerifiersResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          allOf:
            - type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: >-
                    Uniquely identifies this OIDC Verifier. You will need it to
                    configure an OIDC Client on your OIDC Verifier. You can also
                    use it to retrieve, update or remove this OIDC Verifier.
                  example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
            - type: object
              properties:
                verifierDid:
                  type: string
                  description: >-
                    Specifies the DID where the verifiable presenation will be
                    sent to.
                  example: did:key:z6MkrYVmyqSA93o4B1GwERM8kaQDMAUKAFV2TC3weQKeg9Gq
                presentationTemplateId:
                  type: string
                  format: uuid
                  description: >-
                    References the unique idetnifier of a Presentation Request
                    Template that will be used by this verifier to create
                    presentation requests.
                  example: 364b6a1b-3600-4927-a6ac-4d66aa6bbac3
                claimMappings:
                  type: array
                  description: >-
                    As part of verifying a credential, the OIDC client initiates
                    the request expecting a standard OIDC ID Token. However, as
                    the digital wallet provides the credential in JSON-LD terms,
                    it is required to map JSON-LD claims to OpenID Connect
                    terms.

                    - Currently the platform only supports `schema.org` for data
                    vocabularies.

                    - Make sure to use `http://` and not `https://` when
                    entering jsonLdFqn values for schema.org. Otherwise you may
                    not get the claims returned in your ID Token.

                    - Standard OIDC claims are available on the [Common
                    Credential to OIDC Claim mappings
                    page](https://learn.mattr.global/tutorials/verify/web-credentials/oidc-bridge/common-mappings),
                    so you can just copy & paste into your payload.
                  items:
                    type: object
                    required:
                      - jsonLdFqn
                      - oidcClaim
                    properties:
                      jsonLdFqn:
                        type: string
                        description: Fully qualified JSON-LD term.
                        example: http://schema.org/alumniOf
                      oidcClaim:
                        type: string
                        description: OpenID Connect term.
                        example: alumni_of
                includePresentation:
                  type: boolean
                  description: >-
                    When set to `true`, the generated `id_token` will include
                    the original presentation from the wallet.
                  example: true
              required:
                - verifierDid
                - presentationTemplateId
                - claimMappings
              title: CreateOidcVerifierRequest
          title: CreateOidcVerifierResponse
      title: GetOidcVerifiersResponse
    CreateOidcVerifierClientRequest:
      type: object
      properties:
        name:
          type: string
          description: Insert a meaningful name for your OIDC Client.
          example: OIDC Client for the verifier
        redirectUris:
          type: array
          items:
            type: string
            format: uri
          description: >-
            This array can include a list of URLs. One of the URIs in that list
            must match the callback URI configured for your OIDC Client for the
            Authorization Request:

            - Must be a valid URL.

            - Must use the HTTPS protocol.

            - Must not be an IP address.

            - Must not include query parameters.

            - For testing, it’s okay to add a localhost uri like
            https://localhost:9090/callback
          example:
            - https://example.com/callback
        responseTypes:
          type: array
          items:
            type: string
          description: Determines the authorization processing flow.
          example:
            - code
        grantTypes:
          type: array
          items:
            type: string
          description: OAuth Grant Type.
          example:
            - authorization_code
        tokenEndpointAuthMethod:
          type: string
          description: OAuth Token Endpoint Authentication Method.
          example: client_secret_post
        idTokenSignedResponseAlg:
          type: string
          description: Algorithm must match configured jwks. Defaults to `ES256`.
          example: ES256
        applicationType:
          type: string
          example: web
        logoUri:
          type: string
          format: uri
          description: The logo to display above the QR code.
          example: https://example.com/logo.png
      required:
        - name
        - redirectUris
        - idTokenSignedResponseAlg
      title: CreateOidcVerifierClientRequest
    CreateOidcVerifierClientResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Make note of your id with this OIDC Client.
              example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
            secret:
              type: string
              description: Make note of your secret with this OIDC Client.
              example: H2epdcmNJ46hXJo5opdzvhbZK9W2ZGPkQh.E
        - type: object
          properties:
            name:
              type: string
              description: Insert a meaningful name for your OIDC Client.
              example: OIDC Client for the verifier
            redirectUris:
              type: array
              items:
                type: string
                format: uri
              description: >-
                This array can include a list of URLs. One of the URIs in that
                list must match the callback URI configured for your OIDC Client
                for the Authorization Request:

                - Must be a valid URL.

                - Must use the HTTPS protocol.

                - Must not be an IP address.

                - Must not include query parameters.

                - For testing, it’s okay to add a localhost uri like
                https://localhost:9090/callback
              example:
                - https://example.com/callback
            responseTypes:
              type: array
              items:
                type: string
              description: Determines the authorization processing flow.
              example:
                - code
            grantTypes:
              type: array
              items:
                type: string
              description: OAuth Grant Type.
              example:
                - authorization_code
            tokenEndpointAuthMethod:
              type: string
              description: OAuth Token Endpoint Authentication Method.
              example: client_secret_post
            idTokenSignedResponseAlg:
              type: string
              description: Algorithm must match configured jwks. Defaults to `ES256`.
              example: ES256
            applicationType:
              type: string
              example: web
            logoUri:
              type: string
              format: uri
              description: The logo to display above the QR code.
              example: https://example.com/logo.png
          required:
            - name
            - redirectUris
            - idTokenSignedResponseAlg
          title: CreateOidcVerifierClientRequest
      title: CreateOidcVerifierClientResponse
    GetOidcVerifierClientsResponse:
      type: object
      properties:
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1hNjZmZmVhNS04NDhlLTQzOWQtODBhNC1kZGE1NWY1M2UzNmM
          description: Starting point for next cursor to use in a page
        data:
          allOf:
            - type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: Make note of your id with this OIDC Client.
                  example: da9bb6e4-c9ae-4468-b6ac-72b90d6efd5d
                secret:
                  type: string
                  description: Make note of your secret with this OIDC Client.
                  example: H2epdcmNJ46hXJo5opdzvhbZK9W2ZGPkQh.E
            - type: object
              properties:
                name:
                  type: string
                  description: Insert a meaningful name for your OIDC Client.
                  example: OIDC Client for the verifier
                redirectUris:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: >-
                    This array can include a list of URLs. One of the URIs in
                    that list must match the callback URI configured for your
                    OIDC Client for the Authorization Request:

                    - Must be a valid URL.

                    - Must use the HTTPS protocol.

                    - Must not be an IP address.

                    - Must not include query parameters.

                    - For testing, it’s okay to add a localhost uri like
                    https://localhost:9090/callback
                  example:
                    - https://example.com/callback
                responseTypes:
                  type: array
                  items:
                    type: string
                  description: Determines the authorization processing flow.
                  example:
                    - code
                grantTypes:
                  type: array
                  items:
                    type: string
                  description: OAuth Grant Type.
                  example:
                    - authorization_code
                tokenEndpointAuthMethod:
                  type: string
                  description: OAuth Token Endpoint Authentication Method.
                  example: client_secret_post
                idTokenSignedResponseAlg:
                  type: string
                  description: Algorithm must match configured jwks. Defaults to `ES256`.
                  example: ES256
                applicationType:
                  type: string
                  example: web
                logoUri:
                  type: string
                  format: uri
                  description: The logo to display above the QR code.
                  example: https://example.com/logo.png
              required:
                - name
                - redirectUris
                - idTokenSignedResponseAlg
              title: CreateOidcVerifierClientRequest
          title: CreateOidcVerifierClientResponse
      title: GetOidcVerifierClientsResponse
    schemas-OpenIdConfiguration:
      type: object
      properties:
        authorization_endpoint:
          type: string
          format: uri
          example: >-
            https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/authorize
        claims_parameter_supported:
          type: boolean
          example: true
        claims_supported:
          type: array
          items:
            type: string
          example:
            - sub
            - sid
            - auth_time
            - iss
        code_challenge_methods_supported:
          type: array
          items:
            type: string
          example:
            - S256
        end_session_endpoint:
          type: string
          format: uri
          example: >-
            https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/session/end
        grant_types_supported:
          type: array
          items:
            type: string
          example:
            - implicit
            - authorization_code
            - refresh_token
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - ES256
        issuer:
          type: string
          format: uri
          example: https://tenant.vii.mattr.global
        jwks_uri:
          type: string
          format: uri
          example: >-
            https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/jwks
        registration_endpoint:
          type: string
          format: uri
          example: >-
            https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/clients
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        request_parameter_supported:
          type: boolean
          example: true
        request_uri_parameter_supported:
          type: boolean
          example: true
        require_request_uri_registration:
          type: boolean
          example: true
        response_modes_supported:
          type: array
          items:
            type: string
          example:
            - form_post
            - fragment
            - query
        response_types_supported:
          type: array
          items:
            type: string
          example:
            - code id_token
            - code
            - id_token
            - none
        scopes_supported:
          type: array
          items:
            type: string
          example:
            - openid
            - offline_access
        subject_types_supported:
          type: array
          items:
            type: string
          example:
            - public
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          example:
            - none
            - client_secret_basic
            - client_secret_jwt
            - client_secret_post
            - private_key_jwt
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - RS256
            - PS256
            - ES256
            - EdDSA
        token_endpoint:
          type: string
          format: uri
          example: >-
            https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/token
        userinfo_endpoint:
          type: string
          format: uri
          example: >-
            https://tenant.vii.mattr.global/ext/oidc/v1/issuers/983c0a86-204f-4431-9371-f5a22e506599/me
        userinfo_signing_alg_values_supported:
          type: array
          items:
            type: string
          example:
            - HS256
            - ES256
        claim_types_supported:
          type: array
          items:
            type: string
          example:
            - normal
      title: OpenIdConfiguration
    InitialTokenRequest:
      type: object
      properties:
        client_id:
          oneOf:
            - example: G1s1EPMml4L0zFd63R1YP
          type: string
        client_secret:
          type: string
          example: >-
            aYzQUXD0VtlNHhTnxt6cyJeMgLczIBm-AA87STG0narCG8P0iL78fAO7TcWjPBYKwpoZY7Sw8MWNwvqf5VVqFw
        grant_type:
          type: string
          example: authorization_code
        code:
          type: string
          example: shdT2ks5tg9b
        redirect_uri:
          type: string
          format: uri
          example: https://my-client-rp.example.com
      title: InitialTokenRequest
    RefreshTokenRequest:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        grant_type:
          type: string
          example: authorization_code
        refresh_token:
          type: string
        redirect_uri:
          type: string
          format: uri
      title: RefreshTokenRequest
    TokenRequest:
      oneOf:
        - type: object
          properties:
            client_id:
              oneOf:
                - example: G1s1EPMml4L0zFd63R1YP
              type: string
            client_secret:
              type: string
              example: >-
                aYzQUXD0VtlNHhTnxt6cyJeMgLczIBm-AA87STG0narCG8P0iL78fAO7TcWjPBYKwpoZY7Sw8MWNwvqf5VVqFw
            grant_type:
              type: string
              example: authorization_code
            code:
              type: string
              example: shdT2ks5tg9b
            redirect_uri:
              type: string
              format: uri
              example: https://my-client-rp.example.com
          title: InitialTokenRequest
        - type: object
          properties:
            client_id:
              type: string
            client_secret:
              type: string
            grant_type:
              type: string
              example: authorization_code
            refresh_token:
              type: string
            redirect_uri:
              type: string
              format: uri
          title: RefreshTokenRequest
      title: TokenRequest
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          enum:
            - bearer
        refresh_token:
          type: string
        expires_in:
          type: integer
        id_token:
          type: string
      title: TokenResponse
    GetWebhooksResponse:
      type: object
      properties:
        data:
          type: array
          minItems: 2
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Webhook id
                example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
              events:
                type: array
                description: List of events that trigger the Webhook.
                example:
                  - OidcIssuerCredentialIssued
                items:
                  type: string
              url:
                description: >-
                  The URL that will receive the Webhook events data payload when
                  they are triggered.
                type: string
                example: https://example.com
                format: uri
              disabled:
                type: boolean
                description: >-
                  Indicates whether ot not the Webhook is disabled. When set to
                  `true` the webhook is disabled, and notifications for events
                  associated with it will not be sent.
                default: false
        nextCursor:
          type: string
          example: >-
            Y3JlYXRlZEF0PTIwMjItMDgtMjJUMDElM0E1OSUzQTE5LjYyMFomaWQ9MGMwOTk2MTEtMTljNC00ZjI5LTg3MjQtNmI5ZTViYTFlZjdj
      title: GetWebhooksResponse
    CreateWebhookRequest:
      type: object
      properties:
        events:
          type: array
          description: >-
            This array includes the event types that will trigger this Webhook.
            The following events are currently supported:

            - **OpenIdCredentialIssued**: Triggered upon completion of an
            OpenID4VCI issuance flow.

            - **OidcIssuerCredentialIssued**: Triggered upon completion of an
            OICD Bridge issuance flow.
          example:
            - OidcIssuerCredentialIssued
          items:
            type: string
            enum:
              - OidcIssuerCredentialIssued
              - OpenIdCredentialIssued
        url:
          description: >-
            This is the URL that will receive the Webhook events data payload
            when they are triggered by MATTR VII for the specified events:

            - Must be a valid URL.

            - Must use the HTTPS protocol.

            - Must not be an IP address.

            - Must not include query parameters or has fragments.

            - Non-ASCII characters are normalised.

            - Must return a 2xx response, otherwise it will go through a retry
            cycle and eventually fail.
          type: string
          example: https://example.com
          format: uri
        disabled:
          type: boolean
          description: >-
            Indicates whether or not the Webhook is disabled. When set to `true`
            the webhook is disabled, and notifications for events associated
            with it will not be sent. If no value is provided, defaults to
            `false`.
      required:
        - events
        - url
      title: CreateWebhookRequest
    CreateWebhookResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: >-
            Unique identifier for the created Webhook. You will need it to
            [verify the
            Webhook](https://learn.mattr.global/tutorials/webhooks/verifying-webhooks).
          example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
        events:
          type: array
          description: List of events that trigger the Webhook, as defined in the request.
          example:
            - OidcIssuerCredentialIssued
          items:
            type: string
        url:
          description: >-
            The URL that will receive the Webhook events data payload when they
            are triggered, as defined in the request.
          type: string
          example: https://example.com
          format: uri
        disabled:
          type: boolean
          description: >-
            Indicates whether ot not the Webhook is disabled. When set to `true`
            the webhook is disabled, and notifications for events associated
            with it will not be sent.
          default: false
      title: CreateWebhookResponse
    GetWebhookResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Webhook id
          example: 0c099611-19c4-4f29-8724-6b9e5ba1ef7c
        events:
          type: array
          description: List of events that trigger the Webhook.
          example:
            - OidcIssuerCredentialIssued
          items:
            type: string
        url:
          description: >-
            The URL that will receive the Webhook events data payload when they
            are triggered.
          type: string
          example: https://example.com
          format: uri
        disabled:
          type: boolean
          description: >-
            Indicates whether ot not the Webhook is disabled. When set to `true`
            the webhook is disabled, and notifications for events associated
            with it will not be sent.
          default: false
      title: GetWebhookResponse
    GetWebhooksJwksResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            oneOf:
              - type: object
                properties:
                  kty:
                    type: string
                    description: Key type.
                    example: OKP
                  crv:
                    type: string
                    description: Elliptic curve used to generate the key.
                    example: Ed25519
                  x:
                    type: string
                    example: 11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo
                  use:
                    type: string
                    example: sig
                  kid:
                    type: string
                    description: >-
                      Key identifier. You should use the `kid` specified in the
                      JWK key object to identify which key a particular HTTP
                      request is signed with, as the key set can change or
                      contain multiple keys.
                    example: FdFYFzERwC2uCBB46pZQi4GG85LujR8obt-KWRBICVQ
  parameters:
    limit:
      schema:
        type: number
        example: 2
        maximum: 1000
        minimum: 1
        default: 100
      in: query
      name: limit
      description: Range size of the list, default 100
    cursor:
      schema:
        type: string
        example: Y3JlYXRlZEF0PTIwMjAtMDgtMjVUMDY6NDY6MDkuNTEwWiZpZD1h
      in: query
      name: cursor
      description: Starting point for the list
    ecosystemId:
      in: path
      name: ecosystemId
      description: The UUID of the ecosystem
      required: true
      schema:
        type: string
        format: uuid
        description: The UUID of the ecosystem.
        example: 87880d7e-a4d0-462e-8383-3f1e5e16865d
        readOnly: true
    ifNoneMatch:
      in: header
      name: If-None-Match
      description: >-
        The If-None-Match parameter enables caching. Specify the ETag of the
        latest retrieved policy version, so that the policy is only retrieved if
        it had changed since.
      schema:
        type: string
    acceptEncoding:
      in: header
      name: Accept-Encoding
      description: >-
        Use the Accept-Encoding header to specify the supported content
        encodings.
      schema:
        type: string
        enum:
          - gzip
          - deflate
    participantId:
      in: path
      name: participantId
      description: The UUID of the participant
      required: true
      schema:
        type: string
        format: uuid
        description: The UUID of the participant.
        example: a24e391a-c27f-4b6e-9805-1ee7e03f3c58
        readOnly: true
    credentialId:
      in: path
      name: credentialId
      description: The UUID of the credential
      required: true
      schema:
        type: string
        format: uuid
        example: 599bf148-d711-405a-a20b-9c8a87ac8850
        description: Unique identifier for this credential type.
        readOnly: true
    UserId:
      name: userId
      in: path
      description: User ID
      schema:
        type: string
        format: uuid
        example: 41458e5a-9092-40b7-9a26-d4eb43c5792f
      required: true
  responses:
    '304':
      description: Not Modified. The resource has not been modified since the last request.
    '400':
      description: Bad Request. The request was malformed or missing required parameters.
      content:
        application/json:
          schema:
            title: ValidationError
            description: The request was malformed or missing required parameters.
            type: object
            required:
              - code
              - message
            properties:
              code:
                type: string
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: string
                      description: The value that was provided
                    msg:
                      type: string
                      example: Invalid value
                      description: Description of why the request is invalid
                    param:
                      type: string
                      example: id
                      description: The parameter that is invalid
                    location:
                      type: string
                      example: body
                      description: The location in either body, query, path or params
    '401':
      description: Unauthorized. The client is not authorized to access this resource.
    '403':
      description: >-
        Forbidden. The authorization server refuses to grant the client access
        to the resource.
    '404':
      description: Not Found. The specified resource was not found.
    '500':
      description: Internal Server Error. An unexpected error occurred.
  examples:
    InboxNameNotUnique:
      value:
        code: BadRequest
        message: Unique Constraint Error
        details:
          - param: name
            message: Must be unique
    InboxIdNotUuid:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: notUUIDvalue
            msg: Invalid value
            param: inboxId
            location: params
    ResourceNotFound:
      value:
        code: NotFound
        message: Resource Not Found
    MessageIdNotUuid:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: notUUIDvalue
            msg: Invalid value
            param: messageId
            location: params
    PayloadInvalid:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: ...
            msg: Payload must contain prefix, version and base32 payload
            param: payload
            location: body
    PayloadNotStringError:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: '1'
            msg: must be a string
            param: payload
            location: body
    InvalidCompactCredentialError:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: CSS:/1/BASE_32_ENCODED_PAYLOAD
            msg: The payload does not belong to compact credential profile
            param: payload
            location: body
    QRCodeTooLargeDataError:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: CSC:/1/BASE_32_ENCODED_PAYLOAD
            msg: The amount of data is too big to be stored in a QR Code
            param: payload
            location: body
    QRCodeLargerWidthError:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: '5'
            msg: The generated QR Code is larger than the provided width
            param: width
            location: body
    IssuerNotTrusted:
      value:
        verified: false
        reason:
          - type: IssuerNotTrusted
            msg: ...
        decoded:
          jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
          iss: did:web:xxx
          nbf: 1649037604
          vc:
            '@context':
              - https://www.w3.org/2018/credentials/v1
              - https://example.com/credentials/pass
            type:
              - VerifiableCredential
              - PublicCovidPass
            credentialSubject:
              givenName: Jack
              familyName: Sparrow
              dob: '1979-04-14'
    IssuerPublicKeyInvalid:
      value:
        verified: false
        reason:
          - type: IssuerPublicKeyInvalid
            msg: ...
        decoded:
          jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
          iss: did:web:xxx
          nbf: 1649037604
          vc:
            '@context':
              - https://www.w3.org/2018/credentials/v1
              - https://example.com/credentials/pass
            type:
              - VerifiableCredential
              - PublicCovidPass
            credentialSubject:
              givenName: Jack
              familyName: Sparrow
              dob: '1979-04-14'
    SignatureInvalid:
      value:
        verified: false
        reason:
          - type: SignatureInvalid
            msg: ...
        decoded:
          jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
          iss: did:web:xxx
          nbf: 1649037604
          vc:
            '@context':
              - https://www.w3.org/2018/credentials/v1
              - https://example.com/credentials/pass
            type:
              - VerifiableCredential
              - PublicCovidPass
            credentialSubject:
              givenName: Jack
              familyName: Sparrow
              dob: '1979-04-14'
    Expired:
      value:
        verified: false
        reason:
          - type: Expired
            msg: ...
        decoded:
          jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
          iss: did:web:xxx
          nbf: 1649037604
          vc:
            '@context':
              - https://www.w3.org/2018/credentials/v1
              - https://example.com/credentials/pass
            type:
              - VerifiableCredential
              - PublicCovidPass
            credentialSubject:
              givenName: Jack
              familyName: Sparrow
              dob: '1979-04-14'
    NotActive:
      value:
        verified: false
        reason:
          - type: NotActive
            msg: ...
        decoded:
          jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
          iss: did:web:xxx
          nbf: 1649037604
          vc:
            '@context':
              - https://www.w3.org/2018/credentials/v1
              - https://example.com/credentials/pass
            type:
              - VerifiableCredential
              - PublicCovidPass
            credentialSubject:
              givenName: Jack
              familyName: Sparrow
              dob: '1979-04-14'
    Revoked:
      value:
        verified: false
        reason:
          - type: Revoked
            msg: ...
        decoded:
          jti: urn:uuid:03ae824d-7179-4c01-aa29-f80ba93122d2
          iss: did:web:xxx
          nbf: 1649037604
          vc:
            '@context':
              - https://www.w3.org/2018/credentials/v1
              - https://example.com/credentials/pass
            type:
              - VerifiableCredential
              - PublicCovidPass
            credentialSubject:
              givenName: Jack
              familyName: Sparrow
              dob: '1979-04-14'
    InvalidCompactSemanticCredentialError:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: CSC:/1/BASE_32_ENCODED_PAYLOAD
            msg: The payload does not belong to compact semantic credential profile
            param: payload
            location: body
    examples-PayloadInvalid:
      value:
        code: BadRequest
        message: Validation Error
        details:
          - value: ...
            msg: Not Found
            param: payload.issuer.id
            location: body
servers:
  - url: https://tenantName.vii.region.mattr.global